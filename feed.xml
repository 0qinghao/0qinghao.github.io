<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://0qinghao.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://0qinghao.github.io//" rel="alternate" type="text/html" /><updated>2021-08-04T15:49:49+08:00</updated><id>https://0qinghao.github.io//feed.xml</id><title type="html">林间</title><subtitle>林庆毫的个人空间</subtitle><author><name>Qinghao Lin</name></author><entry><title type="html">值得一记的 vim 使用技巧</title><link href="https://0qinghao.github.io//20200802-vim-technique/" rel="alternate" type="text/html" title="值得一记的 vim 使用技巧" /><published>2020-08-02T00:00:00+08:00</published><updated>2020-08-02T00:00:00+08:00</updated><id>https://0qinghao.github.io//vim-technique</id><content type="html" xml:base="https://0qinghao.github.io//20200802-vim-technique/">&lt;p&gt;记录一些 vim 使用过程中发现的，让自己感叹“原来还可以这样”的一些技巧，时常更新。&lt;/p&gt;

&lt;h3 id=&quot;对括号内的文本操作&quot;&gt;对括号内的文本操作&lt;/h3&gt;

&lt;p&gt;不仅限括号，可理解为成对符号内的文本操作。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ci(&lt;/td&gt;
      &lt;td&gt;修改 () 内的文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;di(&lt;/td&gt;
      &lt;td&gt;删除 () 内的文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;yi(&lt;/td&gt;
      &lt;td&gt;复制 () 内的文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vi(&lt;/td&gt;
      &lt;td&gt;选中 () 内的文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ci”&lt;/td&gt;
      &lt;td&gt;修改 “” 内的文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ci[&lt;/td&gt;
      &lt;td&gt;修改 [] 内的文本&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;数值自增--自减&quot;&gt;数值自增 / 自减&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;a&lt;/kbd&gt;&lt;/td&gt;
      &lt;td&gt;往后查找第一个数字，并使其 +1 （会识别数字的正负性）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt;
      &lt;td&gt;往后查找第一个数字，并使其 -1 （会识别数字的正负性）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;移动到空行&quot;&gt;移动到空行&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;{&lt;/td&gt;
      &lt;td&gt;移动到上一个空行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;}&lt;/td&gt;
      &lt;td&gt;移动到下一个空行&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Qinghao Lin</name></author><category term="vim" /><category term="linux" /><summary type="html">记录一些 vim 使用过程中发现的，让自己感叹“原来还可以这样”的一些技巧，时常更新。</summary></entry><entry><title type="html">在基于 Jekyll 的博客中加入文字的注音</title><link href="https://0qinghao.github.io//20200724-add-ruby-in-jekyll-based-blog/" rel="alternate" type="text/html" title="在基于 Jekyll 的博客中加入文字的注音" /><published>2020-07-24T00:00:00+08:00</published><updated>2020-07-24T00:00:00+08:00</updated><id>https://0qinghao.github.io//add-ruby-in-jekyll-based-blog</id><content type="html" xml:base="https://0qinghao.github.io//20200724-add-ruby-in-jekyll-based-blog/">&lt;p&gt;越来越多的人选择将博客托管在 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub page&lt;/a&gt; 或是国内的 &lt;a href=&quot;https://help.coding.net/docs/devops/cd/static-website.html&quot;&gt;Coding page&lt;/a&gt;，通过 Jekyll 将 markdown 排版的文章渲染为静态网页。
当一个 repo 被你设定为 GitHub page 时，GitHub 将检测 repo 的目录结构，如果符合 Jekyll 的特征，例如根目录下包含 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 配置时，GitHub 将在你 push 后自动进行在线构建。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-23-20-40-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看 repo 的提交历史将能看到构建成功的消息，如果构建失败则会收到一封邮件报告。因此理论上我们在本地甚至不需要配置 Jekyll 环境，只需要保证 push 的内容具备让 GitHub 进行在线构建的条件即可。&lt;/p&gt;

&lt;h3 id=&quot;在线构建的局限性&quot;&gt;在线构建的局限性&lt;/h3&gt;

&lt;p&gt;将构建的任务交给 GitHub 确实十分方便，也能满足绝大部分用户的需求。但我们注意到 GitHub 提供的在线构建服务并不支持所有 Jekyll 插件，支持列表可以在这里查询：&lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;https://pages.github.com/versions/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;而很不幸的是，有一个插件对我来说是必不可少的，而它却不在支持列表中。这个插件是 &lt;a href=&quot;https://github.com/guentoan/jekyll-furigana&quot;&gt;jekyll-furigana&lt;/a&gt;，用于给文本注音，主要应用场景有：&lt;/p&gt;

&lt;p&gt;( 日本語:にほんご )の( 漢字:かんじ )に( 振:ふ )り( 仮名:がな )を( 編集:へんしゅう )する&lt;/p&gt;

&lt;p&gt;( 中:zhōng )( 文:wén )拼音注音&lt;/p&gt;

&lt;p&gt;( 奇奇怪怪的用法:😀😁🤣😑🤨😮😶 )&lt;/p&gt;

&lt;p&gt;幸运的是 GitHub page 支持关闭在线构建，代价则是用户必须在本地配置好 Jekyll 环境，构建、推送构建完成的静态网页到 GitHub page repo。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/about-github-pages-and-jekyll#plugins&quot;&gt;GitHub Pages cannot build sites using unsupported plugins. If you want to use unsupported plugins, generate your site locally and then push your site’s static files to GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;配置-jekyll-furigana-插件&quot;&gt;配置 jekyll-furigana 插件&lt;/h3&gt;

&lt;p&gt;配置 Jekyll 插件的前提当然是配置好本地 Jekyll 环境。这里默认大家已经配置好了，如果还没配置的可以跟着&lt;a href=&quot;http://jekyllcn.com/docs/installation/&quot;&gt;官方文档&lt;/a&gt;做，这里只描述插件的配置方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 Gemfile 中配置 jekyll-furigana 插件
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;
 gem &lt;span class=&quot;s1&quot;&gt;'github-pages'&lt;/span&gt;, group: :jekyll_plugins
 gem &lt;span class=&quot;s1&quot;&gt;'tzinfo-data'&lt;/span&gt;
 gem &lt;span class=&quot;s1&quot;&gt;'jekyll-furigana'&lt;/span&gt;, group: :jekyll_plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;安装
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在 Jekyll 配置文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins:&lt;/code&gt; 部分配置插件
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; plugins:
     - jekyll-github-metadata
     - rouge
     - jekyll-paginate
     - jekyll-sitemap
     - jekyll-feed
     - jemoji
     - jekyll-furigana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在需要启用注音功能的 markdown 博客文件头中加入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;furigana: true&lt;/code&gt;
    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt; ---&lt;/span&gt;
 layout: post
 title: 在基于 Jekyll 的博客中加入文字的注音
 categories: [日语]
 furigana: true
&lt;span class=&quot;p&quot;&gt; ---
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/post.html&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt; 过滤器，加入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;furigana&lt;/code&gt; 过滤器
 &lt;img src=&quot;/assets/images/2020-07-24-20-20-27.png&quot; alt=&quot;&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;默认情况下是修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.html&lt;/code&gt; 文件，如果你的 markdown 文件头中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt; 属性不是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt; 那就要去修改对应的文件。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用方法&quot;&gt;使用方法&lt;/h3&gt;

&lt;p&gt;jekyll-furigana 插件有多种使用格式，可选用下面任意一种。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-24-20-23-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;他们在启用了插件的页面上，都将被渲染为：&lt;/p&gt;

&lt;p&gt;(日本語:にほんご)&lt;/p&gt;

&lt;h3 id=&quot;编译静态网页推送到-github-page-repo&quot;&gt;编译静态网页推送到 GitHub page repo&lt;/h3&gt;

&lt;p&gt;在根目录下编译静态网页，输出到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./docs&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build &lt;span class=&quot;nt&quot;&gt;--destination&lt;/span&gt; ./docs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt; 文件夹内的内容推送到 GitHub page repo&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./docs

git init

git add &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;

git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test furigana&quot;&lt;/span&gt;

git remote add origin https://your-repo-url.git

git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;大约 2 分钟之后，即可打开网页检查插件是否生效。&lt;/p&gt;

&lt;p&gt;最后，感谢你阅读文章。&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><category term="日语" /><category term="linux" /><summary type="html">越来越多的人选择将博客托管在 GitHub page 或是国内的 Coding page，通过 Jekyll 将 markdown 排版的文章渲染为静态网页。</summary></entry><entry><title type="html">vim 在 Verilog 中的应用——生成相似代码</title><link href="https://0qinghao.github.io//20200723-vim-app-in-verilog-generate-similar-code/" rel="alternate" type="text/html" title="vim 在 Verilog 中的应用——生成相似代码" /><published>2020-07-23T00:00:00+08:00</published><updated>2020-07-23T00:00:00+08:00</updated><id>https://0qinghao.github.io//vim-app-in-verilog-generate-similar-code</id><content type="html" xml:base="https://0qinghao.github.io//20200723-vim-app-in-verilog-generate-similar-code/">&lt;p&gt;vim 作为最出色的文本编辑器之一，有着丰富的内置命令和各色各样的开源插件，可以说是杀鸡屠龙无所不能。
但同时 vim 的入门门槛高、学习曲线陡峭，也使得许多人或是望而生畏，或是浅尝辄止。当然也包括我，我在本科阶段第一次接触 vim 的时候，多半是带着一些“装x”的中二情感在强行用，直到最近才开始系统地学习、使用。目前使用的模式是在 VSCode 中激活&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vscodevim.vim&quot;&gt; vim 键映射&lt;/a&gt;，虽然有很多大牛选择从零将 vim 打造成完整的 IDE，但我始终认为 vim 的强处在于文本处理，IDE 部分还是交给 VSCode 吧。&lt;/p&gt;

&lt;p&gt;回到正题，我的主要开发语言是 Verilog，在 Verilog 代码中经常会出现一整段十分相似的代码，一般是只有数字编号不同的内容。例如在对一整组信号做打拍时，这种时候可以应用 vim 的宏功能来快速生成代码。&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// s0-s15 打一拍&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s0_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s1_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s2_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s3_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s4_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s5_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s6_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s7_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s8_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s9_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s10_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s11_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s12_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s13_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s14_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s15_d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;预备知识&quot;&gt;预备知识&lt;/h2&gt;

&lt;h3 id=&quot;vim-宏&quot;&gt;vim 宏&lt;/h3&gt;

&lt;p&gt;vim 处于 normal 模式时，按 &lt;kbd&gt;q&lt;/kbd&gt; &lt;kbd&gt;1&lt;/kbd&gt; 将进入宏录制模式，vim 会录制此后所有操作到宏 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; 中。当然 &lt;kbd&gt;1&lt;/kbd&gt; 键可以任意替换，相应的宏也会录制到对应的键中。录制过程中再次按 &lt;kbd&gt;q&lt;/kbd&gt; 将结束录制，此后可通过 &lt;kbd&gt;@&lt;/kbd&gt; &lt;kbd&gt;1&lt;/kbd&gt; 的方式执行录制的内容。和 vim 中其他命令一样，可以在其前加上任意数字 n 表示重复执行 n 次。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-23-12-24-21.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vim-数字自增功能&quot;&gt;vim 数字自增功能&lt;/h3&gt;

&lt;p&gt;这大概是个比较冷门的功能，很少看见有人提到，但却意外地挺有用。&lt;/p&gt;

&lt;p&gt;normal 模式下，&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt; 将从当前光标处往后查找第一个数字，并且将其 +1。类似地，&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; 实现查找、-1 的功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-23-12-33-50.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;生成相似代码段&quot;&gt;生成相似代码段&lt;/h2&gt;

&lt;p&gt;应用上述两个 vim 功能，即可很方便地生成前言中一组信号打拍的代码块。基本思路是写好第一行之后：复制当前行 → 粘贴 → 找到数字自增，重复这三个操作。因此录制并重复执行的内容就是上述 3 步，具体实现过程如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-23-13-13-18.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;vim 宏录制&lt;/li&gt;
  &lt;li&gt;vim 中的数字自增 / 自减&lt;/li&gt;
  &lt;li&gt;找到代码中的规律，使其自动生成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，感谢你阅读文章。&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><category term="vim" /><category term="verilog" /><category term="linux" /><summary type="html">vim 作为最出色的文本编辑器之一，有着丰富的内置命令和各色各样的开源插件，可以说是杀鸡屠龙无所不能。</summary></entry><entry><title type="html">译 - 使用 iStyle 格式化 Verilog 代码</title><link href="https://0qinghao.github.io//20190809-translate-use-istyle-to-format-verilog-code/" rel="alternate" type="text/html" title="译 - 使用 iStyle 格式化 Verilog 代码" /><published>2019-08-09T00:00:00+08:00</published><updated>2019-08-09T00:00:00+08:00</updated><id>https://0qinghao.github.io//translate-use-istyle-to-format-verilog-code</id><content type="html" xml:base="https://0qinghao.github.io//20190809-translate-use-istyle-to-format-verilog-code/">&lt;blockquote&gt;
  &lt;p&gt;原文：&lt;a href=&quot;https://qiita.com/kkumt93/items/70766645c07c298d19c3&quot;&gt;Verilog でコード整形&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;安装&quot;&gt;安装&lt;/h1&gt;

&lt;p&gt;iStyle 可以从 GitHub 上 clone、make 自行编译出可执行文件，也可以直接下载已编译好的可执行文件。这里都给出来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://github.com/thomasrussellmurphy/istyle-verilog-formatter&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可执行文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://github.com/0qinghao/istyle-verilog-formatter/releases/tag/v1.21_x86_64&lt;/p&gt;

&lt;h1 id=&quot;格式化选项&quot;&gt;格式化选项&lt;/h1&gt;

&lt;p&gt;以下是一些格式化时常用的选项及效果示例。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;待格式化代码&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;--style&quot;&gt;--style&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ANSI style&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iStyle --style=ansi test.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Kernighan&amp;amp;Ritchie style&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iStyle --style=kr test.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;GNU style&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iStyle --style=gnu test.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-s&quot;&gt;-s&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iStyle -s2 test.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该选项指定缩进时的空格数量，-s2 表示每次缩进使用 2 个空格（如果是 - s4 则表示每次用 4 个空格缩进）。&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-p&quot;&gt;-p&lt;/h2&gt;

&lt;p&gt;-p 选项指定在运算符两侧插入空格。&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-p-1&quot;&gt;-P&lt;/h2&gt;

&lt;p&gt;-P 选项指定在运算符和括号周围插入空格。&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;

&lt;p&gt;虽然文中没有写，&lt;strong&gt;module&lt;/strong&gt; 声明的缩进感觉并不是很好。verilog 有各种各样的代码风格，因此有一个强大的格式化程序是很有用的。&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><category term="verilog" /><summary type="html">原文：Verilog でコード整形</summary></entry><entry><title type="html">记一篇日语短文</title><link href="https://0qinghao.github.io//20190625-2017-07-jlpt-n2/" rel="alternate" type="text/html" title="记一篇日语短文" /><published>2019-06-25T00:00:00+08:00</published><updated>2019-06-25T00:00:00+08:00</updated><id>https://0qinghao.github.io//2017-07-jlpt-n2</id><content type="html" xml:base="https://0qinghao.github.io//20190625-2017-07-jlpt-n2/">&lt;p&gt;今年（2019）7 月的 JLPT 也快要开始了，我最重要的一个 emmm… 朋友，参加这次的 N2 考试，祝愿拿到好成绩。💪😊&lt;/p&gt;

&lt;p&gt;两年前，大三的暑假，似乎比今年的夏天更加闷热一些，我第一次参加 JLPT，也是 N2。糊里糊涂刷了不到半本红蓝宝书，外加几套真题，就这样跑去另一个校区考试了。（考试前一天有点感冒，突然发烧头痛，好在睡了一下午就好了很多，想想自己当时也是心大😂）&lt;/p&gt;

&lt;p&gt;那次的 N2 似乎比往年真题简单一些，接近 3 小时的答题时间过得还算舒适，本科 3 年各种突击应付式的考试都快让我忘记了这种——沉浸在试题里的紧张、兴奋和满足感。&lt;/p&gt;

&lt;p&gt;那年的最后一篇长阅读（除去海报内容理解那篇）答得很开心，难度适中，文笔优美（按我的审美来说😂）。尽管是篇鸡汤文，但也强烈地让我想去拜读一下原作，可惜当时没能把出处记下来，也没办法 Google 到。最近不知为何又突然想起这篇文章，遂找出了当年的真题卷重温一遍，顺手在这做一下记录。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;​	人生はいつも旅になぞらえられる。&lt;/p&gt;

&lt;p&gt;​	人は人生という旅路を、地図もなく歩いている。誰しもそうだし、それが人間としては自然な姿である。人生に地図などあるわけがない。なのに人は、人生の地図を持とうとするのが常だ。暗闇の中を歩くのが不安で仕様がないのだ。迷ってしまった時の恐怖を想像したくないからだ。&lt;/p&gt;

&lt;p&gt;​	そして自分の地図には、人生の設計図としてわがままな道程が記されている。三十歳までには結婚し、三十五歳頃には二人の子どもをもつ。四十歳には課長になり、五十歳までには何とか部長に昇進する。&lt;/p&gt;

&lt;p&gt;​	（中略）&lt;/p&gt;

&lt;p&gt;​	人生の地図に描かれた道を、その通りに歩むことができるなら、そんなに楽なことはない。一度も脇道にそれずに、ただまっすぐに歩くことができるのなら、人は何も悩まなくても済むだろう。そんな人生を送る人間は、おそらくこの世に一人もいない。もしそういう人間がいるのだとしたら、それはその人間の人生ではない。その人生は他人から与えられたものに過ぎない。&lt;/p&gt;

&lt;p&gt;​	五十歳の時には部長になっている。これは今という現在地から見た目標であろう。目標を持つことはもちろん大切なことだ。しかし、その目標へ辿り着く道は決して一本ではない。五十歳という現在地に立った時、もし部長になっていなければどうするのか。一枚の地図しか持っていない人、あるいは決して地図を書き変えようとしない人は、そこで人生の現在地を見失ってしまうだろう。｢今、自分はこの場所にいるはずなのに、全く違う所に来てしまった｣と、そんな思いに囚われてしまい、行くべき道も見失ってしまうのである。&lt;/p&gt;

&lt;p&gt;​	地図を持たない人生が不安であるならば、地図を持てばいいだけのことだ。しかし、その一枚の地図にこだわってはならない。常に現在地を確認しながら、どんどん地図を変えていくことだ。&lt;/p&gt;

&lt;p&gt;​	少し脇道に入ってしまったのなら、その脇道を歩いてみればいい。無理をして元の道に戻ろうとしても、余計に迷うだけだ。脇道を歩いているうちに、いつの間にか元の道に戻ることもあるだろうし、また別の大通りに出会うこともあるだろう。人生には数え切れないほどの道があることを知っておいたほうがいい。今いる場所さえしっかりと認識できていれば、人はどんな道だって歩いていくことができるものだ。&lt;/p&gt;

&lt;p&gt;（立松平和『人生の現在地 — まだまだ迷っているぞ、私は。』による）&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><category term="日语" /><summary type="html">今年（2019）7 月的 JLPT 也快要开始了，我最重要的一个 emmm… 朋友，参加这次的 N2 考试，祝愿拿到好成绩。💪😊</summary></entry><entry><title type="html">配置澎峰 Perf-V 开发板 RISC-V 开发环境</title><link href="https://0qinghao.github.io//20181030-per-f-risc-v-dev-env/" rel="alternate" type="text/html" title="配置澎峰 Perf-V 开发板 RISC-V 开发环境" /><published>2018-10-30T00:00:00+08:00</published><updated>2018-10-30T00:00:00+08:00</updated><id>https://0qinghao.github.io//per-f-risc-v-dev-env</id><content type="html" xml:base="https://0qinghao.github.io//20181030-per-f-risc-v-dev-env/">&lt;p&gt;实验室买了一块 Perf-V 开发板，准备开始做 RISC-V 相关的工作。&lt;/p&gt;

&lt;p&gt;虽然澎峰直接给了配置好的虚拟机开发环境，不过因为 Ubuntu16.03 用着不顺手就想要自己把环境配出来。&lt;/p&gt;

&lt;p&gt;看澎峰给的 SDK 目录，就是直接用的开源蜂鸟（GitHub：e200_opensource）微调来的。所以最初尝试着 git e200_opensource 重新配置一遍，结果失败，报错找不到’cc1’。尝试添加 PATH 等操作无果。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;riscv-none-embed-gcc: error trying to exec ‘cc1’: execvp: No such file or directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;后尝试直接把给的环境升级到 18.04，结果出现与上述相同的问题。&lt;/p&gt;

&lt;p&gt;那行吧，既然 sirv-e-sdk 和 Perf-V-e-sdk 都是从 SIFIVE 的 freedom-e-sdk（GitHub：freedom-e-sdk）精简来的，那我就配置整个 freedom-e-sdk 吧。&lt;/p&gt;

&lt;p&gt;总之这几天为了搞定 Perf-V 开发板的开发环境，前前后后踩了不少坑。现在把最后结果记录如下，备忘。&lt;/p&gt;

&lt;h1 id=&quot;克隆-freedom-e-sdk-存储库&quot;&gt;克隆 freedom-e-sdk 存储库&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; https://github.com/sifive/freedom-e-sdk.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文件大，耗时比较长。&lt;/p&gt;

&lt;h1 id=&quot;从源代码构建-tools&quot;&gt;从源代码构建 Tools&lt;/h1&gt;

&lt;p&gt;Ubuntu 需要这些 packages：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;autoconf automake libmpc-dev libmpfr-dev libgmp-dev gawk bison flex texinfo libtool libusb-1.0-0-dev make g++ pkg-config libexpat1-dev zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd freedom-e-sdk
make tools [BOARD=freedom-e300-hifive1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build 过程耗时很长。&lt;/p&gt;

&lt;h1 id=&quot;替换板级支持包&quot;&gt;替换板级支持包&lt;/h1&gt;

&lt;p&gt;freedom-e-sdk 是 SIFIVE 的开发环境，里面的板级支持包只有 sifive 系列，要用来开发 Perf-V 需要先替换 bsp 文件夹。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv ./bsp ./bsp_bak
cp -r ~/fengniao/e200_opensource/Perf-V-e-sdk/bsp ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以把 Perf-V 开发板自带的几个程序顺便复制过来，方便之后测试。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv ./software ./software_bak
cp -r ~/fengniao/e200_opensource/Perf-V-e-sdk/software ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;pc-和开发板的连接&quot;&gt;PC 和开发板的连接&lt;/h1&gt;

&lt;p&gt;如果手头上有胡振波大大《RISC-V 处理器》这本书的同学，请翻到 P318，18.3 节提到了他们的开发板是怎么配置和 PC 连接的。基本上照做就行了，可是别忘了，他们的开发板是 Arty，虽然澎峰用的也是 A7，但是板子 ID 可不一样，所以有 2 个参数要注意了。&lt;/p&gt;

&lt;p&gt;我这就照着书上的步骤 2 到 6 简单写一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤二：通电；点 USB 图标连接至虚拟机&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤三：使用如下命令查看 USB 状态&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsusb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bus 001 Device 002: ID 0403:6010 Future Technology Devices International, Ltd FT2232C Dual USB-UART/FIFO IC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;记下 0403:6010 这两个数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤四：设置 udev rules，使 USB 能够被 plugdev group 访问&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/udev/rules.d/99-openocd.rules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 写入以下内容，注意 0403 和 6010，和书上不一样
SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;0403&quot;,
ATTR{idProduct}==&quot;6010&quot;, MODE=&quot;664&quot;, GROUP=&quot;plugdev&quot;
SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0403&quot;,
ATTRS{idProduct}==&quot;6010&quot;, MODE=&quot;664&quot;, GROUP=&quot;plugdev&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;步骤五：看看 USB 设备所属组，略&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤六：把自己的用户添加到组中&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo usermod -a -G plugdev 你的用户名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;编译上传裸机-risc-v-程序&quot;&gt;编译上传裸机 RISC-V 程序&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd freedom-e-sdk
make software PROGRAM=demo_gpio BOARD=Perf-V-creative-board
make upload PROGRAM=demo_gpio BOARD=Perf-V-creative-board
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Qinghao Lin</name></author><category term="risc-v" /><category term="linux" /><summary type="html">实验室买了一块 Perf-V 开发板，准备开始做 RISC-V 相关的工作。</summary></entry><entry><title type="html">在 Windows 命令行、Linux 终端使用代理</title><link href="https://0qinghao.github.io//20180919-proxy-set-in-windows-and-linux/" rel="alternate" type="text/html" title="在 Windows 命令行、Linux 终端使用代理" /><published>2018-09-19T00:00:00+08:00</published><updated>2018-09-19T00:00:00+08:00</updated><id>https://0qinghao.github.io//proxy-set-in-windows-and-linux</id><content type="html" xml:base="https://0qinghao.github.io//20180919-proxy-set-in-windows-and-linux/">&lt;p&gt;在之前的博文中分享了如何 &lt;a href=&quot;https://0qinghao.github.io/inforest/2018/02/27/google-cloud-engine-ss-server/&quot;&gt;使用 Google 云计算引擎搭建 SS 服务器&lt;/a&gt;，如何 &lt;a href=&quot;https://0qinghao.github.io/inforest/2018/03/06/shadowsocks-clients/&quot;&gt;使用 SS 客户端&lt;/a&gt;，已经满足了科学上网的基本需求。这次将要总结在 Windows 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; 窗口和 Linux 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LX 终端 &lt;/code&gt; 中，让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; 等命令使用代理需要进行的一些配置。&lt;/p&gt;

&lt;h1 id=&quot;windows-命令行代理&quot;&gt;Windows 命令行代理&lt;/h1&gt;

&lt;p&gt;假设你已经使用了 SS 客户端，本地 socks5 代理为 127.0.0.1:1080&lt;/p&gt;

&lt;p&gt;在 CMD 窗口输入如下指令设置代理：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;set http_proxy=socks5://127.0.0.1:1080
set https_proxy=socks5://127.0.0.1:1080
set ftp_proxy=socks5://127.0.0.1:1080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl https://www.facebook.com&lt;/code&gt; 能得到返回结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-22-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;取消代理命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set http_proxy=
set https_proxy=
set ftp_proxy=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;设置代理后只对当前命令行窗口生效，重新打开 CDM 需要再次设置。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;linux-lx-终端代理&quot;&gt;Linux LX 终端代理&lt;/h1&gt;

&lt;p&gt;由于 Linux 下 SS 客户端仅代理 socks5 协议的流量（如果不是这个原因恳请指正）。所以想在 LX 终端使用代理，需要在 SS 的 socks5 流量前再接一个代理，允许 http、https、ftp 协议流量通过。&lt;/p&gt;

&lt;p&gt;我们也假定本地 socks5 代理为 127.0.0.1:1080&lt;/p&gt;

&lt;h2 id=&quot;安装-polipo&quot;&gt;安装 polipo&lt;/h2&gt;

&lt;p&gt;Debian 下直接使用 apt 命令安装：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;polipo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编辑配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;sudo nano /etc/polipo/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置内容如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;# This file only needs to list configuration variables that deviate
# from the default values.  See /usr/share/doc/polipo/examples/config.sample
# and &quot;polipo -v&quot; for variables you can tweak and further information.

logSyslog = true
logFile = /var/log/polipo/polipo.log

proxyAddress = &quot;0.0.0.0&quot;

socksParentProxy = &quot;127.0.0.1:1080&quot;
socksProxyType = socks5

chunkHighMark = 50331648
objectHighMark = 16384

dnsQueryIPv6 = no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按 &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt;，&lt;kbd&gt;Y&lt;/kbd&gt; 保存退出。&lt;/p&gt;

&lt;p&gt;重启 polipo 服务：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service polipo restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;启用代理&quot;&gt;启用代理&lt;/h2&gt;

&lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service polipo status&lt;/code&gt; 命令，我们可以看到新的监听端口为&lt;strong&gt;8123&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-22-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此，LX 终端启用代理的命令为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;export http_proxy=http://127.0.0.1:8123
export https_proxy=http://127.0.0.1:8123
export ftp_proxy=http://127.0.0.1:8123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样，直接输入上述命令设置的代理也是临时的。一个比较实用的方法是在~/.bashrc 文件中设置环境，之后就不需要再手动设置了。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在文件最后插入上述三条指令，保存。&lt;/p&gt;

&lt;p&gt;测试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; 指令：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-22-53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;

&lt;p&gt;我对 CMD/LX 终端设置代理的出发点，是为了使用 Google 的一个 API，设置后确实能够成功使用。另外似乎对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; 等指令也有效果，安装 python 模块时的下载速度有比较明显的提升。不过说到底只是在总结如何使用别人做好的工具，很多原理还是没有明白，如果文中有何纰漏，恳请指正。&lt;/p&gt;

&lt;p&gt;感谢你阅读文章！&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><category term="shadowsocks" /><category term="linux" /><summary type="html">在之前的博文中分享了如何 使用 Google 云计算引擎搭建 SS 服务器，如何 使用 SS 客户端，已经满足了科学上网的基本需求。这次将要总结在 Windows 的 CMD 窗口和 Linux 的 LX 终端 中，让 wget curl 等命令使用代理需要进行的一些配置。</summary></entry><entry><title type="html">译 - 使用 Natural Language API 分析文本的实体与情感</title><link href="https://0qinghao.github.io//20180407-google-natural-language-api/" rel="alternate" type="text/html" title="译 - 使用 Natural Language API 分析文本的实体与情感" /><published>2018-04-07T00:00:00+08:00</published><updated>2018-04-07T00:00:00+08:00</updated><id>https://0qinghao.github.io//google-natural-language-api</id><content type="html" xml:base="https://0qinghao.github.io//20180407-google-natural-language-api/">&lt;blockquote&gt;
  &lt;p&gt;原文：&lt;a href=&quot;https://codelabs.developers.google.com/codelabs/cloud-nl-intro-ja/index.html?index=..%2F..%2Fspringone#0&quot;&gt;Natural Language API でエンティティと感情を分析する&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;概要&quot;&gt;概要&lt;/h1&gt;

&lt;p&gt;使用 Cloud Natural Language API ，可以从文本中提取实体、分析情感、解析文本构成。&lt;/p&gt;

&lt;p&gt;此次向导中，我们将针对 Natural Language API 的 3 个方法： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analyzeEntities&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analyzeSentiment&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;annotateText&lt;/code&gt; 进行学习。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将要学习的东西&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;构造 Natural Language API 请求，并使用 curl 发送请求&lt;/li&gt;
  &lt;li&gt;使用 Natural Language API 提取文本中的实体，并进行情感分析&lt;/li&gt;
  &lt;li&gt;使用 Natural Language API 对文本进行语言分析（语法、词性等）&lt;/li&gt;
  &lt;li&gt;使用不同的语言构造 Natural Language API 请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;必要的准备&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建 Google Cloud Platform 项目&lt;/li&gt;
  &lt;li&gt;浏览器（&lt;a href=&quot;https://www.google.com/chrome/browser/desktop/&quot;&gt;Chrome&lt;/a&gt;、&lt;a href=&quot;https://www.mozilla.org/firefox/&quot;&gt;Firefox&lt;/a&gt; 等）&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;设置和一些说明&quot;&gt;设置和一些说明&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;根据自己的情况进行设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还未拥有 Google 账号（Gmail / Google Apps）的情况下，&lt;a href=&quot;https://accounts.google.com/SignUp&quot;&gt;创建账号&lt;/a&gt; 是必须的。登录 Google Cloud Platform Console（&lt;a href=&quot;http://console.cloud.google.com/&quot;&gt;console.cloud.google.com&lt;/a&gt;），创建一个新项目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-18-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-18-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;请记住项目名称。任意一个 Google Cloud 项目都拥有唯一的名称（上述的名称已经被使用了，所以实际上无法使用）。&lt;/p&gt;

&lt;p&gt;Google Cloud Platform 的新用户将赠与 &lt;a href=&quot;https://console.developers.google.com/billing/freetrial&quot;&gt;相当于 $300 的试用金&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;启用-cloud-natural-language-api&quot;&gt;启用 Cloud Natural Language API&lt;/h1&gt;

&lt;p&gt;点击屏幕左上角的菜单图标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-18-18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下拉菜单中选择 [&lt;strong&gt;API Manager&lt;/strong&gt;]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-18-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 [&lt;strong&gt;启用 API&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-18-31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，在搜索框中输入「Language」。点击 [&lt;strong&gt;Google Cloud Natural Language API&lt;/strong&gt;]。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-19-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 [&lt;strong&gt;启用&lt;/strong&gt;]，启用 Cloud Natural Language API 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-19-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等待数秒，API 成功启用后，将显示如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-20-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;激活-cloud-shell&quot;&gt;激活 Cloud Shell&lt;/h1&gt;

&lt;p&gt;Google Cloud Shell 是在云端运行的命令行环境。这台基于 Debian 的虚拟机能够加载任何您需要的开发工具（gcloud、bq、git 等），并提供永久的 5 GB 主目录。这次教程将使用 Cloud Shell 创建对 Translation API 的请求。&lt;/p&gt;

&lt;p&gt;点击标题栏右侧的 [激活 Google Cloud Shell] 按钮（&lt;strong&gt;&amp;gt;_&lt;/strong&gt;），启动 Cloud Shell。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-20-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloud Shell 将在控制台底部的新窗口中打开，并显示命令行提示符。请等待提示符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user@project:~$&lt;/code&gt; 出现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-20-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;生成-api-key&quot;&gt;生成 API Key&lt;/h1&gt;

&lt;p&gt;你将通过使用 curl 发送一个请求来调用 Natural Language API 。在发送请求时，你需要在 URL 中插入一个生成的 API 密钥。为了创建 API 密钥，让我们点击侧边栏的 [API Manager] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-20-32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，在 [&lt;strong&gt;凭据&lt;/strong&gt;] 选项卡中点击 [&lt;strong&gt;创建凭据&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-20-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下拉菜单中选择  [&lt;strong&gt;API 密钥&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-20-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，复制生成好的密钥。此密钥将在向导的后半部分中用到。&lt;/p&gt;

&lt;p&gt;你已获得 API 密钥，我们将其保存在环境变量中，以便每次调用 API 时不需要重复插入 API 密钥值。你可以将密钥保存在 Cloud Shell 中，下述的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your_api_key&amp;gt;&lt;/code&gt; 请替换成之前复制的内容。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export API_KEY=&amp;lt;YOUR_API_KEY&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;构造分析文本中实体的请求&quot;&gt;构造分析文本中实体的请求&lt;/h1&gt;

&lt;p&gt;第一个介绍的 Natural Language API 方法是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analyzeEntities&lt;/code&gt; 。API 使用此方法从文本中提取出实体（人物、场所、事件等）。为了试用 API 的实体分析功能，我们将引用最近新闻中的以下句子。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LONDON — J. K. Rowling always said that the seventh Harry Potter book, “Harry Potter and the Deathly Hallows, “ would be the last in the series, and so far she has kept to her word.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;对  Natural Language API 发出的请求可以事先保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.json&lt;/code&gt; 文件中。首先，我们在 Cloud Shell 中生成这个文件。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，使用任意一个文本编辑器（ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emacs&lt;/code&gt; ）打开生成的文件。在文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.json&lt;/code&gt; 中添加如下内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;document&quot;:{
    &quot;type&quot;:&quot;PLAIN_TEXT&quot;,
    &quot;content&quot;:&quot;LONDON — J. K. Rowling always said that the seventh Harry Potter book, ‘Harry Potter and the Deathly Hallows,' would be the last in the series, and so far she has kept to her word.&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个请求文件中，保存了即将发送给 Natural Language API 的文本的相关信息。type 属性的值可以是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLAIN_TEXT&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 。content 中存放了将要发送给  Natural Language API 分析的文本。Natural Language API 还支持直接发送存储在 Google Cloud Storage 中的文件。直接从 Google Cloud Storage 发送文件时，请将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt; 替换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcsContentUri&lt;/code&gt; ，并将其值设置为云端文件的 uri 地址。&lt;/p&gt;

&lt;h1 id=&quot;调用-natural-language-api&quot;&gt;调用 Natural Language API&lt;/h1&gt;

&lt;p&gt;现在，我们将使用 curl 命令，把请求文件和之前保存好的 API 密钥环境变量一起，发送给  Natural Language API （全放在一条命令里面）。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://language.googleapis.com/v1/documents:analyzeEntities?key=${API_KEY}&quot; -s -X POST -H &quot;Content-Type: application/json&quot; --data-binary @request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将得到形式如下的响应。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;entities&quot;: [
    {
      &quot;name&quot;: &quot;Harry Potter and the Deathly Hallows&quot;,
      &quot;type&quot;: &quot;WORK_OF_ART&quot;,
      &quot;metadata&quot;: {
        &quot;mid&quot;: &quot;/m/03bkkv&quot;,
        &quot;wikipedia_url&quot;: &quot;https://en.wikipedia.org/wiki/Harry_Potter_and_the_Deathly_Hallows&quot;
      },
      &quot;salience&quot;: 0.30040884,
      &quot;mentions&quot;: [
        {
          &quot;text&quot;: {
            &quot;content&quot;: &quot;book&quot;,
            &quot;beginOffset&quot;: -1
          },
          &quot;type&quot;: &quot;COMMON&quot;
        }
      ]
    }
  ],
  ...
  ...
  &quot;language&quot;: &quot;en&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在响应中，我们可以看到 API 从句子里检测到了 6 个实体（译者：原文是 4 个，但实际运行时得到 6 个，应该是 API 有所改善）。对于每个实体，你将得到实体的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; 、关联的维基百科 URL（如果存在）、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;salience&lt;/code&gt; （显著性）以及实体在文本中出现的位置的索引。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;salience&lt;/code&gt; （显著性）是一个 0~1 的数字，指的是该实体对于整个文本的突出性。对于上述文段，「Harry Potter and the Deathly Hallows」具有最高的显著性（译者：原文是「Rowling」，应该是 API 有所改善），这是因为这部作品是文段所表述内容的主题。Natural Language API 也可以识别用其他方式表述的相同的实体，比如说「Rowling」、「J. K. Rowling」和「Joanne Kathleen Rowling」都指向同一个维基百科页面。&lt;/p&gt;

&lt;h1 id=&quot;使用-natural-language-api-进行情感分析&quot;&gt;使用 Natural Language API 进行情感分析&lt;/h1&gt;

&lt;p&gt;除了提取实体，Natural Language API 还可以分析文本块的情感。JSON 请求文件与之前的那个具有相同的参数，但这次我们更改一下文本，换成一段具有更强烈情感的内容。请修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.json&lt;/code&gt; 为如下内容，或者换成你喜欢的文段。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;document&quot;:{
    &quot;type&quot;:&quot;PLAIN_TEXT&quot;,
    &quot;content&quot;:&quot;I love everything about Harry Potter. It's the greatest book ever written.&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后把请求发送到 API 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analyzeSentiment&lt;/code&gt; 端点。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://language.googleapis.com/v1/documents:analyzeSentiment?key=${API_KEY}&quot; -s -X POST -H &quot;Content-Type: application/json&quot; --data-binary @request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将得到形式如下的响应。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;documentSentiment&quot;: {
    &quot;polarity&quot;: 1,
    &quot;magnitude&quot;: 1.5,
    &quot;score&quot;: 0.7
  },
  &quot;language&quot;: &quot;en&quot;,
  &quot;sentences&quot;: [
    {
      &quot;text&quot;: {
        &quot;content&quot;: &quot;I love everything about Harry Potter.&quot;,
        &quot;beginOffset&quot;: -1
      },
      &quot;sentiment&quot;: {
        &quot;polarity&quot;: 1,
        &quot;magnitude&quot;: 0.6,
        &quot;score&quot;: 0.6
      }
    },
    {
      &quot;text&quot;: {
        &quot;content&quot;: &quot;It's the greatest book ever written.&quot;,
        &quot;beginOffset&quot;: -1
      },
      &quot;sentiment&quot;: {
        &quot;polarity&quot;: 1,
        &quot;magnitude&quot;: 0.8,
        &quot;score&quot;: 0.8
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该方法将返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polarity&lt;/code&gt; （极性）和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magnitude&lt;/code&gt; （强度）两个值（译者：原文是这两个值，但很明显现在还能看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;score&lt;/code&gt; 这个值）。polarity 是介于 - 1.0 ~ 1.0 之间的数值，表示文本消极或积极的程度。magnitude 是介于 0 ~ ∞的数值，与 polarity 没有关系，它表示在文本中表达的感情的权重。权重较大的文本块单是增加长度，其 magnitude 也会变大。上文的 polarity 是 100% 积极。「love」、「greatest」、「ever」这样的单词会影响 magnitude 的值。&lt;/p&gt;

&lt;h1 id=&quot;分析语法与词性&quot;&gt;分析语法与词性&lt;/h1&gt;

&lt;p&gt;让我们看看 Natural Language API 的第三个方法：文本注释。让我们进入文本的语言细节。annotateText 方法提供了关于文本情感元素、语法元素的完整细节。使用该方法，可以知道文本中每个词语的词性（名词、动词、形容词等），以及各个单词如何与句子中的其他单词关联（是动词的原始形式，还是用来修饰语句）。&lt;/p&gt;

&lt;p&gt;让我们通过简单的文段来使用这个方法。JSON 文件与之前的相似，但在这里我们需要添加一项 features 来告诉 API 你想要执行语法注释。请将 request.json 替换为如下内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;document&quot;:{
    &quot;type&quot;:&quot;PLAIN_TEXT&quot;,
    &quot;content&quot;:&quot;Joanne Rowling is a British novelist, screenwriter and film producer.&quot;
  },
  &quot;features&quot;:{
    &quot;extractSyntax&quot;:true
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后把请求发送到 API 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;annotateText&lt;/code&gt; 端点。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://language.googleapis.com/v1/documents:annotateText?key=${API_KEY}&quot; -s -X POST -H &quot;Content-Type: application/json&quot; --data-binary @request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;响应中，对于句子中的每一个标记（token），会返回以下对象。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;text&quot;: {
	&quot;content&quot;: &quot;Joanne&quot;,
	&quot;beginOffset&quot;: -1
  },
  &quot;partOfSpeech&quot;: {
	&quot;tag&quot;: &quot;NOUN&quot;,
	&quot;aspect&quot;: &quot;ASPECT_UNKNOWN&quot;,
	&quot;case&quot;: &quot;CASE_UNKNOWN&quot;,
	&quot;form&quot;: &quot;FORM_UNKNOWN&quot;,
	&quot;gender&quot;: &quot;GENDER_UNKNOWN&quot;,
	&quot;mood&quot;: &quot;MOOD_UNKNOWN&quot;,
	&quot;number&quot;: &quot;SINGULAR&quot;,
	&quot;person&quot;: &quot;PERSON_UNKNOWN&quot;,
	&quot;proper&quot;: &quot;PROPER&quot;,
	&quot;reciprocity&quot;: &quot;RECIPROCITY_UNKNOWN&quot;,
	&quot;tense&quot;: &quot;TENSE_UNKNOWN&quot;,
	&quot;voice&quot;: &quot;VOICE_UNKNOWN&quot;
  },
  &quot;dependencyEdge&quot;: {
	&quot;headTokenIndex&quot;: 1,
	&quot;label&quot;: &quot;NN&quot;
  },
  &quot;lemma&quot;: &quot;Joanne&quot;
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们详细看看返回值。从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partOfSpeech&lt;/code&gt; 可以看到「Joanne」是一个名词。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencyEdge&lt;/code&gt; 包含可用于创建 &lt;a href=&quot;https://en.wikipedia.org/wiki/Parse_tree#Dependency-based_parse_trees&quot;&gt;依存句法分析树&lt;/a&gt;（依存構文木 / Dependency-based parse trees）的数据。这个语法树是一个图表，用来显示句中各单词之间的关系。上述文段的依存句法分析树如下所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-07-06-20-21-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;使用下面的 demo ，你可以在浏览器中创建自己的依存句法分析树。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/natural-language/&quot;&gt;https://cloud.google.com/natural-language/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上述返回值中， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headTokenIndex&lt;/code&gt; 是指具有指向「Joanne」的圆弧的标记（token）的索引。文段中的每一个标记（token）都可以看作是数组中的一个单词，「Joanne」的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headTokenIndex&lt;/code&gt; 值是 1，表示依存句法分析树中连接了「Rowling」这个单词。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NN&lt;/code&gt; （修饰语句 noun compound （名词复合词）的略称）这个标签表示该词在改句子中的作用。「Joanne」是这个句子的主语「Rowling」的修饰词。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lemma&lt;/code&gt; 是这个单词的规范化形式。比如，&lt;em&gt;run&lt;/em&gt;、&lt;em&gt;runs&lt;/em&gt;、&lt;em&gt;ran&lt;/em&gt;、&lt;em&gt;running&lt;/em&gt; 这些单词的 lemma 都是 run 。lemma 有助于你调查大量文本中某一单词的出现频率。&lt;/p&gt;

&lt;h1 id=&quot;其他语言的自然语言处理&quot;&gt;其他语言的自然语言处理&lt;/h1&gt;

&lt;p&gt;Natural Language API 还支持其他很多语言的实体分析和语法注释。现在我们以日语为例，尝试进行日语文段的实体分析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;document&quot;:{
    &quot;type&quot;:&quot;PLAIN_TEXT&quot;,
    &quot;content&quot;:&quot;日本のグーグルのオフィスは、東京の六本木ヒルズにあります&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（译者：句意是 “日本的谷歌办公大楼在东京的六本木新城。”）&lt;/p&gt;

&lt;p&gt;我们不必告诉 API 这个文段是什么语言，API 能够自动检测出来。我们以相同的方式发送 API 请求。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://language.googleapis.com/v1/documents:analyzeEntities?key=${API_KEY}&quot; -s -X POST -H &quot;Content-Type: application/json&quot; --data-binary @request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将得到形式如下的响应。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;entities&quot;: [
    {
      &quot;name&quot;: &quot;日本&quot;,
      &quot;type&quot;: &quot;LOCATION&quot;,
      &quot;metadata&quot;: {
        &quot;wikipedia_url&quot;: &quot;https://en.wikipedia.org/wiki/Japan&quot;,
        &quot;mid&quot;: &quot;/m/03_3d&quot;
      },
      &quot;salience&quot;: 0.23854347,
      &quot;mentions&quot;: [
        {
          &quot;text&quot;: {
            &quot;content&quot;: &quot;日本&quot;,
            &quot;beginOffset&quot;: -1
          },
          &quot;type&quot;: &quot;PROPER&quot;
        }
      ]
    },
    {
      &quot;name&quot;: &quot;グーグル&quot;,
      &quot;type&quot;: &quot;ORGANIZATION&quot;,
      &quot;metadata&quot;: {
        &quot;mid&quot;: &quot;/m/045c7b&quot;,
        &quot;wikipedia_url&quot;: &quot;https://en.wikipedia.org/wiki/Google&quot;
      },
      &quot;salience&quot;: 0.21155767,
      &quot;mentions&quot;: [
        {
          &quot;text&quot;: {
            &quot;content&quot;: &quot;グーグル&quot;,
            &quot;beginOffset&quot;: -1
          },
          &quot;type&quot;: &quot;PROPER&quot;
        }
      ]
    },
    ......
    ......
  ],
  &quot;language&quot;: &quot;ja&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;恭喜&quot;&gt;恭喜！&lt;/h1&gt;

&lt;p&gt;通过此次向导，我们尝试执行了实体提取、情感分析和语法注释，学会了如何使用 Natural Language API 进行文本分析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;学到的东西&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;构造 Natural Language API 请求，并使用 curl 发送请求&lt;/li&gt;
  &lt;li&gt;使用 Natural Language API 提取文本中的实体，并进行情感分析&lt;/li&gt;
  &lt;li&gt;使用 Natural Language API 对文本进行语言分析（语法、词性等）&lt;/li&gt;
  &lt;li&gt;使用不同的语言构造 Natural Language API 请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;下一步&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;浏览 Natural Language API 文档的 &lt;a href=&quot;https://cloud.google.com/natural-language/docs/tutorials&quot;&gt;向导&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;尝试使用 &lt;a href=&quot;https://cloud.google.com/vision/&quot;&gt;Vision API&lt;/a&gt; 、&lt;a href=&quot;https://cloud.google.com/speech/&quot;&gt;Speech API&lt;/a&gt; 。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Qinghao Lin</name></author><category term="google cloud" /><summary type="html">原文：Natural Language API でエンティティと感情を分析する</summary></entry><entry><title type="html">使用 bypy 在命令行上传文件到百度云盘</title><link href="https://0qinghao.github.io//20180406-bypy-baiduyun/" rel="alternate" type="text/html" title="使用 bypy 在命令行上传文件到百度云盘" /><published>2018-04-06T00:00:00+08:00</published><updated>2018-04-06T00:00:00+08:00</updated><id>https://0qinghao.github.io//bypy-baiduyun</id><content type="html" xml:base="https://0qinghao.github.io//20180406-bypy-baiduyun/">&lt;p&gt;repo: &lt;a href=&quot;https://github.com/houtianze/bypy&quot;&gt;https://github.com/houtianze/bypy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install bypy

# 执行任意命令进行授权
bypy info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#上传文件夹内的内容到 app/bypy/
bypy upload 文件夹
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#定时执行上传
sudo nano /etc/crontab

*/1 * * * * Rin bypy upload 文件夹

sudo /etc/init.d/cron restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Qinghao Lin</name></author><category term="linux" /><summary type="html">repo: https://github.com/houtianze/bypy</summary></entry><entry><title type="html">インスタグラム爬图</title><link href="https://0qinghao.github.io//20180406-ins-python-scraper/" rel="alternate" type="text/html" title="インスタグラム爬图" /><published>2018-04-06T00:00:00+08:00</published><updated>2018-04-06T00:00:00+08:00</updated><id>https://0qinghao.github.io//ins-python-scraper</id><content type="html" xml:base="https://0qinghao.github.io//20180406-ins-python-scraper/">&lt;p&gt;repo：&lt;a href=&quot;https://github.com/rarcega/instagram-scraper&quot;&gt;https://github.com/rarcega/instagram-scraper&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# https://github.com/rarcega/instagram-scraper/blob/master/setup.py
sudo python setup.py install

pip install instagram-scraper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;instagram-scraper 用户名 -u 你的用户名 -p 你的密码 -d 存放文件夹
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定时爬取&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/crontab

*/1 * * * * Rin instagram-scraper 用户名 -d 存放文件夹

sudo /etc/init.d/cron restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Qinghao Lin</name></author><category term="python" /><category term="linux" /><summary type="html">repo：https://github.com/rarcega/instagram-scraper</summary></entry></feed>