

[
  
  
    {
      "title"    : "页面没有找到",
      "url"      : "https://inforest.site/404.html"
    } ,
  
  
  
    {
      "title"    : "About",
      "url"      : "https://inforest.site/about/"
    } ,
  
  
  
    {
      "title"    : "归档",
      "url"      : "https://inforest.site/archives/"
    } ,
  
  
  
    {
      "title"    : "Categories",
      "url"      : "https://inforest.site/categories/"
    } ,
  
  
  
  
  
    {
      "title"    : "日语专栏",
      "url"      : "https://inforest.site/ja_page/"
    } ,
  
  
  
    {
      "title"    : "Links",
      "url"      : "https://inforest.site/links/"
    } ,
  
  
  
    {
      "title"    : "Open Source Projects",
      "url"      : "https://inforest.site/open-source/"
    } ,
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
    {
      "title"    : "树莓派学习手记——修改软件源",
      "category" : "raspberrypi",
      "content": "国情，国情 在 Raspbian/Ubuntu 系统上，升级系统或安装软件只需要一条很简单的命令： sudo apt install 软件包名 t t# 安装软件 sudo apt upgrade t t# 更新软件 然而在天朝的网络下，很难顺利地完成下载过程。但好在有许多高校 / 机构提供了及时更新的镜像网站，我们可以通过修改配置文件解决下载难的问题。 很多同学查找解决方法后，或许能解决一部分问题，但仍会遇到连接超时的问题。究其原因，大致有两点：  树莓派的软件源配置有两处，而大部分教程只指出了一处；   没有区分系统版本（Codename），Codename 目前分为 jessie / wheezy / squeeze / stretch，大部分教程仍使用的是 jessie 或 wheezy，而笔者安装的系统却是 stretch。 ​ 配置文件在哪 /etc/apt/sources.list /etc/apt/sources.list.d/raspi.list 很多教程只指出了第一处，如果没有修改第二个配置文件，更新系统时很容易出现连接超时的问题。 在修改配置文件之前，可以选择先备份一下原文件，但这个配置文件也不太重要，不想麻烦也可跳过。 sudo cp /etc/apt/sources.list /etc/apt/sources.bak sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.bak ​ 我的 Codename 是什么 我们来确定自己树莓派安装的系统 Codename 是什么： lsb_release -a 运行这条指令之后，可以很清楚的看到 Codename Codename: stretch ​ 修改配置文件 国内有许多高校提供了树莓派的软件源镜像。可以在这个网页查看所有的镜像网站：http://www.raspbian.org/RaspbianMirrors 笔者选择了中科大提供的镜像，也是大家公认的比较稳定的镜像之一。 sudo nano /etc/apt/sources.list 将该文件的内容替换为： deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free 按 CTRL+X 关闭文件，键入 Y（保存修改）回车。 修改第二个配置文件： sudo nano /etc/apt/sources.list.d/raspi.list 类似地，内容替换为： deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui deb-src http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui 相信细心的同学已经注意到了，修改的文件内容网址后紧接着一项 “stretch”。如果你手中的树莓派安装的系统 Codename 并不是 stretch，还请进行相应修改。 最后，刷新软件列表： sudo apt update 修改完成了！赶紧去体验一下高速更新系统 / 升级软件的快感吧。感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180106-RPi-apt-source/"
    } ,
  
    {
      "title"    : "申请和使用 Google 云计算引擎配置 SS Server",
      "category" : "google cloud",
      "content": "Google Cloud Platform 的新用户可以获得 $300 赠金的一年使用权，使用这笔不菲的赠金，我们可以构建应用程序、搭建网站、存储数据、体验各种强大的 API。这次，我总结了使用 Google 云计算引擎搭建 SS 服务器，实现科学上网的过程，也算作为墙内使用谷歌云平台的第一步。 科学上网的基本原理 我们只需要一个能够访问墙外目标地址的代理服务器。本地设备向服务器发送访问目标地址的请求，服务器收到请求后访问目标并将结果回传给本地设备。 我们是使用 Shadowsocks（简称 SS，中文名影梭）来配置服务器的，所以一般把这个服务器称为 SS 服务器。谷歌云平台提供的位于国外的云计算引擎可以用来搭建 SS 服务器。 申请试用谷歌云平台 *重要：你需要一张外币信用卡（VISA/MasterCard/JCB） 首先，翻墙。突然有种鸡生蛋，蛋生鸡的矛盾，不过我相信你能找到一个免费试用的 VPN。 登录 谷歌云平台，点击右上角的申请试用后进入申请界面。地区可以选择中国，不影响后续的申请。 账号类型选择 “个人”，填写名称地址电话。 付款方式填写你的外币信用卡（单币银联卡无效）。提交后信用卡会扣除 1 美金进行验证，验证完成即退回。 创建计算引擎 进入控制台，首先要求创建一个项目，尽量使用简单易记的项目名。 项目创建完成后，点击控制台左上角的 ☰ 打开导航栏，找到 Compute Engine → VM 实例 ，点击 创建 开始创建一个计算引擎。 区域 有 3 个比较好的选择： asia-east1：位于台湾 asia-southeast1：位于新加坡 asia-northeast1：位于东京 从国内 ping 延迟都在 100ms 左右，它们的流量费用和硬件费用有细微的差别，在意的朋友可以在 这里 查询。 机器类型 可以选择最小的微型（1 个共享 vCPU，0.6GB 内存）以节省硬件费用，单作为 SS 服务器该配置已经足够。 其他设置可以保持默认。点击 创建 。 配置 SS 服务器 创建完成后可以看到分配给实例的 外部 IP ，请牢记。 点击云引擎后面的 SSH ，远程连接该主机，进行配置。 这里使用 秋水逸冰 大大的 SS 服务器配置脚本。 依次输入下面三条指令： wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/wjk199511140034/ss-onekeyinstall/master/shadowsocks.sh sudo chmod +x shadowsocks.sh sudo ./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 第三条指令运行后即进入配置过程，需要根据提示输入几项信息。 Please input password for shadowsocks-libev：输入 密码 ，请牢记 Please enter a port for shadowsocks-libev：输入 SS 服务器端口号 ，请牢记 Which cipher you’d select：选择一种 加密方式 ，请牢记 按任意键开始执行脚本，等待脚本运行完毕。 创建防火墙规则 点击控制台左上角的 ☰ 打开导航栏，找到 VPC 网络 → 防火墙规则 ，点击 创建防火墙规则 创建如下 2 个规则。  入站规则 流量方向 ：入站 目标 ：网络中的所有实例 来源 IP 地址范围 ：0.0.0.0/0 协议和端口 ：全部允许 其他部分可以保持默认，这条规则表示允许所有 ip / 端口的所有协议入站。  出站规则 流量方向 ：出站 目标 ：网络中的所有实例 来源 IP 地址范围 ：0.0.0.0/0 协议和端口 ：全部允许 其他部分可以保持默认，这条规则表示允许所有协议出站到所有 ip / 端口。 至此，SS 服务器部署完毕。你可以关闭你不稳定的试用版 VPN，准备开始正确地科学上网了。 使用 SS 客户端 这里仅以 Windows 客户端为例，Android 端很相似。Debian 平台使用 SS 客户端则需要进行一些配置，将另外做一次总结。 可以在 GitHub 下载到 Windows 平台的 SS 客户端。 如果你无法打开 GitHub，可以点击 这里，前往微云下载，但不保证是最新版本。 请将可执行程序放置在合适的文件夹内，运行后会在程序同一目录下产生配置文件，如果随便放置容易显得杂乱。 第一次打开 SS 客户端会主动要求编辑服务器。填入你的 外部 IP 密码 服务器端口号 加密方式 ，其他设置可以保持默认。 最后，右击任务栏的小图标，勾选 启用系统代理 。系统代理模式选择 PAC 模式 ，这样 SS 会自动使用代理访问墙外站点，不需要另外安装浏览器的代理插件。 参考资料 Debian 下 shadowsocks-libev 一键安装脚本 Shadowsocks Troubleshooting Shadowsocks 原理和搭建 Google Cloud 服务免费申请试用以及使用教程 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180227-google-cloud-engine-ss-server/"
    } ,
  
    {
      "title"    : "SS Debian 服务器端配置指令",
      "category" : "shadowsocks",
      "content": "笔记 wget --no-check-certificate -O shadowsocks-libev-debian.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh sudo chmod +x shadowsocks-libev-debian.sh sudo ./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.log ",
      "url"      : "https://inforest.site/20180228-debian-ss-server-config-command/"
    } ,
  
    {
      "title"    : "Shadowsocks 客户端在不同系统下的使用方法",
      "category" : "shadowsocks",
      "content": "当我们配置好 Shadowsocks 服务器端，或是购买了 SS 账号后，就可以使用客户端开始科学上网了。下面分别介绍在 Windows、安卓、Linux(Debian) 系统下 SS 客户端的使用方法。 Windows 系统下 SS 客户端的使用方法 Windows 系统下的 SS 客户端使用起来最为方便。客户端自带了系统全局代理的功能，甚至可以省去配置浏览器插件的操作。 下载客户端  点击这里，跳转到 GitHub 下载 如果你无法打开 GitHub，可以点击这里，前往微云下载，但不保证是最新版本 将压缩包内的可执行程序解压，放置在合适的文件夹内，运行后会在程序同一目录下产生配置文件，如果随便放置容易显得杂乱。 配置客户端 第一次打开 SS 客户端会主动要求编辑服务器。填入你的 服务器地址 密码 服务器端口号 加密方式 ，其他设置可以保持默认。 最后，右击任务栏的小图标，勾选 启用系统代理 。系统代理模式选择 PAC 模式 ，这样 SS 会自动使用代理访问墙外站点，不需要另外安装浏览器的代理插件。 安卓系统下 SS 客户端的使用方法 安卓系统下的 SS 客户端也很完善，配置方便，甚至还可以指定仅部分 APP 使用代理。 下载客户端  如果你能使用 Google Play 商店，直接搜索安装 Shadowsocks 你也可以点击这里，前往微云下载，但不保证是最新版本 配置客户端 点击右上角的 + 选择 ` 手动设置 ` ，填入你的 服务器地址 密码 服务器端口号 加密方式 ，其他设置可以保持默认。 还可以在配置中开启 ` 分应用 VPN 功能，来指定仅部分 APP 的流量进行代理；或者再打开 绕行模式 ` 来指定部分 APP 的流量绕过代理。 Debian 下 SS 客户端的使用方法 Linux 下使用 SS 客户端要麻烦一些，一方面 Linux 下 SS 不带全局代理，需要搭配浏览器插件使用；另一方面笔者在使用中有遇到 bug，不知在你阅读这篇文章时是否已经修复，总之还是会记录在下文中以供参考。 另外，这部分介绍的是配合 Chrome 插件实现浏览器翻墙的方法。关于如何在 LX 终端让 wget curl 等命令使用代理，将在另一篇文章中再做总结。 安装客户端 sudo apt update sudo apt install shadowsocks 运行 sslocal 不带任何参数运行 sslocal 可以查看帮助。 运行 SS 客户端一般有两种方法。你可以参考帮助，将必要的参数填入，用一条较长的指令来运行： sudo sslocal -s 服务器地址 -p 服务器端口 -k 密码 -m 加密方式 -d start 显然上面这种方式效率太低。另一种方式就是将各项参数保存为 json 文件，运行时指定配置文件即可。 假设我们的配置文件是 /etc/ss.json ，其内容为： { server:服务器地址, server_port: 服务器端口, local_address:127.0.0.1, local_port:1080, password:密码, timeout:600, method:加密方式, fast_open:false } 将你的 服务器地址 密码 服务器端口号 加密方式 替换到上述文件。（有双引号的请保留双引号，不要删除） 接下来，每次需要运行 SS 客户端时，我们只需要输入一条简短的指令： sudo sslocal -c /etc/ss.json -d start * 运行 sslocal 时遇到的 bug  解决方案来自 Kali2.0 update 到最新版本后安装 shadowsocks 服务报错问题 笔者在运行 sslocal 命令时遇到了形如 INFO loading libcrypto from libcrypto.so.1.1 的报错。后在上述文章中找到解决方案。 打开文件 openssl.py，请参照错误提示确定是否与下述文件路径相同： sudo nano /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py 使用快捷键 CTRL+_ 选择跳转到第 52 行 将 libcrypto. EVP_CIPHER_CTX_ cleanup .argtypes = (c_void_p, ) 修改为 libcrypto. EVP_CIPHER_CTX_ reset .argtypes = (c_void_p, ) 同样地，跳转到第 111 行 将 libcrypto. EVP_CIPHER_CTX_ cleanup (self.ctx) 修改为 libcrypto. EVP_CIPHER_CTX_ reset (self._ctx) 按 CTRL+X，Y 保存退出。重新执行 sslocal 指令运行正常。 安装 Chrome 插件 由于 Linux 下的 SS 客户端不带全局代理功能，需要配合浏览器插件使用。这里只介绍 Chrome 插件的安装方法，火狐大体上类似。 如果你能够使用 Chrome 应用商店，搜索 SwitchyOmega 安装即可。你也可以点击 这里 通过微云下载 crx 文件，将其拖动到 Chrome 扩展程序页面 完成安装。 点击选项，如下图配置 SwitchyOmega。 ` 代理协议 ` 选择 SOCKS5 ；如果你在 ss.json 配置文件中修改过 local_port 参数，则这里 ` 代理端口 ` 必须与其一致，否则保持默认值 1080 即可。 最后，保存配置，点击 SwitchyOmega 图标切换到刚才配置好的情景模式。 结语 由于手上设备有限，没办法总结所有系统下的 SS 客户端使用方法。例如 iOS 系统下似乎是使用 Big Boss 源 搜索 ShadowSocks 应用，但没法亲自尝试。有兴趣的朋友建议前往官网 https://shadowsocks.org/（.com 那个是出售 SS 服务的）进一步了解。 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180306-shadowsocks-clients/"
    } ,
  
    {
      "title"    : "在 Python 中使用谷歌 Cloud Speech API 将语音转换为文字（另一种方案）",
      "category" : "google cloud",
      "content": "在之前发布的 使用谷歌 Cloud Speech API 将语音转换为文字 一文中，我们实现了在控制台使用 curl 发送 post 请求，得到语音转文字的结果；而 在 Python 中使用谷歌 Cloud Speech API 将语音转换为文字 一文中，我们实现了安装 Cloud Speech API 客户端库，通过调用库函数得到语音转文字的结果。 如果你尝试过这两种方法，就会发现其实后者得到结果需要的时间要长一些（笔者使用这两种方法得到结果的耗时分别大约是 5 秒、7 秒）。那么，有没有办法在 python 中像第一种方法那样，使用 curl 命令发送 post 请求呢。当然是可行的，所以今天我们将介绍在 Python 中使用 Cloud Speech API 将语音转换为文字的另一种方案，另外这次我们将把音频文件编码为 base64 嵌入到 json 请求文件中，省去了上传声音文件到 Cloud Storage 的步骤。 相关说明之类的在上面两篇文章里已经写了很多，这边就直接贴代码。  使用 python3 import json import urllib.request import base64 # ① api_url = https://speech.googleapis.com/v1beta1/speech:syncrecognize?key = 你的 API 密钥 audio_file = open('/home/pi/chat/test-speech/output.wav', 'rb') audio_b64 = base64.b64encode(audio_file.read()) audio_b64str = audio_b64.decode() t# ② # print(type(audio_b64)) # print(type(audio_b64str)) audio_file.close() # ③ voice = { config: {  #encoding: WAV,  languageCode: cmn-Hans-CN }, audio: {  content: audio_b64str } } # 将字典格式的 voice 编码为 utf8 voice = json.dumps(voice).encode('utf8') req = urllib.request.Request(api_url, data=voice, headers={'content-type': 'application/json'}) response = urllib.request.urlopen(req) response_str = response.read().decode('utf8') # ④ # print(response_str) response_dic = json.loads(response_str) transcript = response_dic['results'][0]['alternatives'][0]['transcript'] confidence = response_dic['results'][0]['alternatives'][0]['confidence'] print(transcript) print(confidence) 几点说明： 注释 ① ：请求 API 的链接，请替换 ` 你的 API 密钥 ` 。如果你有疑问，或许可以参考 创建 API 密钥 - 使用谷歌 Cloud Speech API 将语音转换为文字 。 audio_file 路径替换为你的本地声音文件路径。 注释 ② ：这次上传音频的方式是，将声音文件编码为 base64，把对应的整个字符串放进 json 请求中。如果你执行 print(type(audio_b64)) 就会发现编码后的 audio_b64 是 bytes 类型，所以还需要做一次 decode()，转成字符串。 注释 ③ ：先以字典格式保存 json 请求内容，代表声音文件的字符串就在这里放入。 注释 ④ ：API 返回的结果保存在 response_str ，如果你直接运行 print(response_str) 就会发现这个字符串可以看做一个有很多 “层” 的字典，要提取出识别结果，需要搞清楚这个字典到底是怎么组成的： 第 1 层：花括号 {} 说明字符串 response_str 在执行 json.loads 后变成一个 “字典”。得到 “字典” response_dic 。 第 2 层：字典中只有一组键 - 值， response_dic['results'] 取出唯一的键 “results” 对应的值。观察这个值，发现中括号 []，说明这个值的类型是” 列表“。 第 3 层：观察列表 response_dic['results'] ，发现列表中只有一项数据，但这项数据又是 “字典” 类型。将其取出，得到 “字典” response_dic['results'][0] 。 第 4 层：字典中又是只有一组键 - 值， response_dic['results'][0]['alternatives'] 取出唯一的键 “alternatives” 对应的值。观察这个值，[] 说明我们得到的结果又是一个 “列表”。 第 5 层：观察列表 response_dic['results'][0]['alternatives'] ，列表中只有一项数据， response_dic['results'][0]['alternatives'][0] 再将这唯一一项数据取出，发现得到的是一个 “字典”，而这次得到的字典中有两组键 - 值，分别取出就是我们要的结果和置信度了。 transcript = response_dic['results'][0]['alternatives'][0]['transcript'] confidence = response_dic['results'][0]['alternatives'][0]['confidence']  小结： 今天介绍的这种方案，获取结果需要的时间比用 API 客户端库要快一些，另外应用了把本地语音编码后放入 json 请求的方式，也能方便后期和录音程序结合在一起使用。但稍有一点缺点是 API 密钥直接暴露在代码中，对实际应用可能会有一些影响。 下一步的目标是和录音功能结合起来，实现自动识别当前录制的语音。 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180308-google-cloud-speech-api-voice2text-python-another-way/"
    } ,
  
    {
      "title"    : "在 Python 中使用谷歌 Cloud Speech API 将语音转换为文字",
      "category" : "google cloud",
      "content": "之前我们总结了 使用谷歌 Cloud Speech API 将语音转换为文字 的基本流程，然而那只是在命令行中使用 curl 实现的。这次我们将总结在 Python 中使用 Cloud Speech API 的方法。 配置 Python 开发环境 笔者使用的是树莓派（Debian）进行试验的，其他平台的配置方法可以在 这里 查找。 安装 Python 大多数 Linux 发行版都包含 Python。对于 Debian 和 Ubuntu，运行以下指令确保 Python 版本是最新的： sudo apt update sudo apt install python python-dev python3 python3-dev python-pip python3-pip 安装和使用 virtualenv 尽管这一步不是必须的，但强烈建议你使用 virtualenv。virtualenv 是一种创建独立 Python 环境的工具，可以将每个项目的依赖关系隔离开来。在虚拟环境下，你可以不必顾虑 python2 和 python3 的冲突；另外一个优势是可以直接将你的项目文件夹复制到其他机器上，文件夹内就包含了项目所依赖的软件包。 sudo apt install python-virtualenv 安装完成后，就可以在你的项目文件夹中创建一个虚拟环境。 cd 项目文件夹 virtualenv --python python3 env 使用 --python 标志来告诉 virtualenv 要使用哪个 Python 版本，这次试验将全程以 python3 环境进行。执行后会在 ` 项目文件夹 ` 内创建一个 env 文件夹。 创建完成后，你需要 “激活”virtualenv。激活 virtualenv 会告诉你的 shell 为 Python 使用 virtualenv 的路径。 source env/bin/activate 看到激活虚拟环境后，你就可以放心地安装软件包，并确信它们不会影响其他项目。 如果你想停止使用 virtualenv 并返回到全局 Python 环境，你可以关闭它： deactivate 配置 Cloud Speech API 客户端库 我们假定你已经有合适的代理，能够使用谷歌服务，并且已经开始使用 Google 云平台。如果你有疑问，或许可以参考 这篇文章。 安装客户端库 如果你安装了 virtualenv，请确保激活了虚拟环境。 pip install --upgrade google-cloud-speech 值得一提的是，笔者使用的树莓派在安装进行到 Running setup.py bdist_wheel for grpcio ... 时停留了非常久（10 分钟以上），这属于正常现象，树莓派编译进行得很慢，需要耐心等待。 设置验证 登录谷歌云平台 控制台，前往创建服务账号密钥 界面。 从 ` 服务帐户 ` 下拉列表中选择 ` 新建服务帐户 ` 。输入合适的 ` 服务帐号名称 ` ， ` 角色 ` 选择 Project → ` 所有者 ` 。 ` 密钥类型 ` 选择 JSON 。 点击 ` 创建 ` 后，会开始下载包含密钥的 JSON 文件，请妥善保存。 最后，将环境变量 GOOGLE_APPLICATION_CREDENTIALS 设置为含密钥的 JSON 文件的文件路径，例如： export GOOGLE_APPLICATION_CREDENTIALS=/home/pi/speech/speech-account.json 请将 /home/pi/speech/speech-account.json 替换为你的 json 文件路径。 当然，直接输入上述命令设置的环境变量是临时的。一个比较实用的方法是在 ~/.bashrc 文件中设置环境，之后就不需要再手动设置了。 sudo nano ~/.bashrc 在文件末尾插入上述 export 命令，保存。 使用客户端库 下例给出了使用客户端库的方法。 import io import os # Imports the Google Cloud client library from google.cloud import speech from google.cloud.speech import enums from google.cloud.speech import types # Instantiates a client client = speech.SpeechClient() # The name of the audio file to transcribe file_name = os.path.join(  os.path.dirname(__file__),  'voice.wav') # Loads the audio into memory with io.open(file_name, 'rb') as audio_file:  content = audio_file.read()  audio = types.RecognitionAudio(content=content) config = types.RecognitionConfig(  encoding=enums.RecognitionConfig.AudioEncoding.LINEAR16,  sample_rate_hertz=16000,  language_code='cmn-Hans-CN') # Detects speech in the audio file response = client.recognize(config, audio) for result in response.results:  print('Transcript: {}'.format(result.alternatives[0].transcript))  print('Confidence: {}'.format(result.alternatives[0].confidence)) 几点说明： file_name 给出了声音文件的路径。其中 os.path.dirname(__file__) 表示 py 代码所在文件夹的路径。故上例中声音文件是 py 代码相同目录下的 voice.wav 。 config 给出了声音文件的编码信息，Cloud Speech API 并不支持任意格式的声音文件，详细要求参见：AudioEncoding - Google Cloud Speech API 。 language_code='cmn-Hans-CN' 表示识别语言为中文普通话。常用的还有 American English ( en-US )、British English ( en-GB )、日本語 ( ja-JP )、廣東話( yue-Hant-HK )。更多语言支持可以在Language Support - Google Cloud Speech API 查询。 运行结果： “Confidence” 是置信度，越接近 1 准确性越高。 小结 至此，Cloud Speech API 的使用总结就告一段落了，希望能对你有所帮助。这篇总结是参照着 Google Cloud Speech API 文档 写下的，如果有何纰漏恳请指出。 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180308-google-cloud-speech-api-voice2text-python/"
    } ,
  
    {
      "title"    : "使用谷歌 Cloud Speech API 将语音转换为文字",
      "category" : "google cloud",
      "content": "Google Cloud Speech API 是由谷歌云平台提供的，利用机器学习技术将语音转换为文字的服务。这个 API 能识别超过 80 种语言和语言变体，包括中文、日语、英语甚至广东话。这次，我总结了使用 Google Cloud Speech API 的基本流程。 花 5 秒钟试用 Cloud Speech API 吧 在 Cloud Speech API 概览页，我们可以体验将语音转换为文字的效果。只需要选择一种语言即可开始使用，甚至不需要登录谷歌账号。（加载出来需要一些时间） 在项目中添加 API 使用 Cloud Speech API 需要登录谷歌云平台并申请免费试用，申请试用谷歌云平台的流程可以参考 这篇文章 。 我们假定你能够使用谷歌云平台，并且已经创建了一个项目，下面介绍如何把 Cloud Speech API 添加到项目中。 点击 控制台 左上角的 ☰ 打开导航栏，找到 API 和服务 → ` 库 ` 。 在搜索框中键入 Speech 即可找到 Cloud Speech API 。 打开 API 页面，点击 ` 启用 ` 。 创建 API 密钥 回到之前的页面，选择 ` 凭据 ` → ` 创建凭据 ` → API 密钥 。 马上 API 密钥 就创建好了，虽然随时都能在这个页面查询，但为了方便起见，将其记录下来备用吧，很快就要用到它。 限制密钥 选项默认情况下应该是 “无”，这次只是试着使用 API，保持默认“无” 即可。 准备声音文件 虽然有些麻烦，但是接下来我们要准备声音文件。Cloud Speech API 没办法直接识别 mp3、mp4 中的声音，我们需要准备 FLAC、WAV 格式的音频。而且仅支持单声道音频，所以一般都需要转码之类的工作。 详细的声音文件要求参见：AudioEncoding - Google Cloud Speech API 基于上述情况，我读了下面这段文稿，并制成了 FLAC 格式（单声道）的声音文件。是用手机麦克风进行录音的，质量一般 (´ ・ω・｀) 是否可以正确识别呢？ voice.flac  寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。挟飞仙以遨游，抱明月而长终。 《赤壁赋》 将声音文件上传到 Cloud Storage 如果要使用 Cloud Speech API 识别本地声音文件，必须将音频文件编码为 base64，然后嵌入到稍后将创建的 json 请求文件中，这虽然可行但并不方便。如果你想使用这种方法，请参考：Embedding Base64 encoded audio - Google Cloud Speech API 我们将使用另一种方案，将声音文件上传到 Google Cloud Storage。 点击控制台左上角的 ☰ 打开导航栏，找到 ` 存储 ` → ` 浏览器 ` 。 点击 ` 创建存储分区 ` 。 输入合适的 存储分区名称 ，后文将要用到。默认存储类别选择 “Multi-Regional”，Multi-Regional 位置选择 “亚洲”。点击 ` 创建 ` 。 点击 ` 上传文件 ` ，上传声音文件，勾选 ` 公开链接 ` 。（该音频将能被任何人访问，请注意）  2018 年 10 月 18 日更新： 刚看了一下，页面有所改变，暂时没找到公开单个音频文件的方法。 你可以这样做，把整个存储分区公开： 导航栏→存储→浏览器→存储分区最后有个选项，点开来→修改存储分区权限→“添加成员”填 “allUsers”，“角色” 选“存储对象查看者”→添加 注意：这样该分区内所有内容都可能被任何人访问到 另外，请记住上传文件的 文件名 ，后文将用到。 将语音转换为文字 终于，可以使用 Cloud Speech API 将语音转换为文字了。 首先，我们新建一个 json 格式的请求文件（request.json）。文件名无特殊要求。 { config: {  encoding:FLAC,  languageCode:cmn-Hans-CN }, audio: {  uri:gs:// 存储分区名称 / 文件名 } } 注意 3 个地方： cmn-Hans-CN：表示识别语言为中文普通话。常用的还有 American English ( en-US )、British English ( en-GB )、日本語 ( ja-JP )、廣東話( yue-Hant-HK )。更多语言支持可以在Language Support - Google Cloud Speech API 查询。 存储分区名称 ：刚才是否有记录下来呢？如果没有记住可以点击控制台左上角的 ☰ 打开导航栏，找到 ` 存储 ` → ` 浏览器 ` 查看。 文件名 ：存储在 Cloud Storage 中的音频文件名，可以在存储分区中查看。 最后，我们使用 curl 命令（Windows 平台需另外 安装）向 Cloud Speech API 发出请求。 cd 到 json 请求文件所在目录。  curl -H “Content-Type: application/json” -d @request.json“https://speech.googleapis.com/v1/speech:recognize?key=API 密钥 ” 注意 2 个加粗处： request.json：json 请求文件的文件名。 API 密钥 ：替换为你记录下来的 API 密钥。如果没有记下来，可以点击控制台左上角的 ☰ 打开导航栏，找到 API 和服务 → ` 凭据 ` 查看。 得到结果： 可以看到返回结果也是 json 格式的数据。”confidence” 是置信度，越接近 1 准确性越高。 小结 第一次尝试语音识别服务，得到结果的时候很开心。或许有人会惊讶上例语音识别的准确性，但正如文章开头所说 “Cloud Speech API 是利用机器学习技术将语音转换为文字的服务”，像上例中这样的俗语、名著甚至是歌词，准确率都出奇地高。如果你录制一段日常语音交给 Cloud Speech API 识别，结果就不那么满意了。 最后，这次只是使用 curl 命令在 LX 终端获得了识别结果，下次将会总结如何在编程语言中使用 Cloud Speech API。 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180308-google-cloud-speech-api-voice2text/"
    } ,
  
    {
      "title"    : "修改 pip 源",
      "category" : "python",
      "content": "linux 下，修改 ~/.pip/pip.conf (没有就创建一个)，内容如下： [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple windows 下，直接在 user 目录中创建一个 pip 目录，其中新建文件 pip.ini，如：C:/Users/xx/pip/pip.ini，内容如下 [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple ",
      "url"      : "https://inforest.site/20180316-config-pip-source/"
    } ,
  
    {
      "title"    : "在 virtualenv 中安装 PyAudio",
      "category" : "python",
      "content": "如果你想在一个 virtualenv 中安装 PyAudio，请安装 APT 中的 PortAudio 开发头文件，然后安装 PyAudio： sudo apt-get install portaudio19-dev pip install --allow-unverified=pyaudio pyaudio ",
      "url"      : "https://inforest.site/20180316-python-virtualenv-pyaudio/"
    } ,
  
    {
      "title"    : "SSH 密钥登录配置流程",
      "category" : "linux",
      "content": "笔记 ssh-keygen cd .ssh cat id_rsa.pub &gt;&gt; authorized_keys chmod 600 authorized_keys chmod 700 ~/.ssh # sudo systemctl enable ssh sudo systemctl start ssh # 有问题检查配置文件 sudo vim /etc/ssh/sshd_config 将私钥文件 id_rsa 下载到客户端机器上。 如果使用 putty 的话，打开 PuTTYGen，Import 私钥文件。 载入成功后，PuTTYGen 会显示密钥相关的信息。在 Key comment 中键入对密钥的说明信息，然后单击 Save private key 按钮即可将私钥文件存放为 PuTTY 能使用的格式。 今后，使用 PuTTY 登录时，可以在左侧的 Connection -&gt; SSH -&gt; Auth 中的 Private key file for authentication: 处选择私钥文件，即可登录了。 ",
      "url"      : "https://inforest.site/20180317-linux-ssh-key-config/"
    } ,
  
    {
      "title"    : "树莓派学习手记——使用 Python 录音",
      "category" : "raspberrypi",
      "content": "有的时候我们想让树莓派能够录音，以实现语音控制等功能。所以今天我们总结一下用在树莓派上使用 Python 录音的过程。 准备硬件 树莓派上自带的 3.5mm 接口只能作为语音输出口，不能接麦克风。所以我们需要另外购买 USB 声卡，某宝上 5 元左右就能买到，当然你还需要一个麦克风。总费用应该在 20 元以内。 检查硬件是否正常 使用 arecord -l 可以列出所有录音设备，一般输出如下： arecord -l List of CAPTURE Hardware Devices card 1: Device [USB Audio Device], device 0: USB Audio [USB Audio] Subdevices: 1/1 Subdevice #0: subdevice #0 同样地，aplay -l 可以列出所有播放设备，输出中也能找到形如 Device [USB Audio Device] 的设备。 我们可以直接在命令行执行 Linux 自带的录音 / 播放命令，测试硬件是否正常： arecord -D hw:1,0 -t wav -c 1 -r 44100 -f S16_LE test.wav aplay -D hw:0,0 test.wav arecord 是录音命令，其中 hw:1,0 表示 card 1: Device [USB Audio Device], device 0: USB Audio [USB Audio] 的 card 1 , device 0 ，如果你的 USB 声卡录音设备不是 card 1 , device 0 ，还请进行相应修改。另外，录音过程需要手动按 CTRL + C 结束。 aplay 是播放命令，其中 hw:0,0 表示树莓派板载音频接口，如果你把耳机插在 USB 声卡接口，还请进行相应修改，如改成 hw:1,0 。 如果你发现录制的音频内没有声音，只有细微的杂音，但 arecord -l 和 aplay -l 列出的设备中确实有 USB 声卡。那么你可以尝试着把麦克风接口拔出来一些，只插进去 2/3，或许能够解决你的问题。笔者不是很明白其中的缘由，如果你有什么想法恳请留言告知。 安装 pyaudio 在 Python 中执行录音命令需要 pyaudio 模块，直接用 pip 命令安装： pip install pyaudio 如果你使用 pip 命令下载速度很慢，或许 修改 pip 源 可以帮到你。 如果你使用了 virtualenv，一般会发现 pyaudio 安装失败。这种情况下你需要安装 APT 中的 PortAudio 开发头文件，然后安装 PyAudio： sudo apt-get install portaudio19-dev pip install pyaudio 使用 Python 录音 该例程修改自官方主页例程 PyAudio。 import pyaudio import wave import os import sys CHUNK = 512 FORMAT = pyaudio.paInt16 CHANNELS = 1 RATE = 44100 RECORD_SECONDS = 5 WAVE_OUTPUT_FILENAME = output.wav p = pyaudio.PyAudio() stream = p.open(format=FORMAT,    channels=CHANNELS,    rate=RATE,    input=True,    frames_per_buffer=CHUNK) print(recording...) frames = [] for i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):  data = stream.read(CHUNK)  frames.append(data) print(done) stream.stop_stream() stream.close() p.terminate() wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb') wf.setnchannels(CHANNELS) wf.setsampwidth(p.get_sample_size(FORMAT)) wf.setframerate(RATE) wf.writeframes(b''.join(frames)) wf.close() 执行后会录制一段 5 秒的音频，输出为同目录下的 output.wav 文件。 python3 rec.py * 隐藏错误消息 一般情况下，在树莓派上执行上述 Python 代码后，你会看到非常多的 ALSA 报错和 JACK 报错：  ALSA lib confmisc.c:1281:(snd_func_refer) Unable to find definition ‘cards.bcm2835.pcm.front.0: CARD=0’ …… …… connect(2) call to /tmp/jack-1000/default/jack_0 failed (err=No such file or directory) attempt to connect to server failed 但你会发现其实能够正常地录音。如果你不想看到这些错误消息，可以在代码中加入下述命令隐藏错误： os.close(sys.stderr.fileno()) 小结 使用 Python 录音很简单，你还可以在 GPIO 口上接入一个按钮，修改例程，实现按下按钮自动开始录音的功能。下一步的目标是把 Python 录音和 Cloud Speech API 语音识别 结合起来。 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180320-RPi-recorder-python/"
    } ,
  
    {
      "title"    : "python json.dumps 中的 ensure_ascii 参数引起的中文编码问题",
      "category" : "python",
      "content": "json.dumps 序列化时对中文默认使用的 ascii 编码，想输出真正的中文需要指定 ensure_ascii=False。 result_str = json.dumps(result, ensure_ascii = False) ",
      "url"      : "https://inforest.site/20180322-python-json-dumps-ensure-ascii-chinese-character-code/"
    } ,
  
    {
      "title"    : "使用 Python 与图灵机器人聊天",
      "category" : "python",
      "content": "图灵机器人对中文的识别准确率高达 90%，是目前中文语境下智能度最高的机器人。有很多在 Python 中使用图灵机器人 API 的博客，但都是 1.0 版本。所以今天简单地总结一下在 Python 中使用图灵机器人 API v2.0 的方法。 获取 API KEY 首先，前往图灵机器人官方网站 http://www.tuling123.com/ 注册账号。 登录后点击 ` 创建机器人 ` ，填写一些简单的基本信息之后即可创建。 在机器人设置界面找到你的 API KEY ，记录下来。 在 Python 中使用图灵机器人 API v2.0 基本原理就是使用 urllib.request 模块，向接口地址发送 HTTP POST 请求，请求中加入了聊天内容。 *使用 python3 执行 import json import urllib.request api_url = http://openapi.tuling123.com/openapi/api/v2 text_input = input('我：') req = {  tperception:  t{  t tinputText:  t t{  t t ttext: text_input  t t},  t tselfInfo:  t t{  t t tlocation:  t t t{  t t t tcity: 上海,  t t t tprovince: 上海,  t t t tstreet: 文汇路  t t t}  t t}  t},  tuserInfo:  t{  t tapiKey: 请替换为你的 API KEY,  t tuserId: OnlyUseAlphabet  t} } # print(req) # 将字典格式的 req 编码为 utf8 req = json.dumps(req).encode('utf8') # print(req) http_post = urllib.request.Request(api_url, data=req, headers={'content-type': 'application/json'}) response = urllib.request.urlopen(http_post) response_str = response.read().decode('utf8') # print(response_str) response_dic = json.loads(response_str) # print(response_dic) intent_code = response_dic['intent']['code'] results_text = response_dic['results'][0]['values']['text'] print('Turing 的回答：') print('code：' + str(intent_code)) print('text：' + results_text)  几点说明： 1、字典 req 包含了向图灵机器人发出请求所需的各项信息。其中 req['perception']['selfInfo']['location'] 包含了地理位置信息，向图灵机器人发送与位置有关的请求时，如果没有另外指定位置，则会默认使用这个位置。例如询问 “明天会下雨吗”，图灵机器人会回答我 “上海” 明天是否下雨。 2、 req['userInfo'] 包含了 API KEY，请替换成你的 API KEY（双引号不要删除）。另外 userId 是用户参数，暂时不明白用途，如果你有什么想法恳请留言。 3、图灵机器人的回答可以转换为 python 的字典格式。其中有一项 response_dic['intent']['code'] 官方称为 “输出功能 code”，表示这个回答是什么 “类型” 的。例如 10004 代表普通的聊天回复，10008 代表与天气相关的回复。然而奇怪的是，目前 API v2.0 的官方文档并没有给出 code 和类型的对照表。目前自己总结了一些如下，欢迎补充：    code  类型     10004  聊天    10008  天气    10013  科普类，例如 “班戟是什么”    10015  菜谱类，例如 “剁椒鱼头怎么做”    10019  日期类，例如 “愚人节是几号”、”明天是星期几”    10020  中英翻译    10023  一般返回网页会是这个 code，例如 “iphone 多少钱”    10034  语料库中自己设定的回答   小结 到现在为止，已经快把每个独立的模块完成了，接下来该准备考虑如何把它们整合在一起了。希望能帮到你。 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180322-turing-chat-bot-python-API/"
    } ,
  
    {
      "title"    : "在 Python 中使用科大讯飞 Web API 进行语音合成",
      "category" : "python",
      "content": "前几日讯飞开放平台推出了 WebAPI 接口，恰好最近需要实现一个文字转语音的功能，于是就尝试着用了起来。但不知什么原因，官方文档的 调用示例 一直报错，最后自己照着示例的思路用 python3 重写了一遍。所以这次总结一下在 Python 中使用讯飞 Web API 进行语音合成的过程。 注册讯飞开放平台 首先注册讯飞开放平台：http://passport.xfyun.cn/register 注册完成后进入控制台，在控制台 创建一个新应用 ，填写一些基本信息，注意 ` 应用平台 ` 选择 WebAPI 。 创建完成后，记录下 APPID 和 APIKey ，将在程序中用到。 另外，请在 IP 白名单 中添加自己的外网 IP，可以在 http://www.ip138.com/ 查看。（一般来说外网 IP 会常常发生变化，请注意） 在 Python3 中使用讯飞 Web API 先上代码，后面进行必要的说明： 可能提示缺库：pip3 install requests  使用 python3 执行 import base64 import json import time import hashlib import requests # API 请求地址、API KEY、APP ID 等参数，提前填好备用 api_url = http://api.xfyun.cn/v1/service/v1/tts API_KEY = 替换成你的 APIKEY APP_ID = 替换成你的 APPID OUTPUT_FILE = C://output.mp3 # 输出音频的保存路径，请根据自己的情况替换 TEXT = 苟利国家生死以，岂因祸福避趋之 # 构造输出音频配置参数 Param = {  auf: audio/L16;rate=16000, #音频采样率  aue: lame, #音频编码，raw(生成 wav) 或 lame(生成 mp3)  voice_name: xiaoyan,  speed: 50, #语速 [0,100]  volume: 77, #音量 [0,100]  pitch: 50, #音高 [0,100]  engine_type: aisound #引擎类型。aisound（普通效果），intp65（中文），intp65_en（英文） } # 配置参数编码为 base64 字符串，过程：字典→明文字符串→utf8 编码→base64(bytes)→base64 字符串 Param_str = json.dumps(Param) #得到明文字符串 Param_utf8 = Param_str.encode('utf8') #得到 utf8 编码 (bytes 类型) Param_b64 = base64.b64encode(Param_utf8) #得到 base64 编码 (bytes 类型) Param_b64str = Param_b64.decode('utf8') #得到 base64 字符串 # 构造 HTTP 请求的头部 time_now = str(int(time.time())) checksum = (API_KEY + time_now + Param_b64str).encode('utf8') checksum_md5 = hashlib.md5(checksum).hexdigest() header = {  X-Appid: APP_ID,  X-CurTime: time_now,  X-Param: Param_b64str,  X-CheckSum: checksum_md5 } # 发送 HTTP POST 请求 def getBody(text):  data = {'text':text}  return data response = requests.post(api_url, data=getBody(TEXT), headers=header) # 读取结果 response_head = response.headers['Content-Type'] if(response_head == audio/mpeg):  out_file = open(OUTPUT_FILE, 'wb')  data = response.content # a 'bytes' object  out_file.write(data)  out_file.close()  print('输出文件:' + OUTPUT_FILE) else:  print(response.read().decode('utf8')) 下面按照代码顺序进行各部分的说明。 APIKey 等参数 在代码开头填好各项参数，方面代码中使用。 API_KEY 和 APP_ID 请替换为上一步创建应用后得到的内容。请不要删除双引号。 OUTPUT_FILE 是最终输出音频的保存路径，根据自己的情况替换。 TEXT 是将要输出为语音的文本。 音频配置参数 Param 是字典格式的音频配置参数，其中 aue 可选 raw (生成 wav) 或 lame (生成 mp3)，如果修改成 raw 请记得同时修改输出文件的扩展名。 最后需要将配置参数编码为 Base64 字符串：字典类型→明文字符串→utf8 编码→Base64(bytes)→Base64 字符串，具体实现可以参考代码。 音频配置参数的详细说明可以参考 请求参数 - 语音合成 。 HTTP 请求头部 根据 授权认证 - 科大讯飞 RESET_API 开发指南 ，在调用所有业务接口时，都需要在 HTTP 请求头部中配置以下参数用于授权认证：    参数  格式  说明     X-Appid  string  讯飞开放平台注册申请应用的应用 ID(appid)    X-CurTime  string  当前 UTC 时间戳，从 1970 年 1 月 1 日 0 点 0 分 0 秒开始到现在的秒数    X-Param  string  音频配置参数 JSON 串经 Base64 编码后的字符串    X-CheckSum  string  令牌，计算方法：MD5(apiKey + curTime + param)。三个值拼接的字符串，进行 MD5 哈希计算（32 位小写）。   具体实现参考代码中字典 header 发送请求 &amp; 读取结果 最后使用 requests 库发送 HTTP POST 请求，得到结果。根据响应的 header 可以判断是否合成成功。 若响应头部包含 Content-type: audio/mpeg ，则响应 Body 为音频数据，可写入文件保存。 若合成出现错误，响应头部包含 Content-type: text/plain ，响应 Body 为记载了错误类型的 json 字符串。 返回值的具体说明请参考 返回值 - 语音合成 。 运行结果 使用几次后，感觉合成语音的断句做得不是很优秀，但响应速度很快，还是比较满意的。 output.mp3 小结 最近使用了几种 Web API，对这类 API 的使用方法也算是有些经验了。最后，现在语音识别、图灵机器人、语音合成都试着做了一遍，下一篇博客将把他们组合起来，实现一个简单的语音助手。 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180324-xunfei-tts-web-api-python/"
    } ,
  
    {
      "title"    : "使用 Python 把树莓派改造成一个语音助手",
      "category" : "python",
      "content": "语音助手已经不是什么新事物了。就在两三年前，语音助手的使用体验还不是那么好，尝尝鲜后也就没用过了。但最近发现不管是微软的 Cortana、苹果的 Siri，还是一些不怎么有名气的，例如 MIUI 的小爱同学等，使用体验真的改善了很多，确确实实能带来一些方便了。 随着各种云服务、API 的面世，语音方面的云服务可以说是十分健全了。你是否也想过自己动手搭建一个语音助手系统呢？本文将总结使用 Python 把树莓派（3 代 b 型）改造成一个简易语音助手的基本流程。 概述 这次要做的说白了，就是把各种云服务、API 串起来，并不涉及任何核心技术、算法的实现，望知悉。 这次将要使用到的服务包括：  谷歌 Cloud Speech API 图灵机器人 科大讯飞 语音合成 WebAPI 为了实现这个语音助手系统，需要完成的工作每一个都不难，但数量稍多了些。以下是涉及到的一些博客：  使用 Google 云计算引擎实现科学上网 在 Windows 命令行、Linux 终端使用代理 树莓派学习手记——使用 Python 录音 在 Python 中使用谷歌 Cloud Speech API 将语音转换为文字（另一种方案） 使用 Python 与图灵机器人聊天 在 Python 中使用科大讯飞 Web API 进行语音合成 后文在介绍各部分的具体实现时，只附上代码和进行一些必要的说明，详细内容还需要参考相应博客。 各部分的实现 由于整个项目用到的服务比较多，而且各部分的分工很明显，所以选择各部分分别用一个 python 程序来实现，最后再用一个程序整合在一起的方式。 录音 参考：树莓派学习手记——使用 Python 录音 笔者采用了 “按住按钮进行录音” 的操作方式，如下图所示接线。如果你手头上没有按钮或觉得这么做不方便，可以修改代码改成 “按回车键开始 / 结束录音” 之类的操作方式。 另外，树莓派的板载 3.5mm 耳机接口是不带语音输入功能的，所以你需要另外购买 USB 声卡。  文件 rec.py import RPi.GPIO as GPIO import pyaudio import wave import os import sys def rec_fun():  t# 隐藏错误消息，因为会有一堆 ALSA 和 JACK 错误消息，但其实能正常录音  tos.close(sys.stderr.fileno())  tBUTT = 26 t# 开始录音的按钮：一边接 GPIO26，一边接地  tGPIO.setmode(GPIO.BCM)  t# 设 GPIO26 脚为输入脚，电平拉高，也就是说 26 脚一旦读到低电平，说明按了按钮  tGPIO.setup(BUTT, GPIO.IN, pull_up_down = GPIO.PUD_UP)  t# wav 文件是由若干个 CHUNK 组成的，CHUNK 我们就理解成数据包或者数据片段。  tCHUNK = 512  tFORMAT = pyaudio.paInt16 # pyaudio.paInt16 表示我们使用量化位数 16 位来进行录音  tRATE = 44100 # 采样率 44.1k，每秒采样 44100 个点。  tWAVE_OUTPUT_FILENAME = /home/pi/chat/command.wav  tprint('请按住按钮开始录音...')  tGPIO.wait_for_edge(BUTT, GPIO.FALLING)  t# To use PyAudio, first instantiate PyAudio using pyaudio.PyAudio(), which sets up the portaudio system.  tp = pyaudio.PyAudio()  tstream = p.open(format = FORMAT,  t t t t tchannels = 1, t# cloud speecAPI 只支持单声道  t t t t trate = RATE,  t t t t tinput = True,  t t t t tframes_per_buffer = CHUNK)  tprint(录音中...)  tframes = []  t# 按住按钮录音，放开时结束  twhile GPIO.input(BUTT) == 0:  t tdata = stream.read(CHUNK)  t tframes.append(data)  tprint(录音完成，输出文件： + WAVE_OUTPUT_FILENAME + '  ')  tstream.stop_stream()  tstream.close()  tp.terminate()  twf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')  twf.setnchannels(1)  twf.setsampwidth(p.get_sample_size(FORMAT)) t# Returns the size (in bytes) for the specified sample format.  twf.setframerate(RATE)  twf.writeframes(b''.join(frames))  twf.close()  treturn # 可以直接运行 rec.py 进行测试，同时保证该文件 import 时不会自动运行 if __name__ == '__main__':  trec_fun() 语音识别 参考： 使用 Google 云计算引擎实现科学上网 在 Windows 命令行、Linux 终端使用代理 在 Python 中使用谷歌 Cloud Speech API 将语音转换为文字（另一种方案） 由于某些原因，笔者选择了使用谷歌 Cloud Speech API 进行语音识别。既然要用谷歌的服务，自然就涉及到了科学上网、代理、谷歌云平台的使用，如果不想这么折腾，完全可以用国内的讯飞、百度来实现。 另外，API KEY 之类的字符串在这里删除了，还请麻烦修改代码加上你自己申请的 API KEY。  文件 speech_api.py import json import urllib.request import base64 def wav_to_text():  tapi_url = https://speech.googleapis.com/v1beta1/speech:syncrecognize?key = 替换成你的 API 密钥  tprint('语音文件编码中...')  taudio_file = open('/home/pi/chat/command.wav', 'rb')  taudio_b64str = (base64.b64encode(audio_file.read())).decode()  taudio_file.close()  tvoice = {  t config:  t {  t tlanguageCode: cmn-Hans-CN  t },  t audio:  t {  t tcontent: audio_b64str  t }  t}  tvoice = json.dumps(voice).encode('utf8')  tprint('编码完成。正在上传语音...')  treq = urllib.request.Request(api_url, data=voice, headers={'content-type': 'application/json'})  tresponse = urllib.request.urlopen(req)  tresponse_str = response.read().decode('utf8')  tresponse_dic = json.loads(response_str)  tif ('results' not in response_dic.keys()):  t tprint('您录制的文件似乎没有声音，请检查麦克风。')  t treturn  ttranscript = response_dic['results'][0]['alternatives'][0]['transcript']  tconfidence = response_dic['results'][0]['alternatives'][0]['confidence']  tresult_dic = {'text':transcript ,'confidence':confidence}  tprint('识别完成。以字典格式输出：')  tprint(result_dic)  treturn result_dic if __name__ == '__main__':  twav_to_text() 获取文字回答 参考：使用 Python 与图灵机器人聊天 这个获取回答的程序有些粗糙，只能获得普通的文字回答。实际上图灵机器人回复的内容中包括了文字、问题类型甚至情感等信息，还有很多修改的空间。  文件 turing.py import json import urllib.request def chat(question):  tapi_url = http://openapi.tuling123.com/openapi/api/v2  ttext_input = question['text']  treq = {  t tperception:  t t{  t t tinputText:  t t t{  t t t ttext: text_input  t t t},  t t tselfInfo:  t t t{  t t t tlocation:  t t t t{  t t t t tcity: 上海,  t t t t tprovince: 上海,  t t t t tstreet: 文汇路  t t t t}  t t t}  t t},  t tuserInfo:  t t{  t t tapiKey: 替换成你的 APIKEY,  t t tuserId: 用户参数  t t}  t}  t# 将字典格式的 req 转为 utf8 编码的字符串  treq = json.dumps(req).encode('utf8')  tprint('  ' + '正在调用图灵机器人 API...')  thttp_post = urllib.request.Request(api_url, data=req, headers={'content-type': 'application/json'})  tresponse = urllib.request.urlopen(http_post)  tprint('得到回答，输出为字典格式：')  tresponse_str = response.read().decode('utf8')  tresponse_dic = json.loads(response_str)  tintent_code = response_dic['intent']['code']  t# 返回网页类的输出方式  tif(intent_code == 10023):  t tresults_url = response_dic['results'][0]['values']['url']  t tresults_text = response_dic['results'][1]['values']['text']  t tanswer = {code: intent_code, text: results_text, url:results_url}  t tprint(answer)  t treturn(answer)  t# 一般的输出方式  telse:  t tresults_text = response_dic['results'][0]['values']['text']  t tanswer = {code: intent_code, text: results_text}  t tprint(answer)  t treturn(answer) if __name__ == '__main__':  teg_question = {'text': '今天是几号', 'confidence': 0.9}  tchat(eg_question) 读出回答（语音合成） 参考：在 Python 中使用科大讯飞 Web API 进行语音合成 笔者在使用讯飞 Web API 时，该服务才开放不到一周，难免以后该 API 会有所变动，如有问题建议查阅官方文档。  文件 tts.py import base64 import json import time import hashlib import urllib.request import urllib.parse import os def speak(text_content):  t# API 请求地址、API KEY、APP ID 等参数，提前填好备用  tapi_url = http://api.xfyun.cn/v1/service/v1/tts  tAPI_KEY = 替换成你的 APIKEY  tAPP_ID = 替换成你的 APPID  tAUE = lame  t# 构造输出音频配置参数  tParam = {  t tauf: audio/L16;rate=16000, t# 音频采样率  t taue: AUE, t# 音频编码，raw(生成 wav) 或 lame(生成 mp3)  t tvoice_name: xiaoyan,  t tspeed: 50, t# 语速 [0,100]  t tvolume: 10, t# 音量 [0,100]  t tpitch: 50, t# 音高 [0,100]  t tengine_type: aisound t# 引擎类型。aisound（普通效果），intp65（中文），intp65_en（英文）  t}  t# 配置参数编码为 base64 字符串，过程：字典→明文字符串→utf8 编码→base64(bytes)→base64 字符串  tParam_str = json.dumps(Param) t# 得到明文字符串  tParam_utf8 = Param_str.encode('utf8') t# 得到 utf8 编码 (bytes 类型)  tParam_b64 = base64.b64encode(Param_utf8) t# 得到 base64 编码 (bytes 类型)  tParam_b64str = Param_b64.decode('utf8') t# 得到 base64 字符串  t# 构造 HTTP 请求的头部  ttime_now = str(int(time.time()))  tchecksum = (API_KEY + time_now + Param_b64str).encode('utf8')  tchecksum_md5 = hashlib.md5(checksum).hexdigest()  theader = {  t tX-Appid: APP_ID,  t tX-CurTime: time_now,  t tX-Param: Param_b64str,  t tX-CheckSum: checksum_md5  t}  t# 构造 HTTP 请求 Body  tbody = {  t ttext: text_content  t}  tbody_urlencode = urllib.parse.urlencode(body)  tbody_utf8 = body_urlencode.encode('utf8')  t# 发送 HTTP POST 请求  tprint('  ' + 正在调用科大讯飞语音合成 API...)  treq = urllib.request.Request(api_url, data=body_utf8, headers=header)  tresponse = urllib.request.urlopen(req)  t# 读取结果  tresponse_head = response.headers['Content-Type']  tif(response_head == audio/mpeg):  t tout_file = open('/home/pi/chat/answer.mp3', 'wb')  t tdata = response.read() # a `bytes` object  t tout_file.write(data)  t tout_file.close()  t tprint('得到结果，输出文件: /home/pi/chat/answer.mp3')  telse:  t tprint(response.read().decode('utf8'))  t# 播放音频  tprint(播放音频中...)  tprint(以下均为 mplayer 的输出内容    n)  tos.system(mplayer -ao alsa:device=hw=1.0 /home/pi/chat/answer.mp3)  treturn if __name__ == '__main__':  teg_text_content = 苟利国家生死以，岂因祸福避趋之  tspeak(eg_text_content) 整合 &amp; 测试 现在，你的项目文件夹中应该有这些 python 代码文件： 接下来我们只需要将他们整合在一起运行。  文件 combine.py # 这些 import 进来的模块是同目录下的 py 文件 import rec t# rec.py 负责录制 wav 音频 import speech_api t# speech_api.py 负责 wav 转文字 import turing t# turing.py 负责获得图灵机器人的文字回答 import tts t# tts.py 负责读出回答 rec.rec_fun() t# 录制音频 recognize_result = speech_api.wav_to_text() t# 识别语音，返回值是字典格式，包含文字结果和信心 turing_answer = turing.chat(recognize_result) t# 得到图灵的回答，返回值仍是字典格式 tts.speak(turing_answer['text']) 如果一切顺利的话，实际运行效果如下： 树莓派_语音助手_youku 小结 语音助手这边的工作算是告一段落了，结果小结却不知道怎么写了。不管怎么说，很开心最后能得到实际的结果，做的过程中也有一些脑洞想要继续扩展，过段时间应该还会继续！ 做这个项目的过程中，项目外的收获或许比这个项目本身还要多。这段时间从很多博客、论坛得到了数不尽的帮助，国内的、国外的、中文的、英文的、日文的都有，深深地感受到了互联网共享精神的力量，这也是促使我开始写这些文章的原因。那么，最后还是说一句：感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180326-PiDaXing/"
    } ,
  
    {
      "title"    : "欧拉角 R、P、Y 的直观说明",
      "category" : "数学",
      "content": "Roll: 横滚 Pitch: 俯仰 Yaw: 偏航（航向） ",
      "url"      : "https://inforest.site/20180328-eular-angle-anime-show/"
    } ,
  
    {
      "title"    : "python - 创建 virtualenv 时选择继承系统站点程序包",
      "category" : "python",
      "content": "笔记 virtualenv --system-site-packages --python python3 env 可以解决 smbus 模块不存在的问题。 ",
      "url"      : "https://inforest.site/20180328-python-virtualenv-inherit/"
    } ,
  
    {
      "title"    : "Raspberry Lirc Command",
      "category" : "raspberrypi",
      "content": "笔记 测试 IR 输入 sudo service lircd stop mode2 -m -d /dev/lirc0 录制 irrecord -d /dev/lirc0 # 空调等复杂设备使用 - f irrecord -f -d /dev/lirc0 # 录制完成之后 sudo cp xxxxxxx.conf /etc/lirc/lircd.conf.d/ 红外发射 sudo service lircd restart irsend SEND_ONCE 设备名 按键名 irsend --count=10 SEND_ONCE 设备名 按键名 ",
      "url"      : "https://inforest.site/20180331-raspberry-lirc-command/"
    } ,
  
    {
      "title"    : "树莓派学习手记——制作一个空调遥控器（红外接收、发射的实现）",
      "category" : "raspberrypi",
      "content": "使用树莓派搭配红外管，进行接收、发射红外信号是很方便的，同时红外信号也有很广泛的用途。这次我们将总结使用树莓派制作一个空调红外遥控器的过程。 准备工具  红外接收管（参考型号 HS0038B） 红外发射管（参考型号 TSAL6200） 遥控器（或能使用万能遥控器的手机） 用作开关的三极管、限流电阻（非必须、参考型号 S9013）  使用开关三极管可以有效增强红外发射管的性能，但不是必须的。不使用三极管也能在三五米范围内成功遥控空调。这些材料总共费用不超过 1 块钱，反而是快递费比较贵了。 看到遥控器、接收管、发射管，相信已经有人明白了制作遥控器的原理。是的，我们只需要事先把遥控器发射出的红外信号记录下来，然后通过树莓派依样画葫芦地把这个信号发射出去，一个 “克隆” 版的遥控器就做好了。 硬件连接  注意：两个 GPIO 引脚是固定的，与后续安装的软件有关。 接收管信号输出脚 OUT → GPIO18 发射管正极（不使用开关三极管的情况下） → GPIO17 如果你手头上没有开关三极管，直接将红外发射管正极接在 GPIO17，如下所示： 如果接入三极管，用 GPIO17 连接基极，控制发射极和集电极的通断： （偷懒了没有接入限流电阻，在意的同学自行接入） 安装 lirc  解决方案来自：LIRC: Linux Infrared Remote Control for Raspberry Pi sudo apt update sudo apt install lirc 修改 CONFIG. TXT 修改文件 /boot/config.txt ： sudo nano /boot/config.txt 找到 lirc-rpi module 的部分，修改为： # Uncomment this to enable the lirc-rpi module dtoverlay=lirc-rpi,gpio_out_pin=17,gpio_in_pin=18,gpio_in_pull=up ！！！注意：config.txt 的配置内容，似乎根据不同 Linux 内核版本有微妙的变化，手头上暂时没有其他平台可以测试。如果后续测试时出问题，请 Google 关键词 “lirc lirc-rpi gpio-ir” 查阅相关资料。 修改驱动配置 修改文件 /etc/lirc/lirc_options.conf ： sudo nano /etc/lirc/lirc_options.conf # 把： driver = devinput device = auto # 修改为： driver = default device = /dev/lirc0 最后，重启树莓派。 简单测试是否正常 # 必须停止 lircd 服务才能进入接收红外信号模式 sudo service lircd stop mode2 -d /dev/lirc0 运行上述命令后，用遥控器对着接收管随便按一些按钮，如果出现形式如下的输出就表示正常： space 16777215 pulse 8999 space 4457 pulse 680 space 1627 ...... 录入红外信号  解决方案来自：How to Control Your Air Conditioner with Raspberry Pi Board and ANAVI Infrared pHAT lirc 有一个自动录入红外信号、生成遥控器文件的功能。但此方法只适用于简单设备，比如风扇，这里就不记录过程了。有需要的直接运行 irrecord -d /dev/lirc0 --disable-namespace ，按提示做完后把生成的文件放到 /etc/lirc/lircd.conf.d/ 目录就行了。 这边就主要针对空调这种复杂设备，记录录入红外信号的过程。 另外，简单了解一下 红外 NEC 协议 可以帮助你理解配置的过程。  为什么无法直接录制复杂设备的红外控制信号？* 因为空调遥控器每次发送的信号不是单纯的一个 “byte”，与其说它是 “控制信号”，不如说是一个 “状态”、“情景”。后文还会有实例帮助你理解。 生成遥控器配置文件的样板 空调这类复杂设备的遥控器配置文件，是需要自己手动输入的。但不可能整个文件都自己写——我们连格式都不知道。 所以我们需要用刚才提到的自动录入功能生成一个样板，但请记住，这个样板中记录的信号极可能是不正确的！我们只是通过它来了解配置内容的格式。 开始自动录制： # 请 cd 到有读写权限的目录下，因为需要创建一个遥控器配置文件 # 参数 - f --force 表示 Force raw mode irrecord -f -d /dev/lirc0 --disable-namespace 认真阅读提示信息，根据提示按 Enter、输入 ` 遥控器名称 ` 、按 Enter、按照要求随机按遥控器、输入 ` 按钮名称 ` 、按对应的遥控器按钮。由于只是为了生成样板，所以录制一个按钮就够了。完成录制后，当前目录下会生成一个遥控器配置文件 ` 遥控器名称. lircd.conf` 。  如果发现录制过程十分缓慢，最后提示 “未发现 gap” 之类的信息，请尝试跳过自动生成这一步，复制下面的配置文件当做生成的配置，直接进入下一步。（我在录制一些老式空调的命令时遇到了这种问题，只能这样解决，如果你有什么想法恳请提出）* 我在录制时输入的 ` 遥控器名称 ` 是 aircon，录制的一个按钮是 on，所以配置文件的内容形式如下： begin remote name aircon flags RAW_CODES eps  30 aeps  100 gap  19991  begin raw_codes  name on   9042 4438  700 1602  705  526   678  528  681  531  674  527   679  528  679  528  677  527   677  528  679  528  678  528   677 1632  676  529  676  531   676  531  649  556  672  532   650  558  654  552  652  553   649  558  648 1661  650  558   648  558  648 1661  649  562   644  558  647  558  648 1657   651  558  647 1659  650  557   653  553  648 1660  648  557   649  end raw_codes end remote 如果你阅读了 红外 NEC 协议，就能马上意识到，这一串数字其实就是红外信号脉冲(pulse)、空白(space) 的持续时间。 手动编辑遥控器配置文件 打开刚才生成的样板文件 ` 遥控器名称. lircd.conf ，很容易发现 begin raw_codes 和 end raw_codes 之间的内容就是需要我们手动修改的内容。刚才也提到过，样板中记录的信号极可能是**不正确**的，所以我们先把自动生成的 on` 按钮下方的信号数据删除掉。 还记得刚才测试时使用的 mode2 命令吗。我们现在需要做的就是使用 mode2 命令接收遥控器发出的信号，然后将其加入到文件 ` 遥控器名称. lircd.conf 中。首先，我们来录入**正确**的 on` 按钮的信号数据： # -m --mode 使用行列显示模式，不显示 pulse、space mode2 -m -d /dev/lirc0 按下遥控器上的 “开” 按钮，得到形式如下的输出： 16777215  9059  4432 706  1604 706 528  679 524 681  1603 703 526  680  1602 715  1596 704 526  679 527 679 527 680 527  679  1604 705 530 673 530  674 529 682 529 675 530  674 532 674 532 650 557  648 556 654  1653 676 533  649 559 647  1667 639 559  648 558 656 553 647  1658  648 558 650  1659 649 559  647 559 648  1659 648 558  646 19991  648 558 648 558 650 567  638 557 648  1668 640 557  649 558 650 558 646  1660  650 556 649 557 649 559  654 552 648  1657 651 558  647 554 660 549 649 559  647 557 649 559 648 559  647 557 644 561 648 559  648 556 647 560 648 556  652 563 642  1658 648  1661  649  1660 646  1658 650 除去第一行很大的那个数，把其他数据全部复制，粘贴到配置文件的 name on 下方。例如现在我必须删除 “16777215” 这个数，剩下的内容粘贴到配置文件的 name on 下方。 重复上述操作，增加更多的按钮，例如 name off 、 name 26C 等。最后我录制了 3 个按钮，配置文件编辑成了这样： begin remote name aircon flags RAW_CODES eps  30 aeps  100 gap  19991  begin raw_codes  name on  t t t 9059  4432 706  1604 706 528  t t t 679 524 681  1603 703 526  t t t 680  1602 715  1596 704 526  t t t 679 527 679 527 680 527  t t t 679  1604 705 530 673 530  t t t 674 529 682 529 675 530  t t t 674 532 674 532 650 557  t t t 648 556 654  1653 676 533  t t t 649 559 647  1667 639 559  t t t 648 558 656 553 647  1658  t t t 648 558 650  1659 649 559  t t t 647 559 648  1659 648 558  t t t 646 19991  t t t 648 558 648 558 650 567  t t t 638 557 648  1668 640 557  t t t 649 558 650 558 646  1660  t t t 650 556 649 557 649 559  t t t 654 552 648  1657 651 558  t t t 647 554 660 549 649 559  t t t 647 557 649 559 648 559  t t t 647 557 644 561 648 559  t t t 648 556 647 560 648 556  t t t 652 563 642  1658 648  1661  t t t 649  1660 646  1658 650  t t name off  t t t 9029  4432 715  1594 706 526  t t t 682 523 681 525 680 526  t t t 681  1601 708  1607 699 524  t t t 688 519 682 526 678 527  t t t 681  1601 708 524 687 520  t t t 682 525 677 527 677 529  t t t 675 531 676 531 674 532  t t t 651 558 646  1659 650 557  t t t 648 557 650  1659 653 554  t t t 650 559 647 558 649  1657  t t t 649 558 648  1661 648 557  t t t 646 562 645  1666 643 558  t t t 649 19992  t t t 651 555 650 558 648 562  t t t 645 557 648  1661 653 552  t t t 646 560 650 557 648  1657  t t t 649 561 647 557 647 558  t t t 650 556 650  1659 649 559  t t t 647 557 649 558 648 559  t t t 647 557 651 564 642 559  t t t 646 557 649 557 657 552  t t t 647 557 648 558 650 557  t t t 645 560 653  1653 646  1661  t t t 650  1659 648 558 647  t t name 26C  t t t 9026  4430 705  1604 706 528  t t t 679 535 670  1604 705 527  t t t 675 532 679  1607 702 530  t t t 673 531 683  1625 672 535  t t t 672  1633 676 530 673 534  t t t 649 558 648 563 642 556  t t t 651 556 650 558 672 532  t t t 649 556 652  1659 648 558  t t t 656 551 646  1659 650 558  t t t 648 558 648 558 649  1658  t t t 649 561 648  1659 647 559  t t t 650 556 648  1660 646 559  t t t 647 19990  t t t 648  1659 649 558 648 558  t t t 647 558 650  1658 650 557  t t t 650 555 650 558 648 558  t t t 649 555 652 561 667 534  t t t 648 559 648  1658 656 550  t t t 650 557 672 533 649 555  t t t 650 559 649 558 647 559  t t t 648 558 648 566 641 558  t t t 647 558 648 558 650 558  t t t 648 558 648  1660 646 558  t t t 648 558 646 562 647  end raw_codes end remote 是的，如果你想要实现完整的控制，你就需要把所有按钮都录制一遍。如果你对配置文件中开头的 eps、aeps 等参数感兴趣，或者最后遥控不太正常，阅读 lircd.conf manual 或许能帮到你。我使用的是默认的数值，一切工作正常。 最后，把配置文件复制到指定目录 /etc/lirc/lircd.conf/ 并重启 lircd 服务： sudo cp aircon.lircd.conf /etc/lirc/lircd.conf.d/ sudo service lircd restart 后续步骤出现问题的同学可以使用 service lircd status 查看服务启动的 log，帮助定位 bug。 发射信号 终于，我们可以尝试着使用树莓派控制空调了。如果你没有使用开关三极管，你可能需要把树莓派拿到靠近空调的地方，并且把红外发射管对准空调。如果你使用了三极管，那么注意树莓派和空调之间不要有明显的物体阻隔即可。 # 发射命令：irsend SEND_ONCE 遥控器名称 按钮名称 irsend SEND_ONCE aircon on 如果前面的步骤一切正常，但在发射信号时报错 “transmission failed”。请检查生成的遥控器配置文件，查看 flags 项，若是 flags RAW_CODES|CONST_LENGTH ，请尝试将其修改成 flags RAW_CODES 并重启 lircd 服务。再测试能否发射信号。* 按钮？不如说是情景 最后，我们来讨论一个比较有意思的东西。 考虑一下这种情况：我为了录入 + 按钮，运行 mode2 命令开始录制。在遥控器显示温度 23℃时按 + ，然后按照前面的方法编辑配置文件，写入了按钮 name add 。 此时空调屏幕上显示温度是 24℃。提问：如果我运行 irsend SEND_ONCE aircon add 空调会：  温度提升到 25℃ “滴” 地响一声，然后什么都没发生，保持在 24℃ 很遗憾，后者发生了。 实际上遥控器每按下一次按钮发送的信息是一个 “情景”，我刚才录制的 add 按钮实际上是表示“温度设为 24℃、进入制冷模式、风速设为自动…”这样的一个 “情景”。如果你在空调温度 20℃时运行 add 命令，那么它就会一次性提升到 24℃！ 这意味着，如果你想要设置任意温度，你需要把每一度都录制一遍，因为 + 、 - 命令根本就不存在。 当然，这也不全是坏事。 我录制了一个按钮 26C ，功能是将温度调到 26℃。然后我意识到， 26C 这个按钮同时包含了开关状态的信息。是的！在空调关闭的情况下，如果我直接发送命令： irsend SEND_ONCE aircon 26C 那么空调会打开，并且调整到 26℃！ 于是，我录制了一个按钮 Sleep ，它将空调设置为 “26℃、风速设为低、开启扫风、开启静音睡眠模式”。睡前运行一次 irsend SEND_ONCE aircon Sleep ，感觉离智能家居又近了一步 23333 (•̀ω•́)✧。 小结 其实写完这篇总结还是有点慌的，因为不管是树莓派版本、软件版本、红外管型号还是空调的型号，大家都是不一样的，说不准哪一步我这么做放别人那就是错的呢。事实上，我自己在做的过程中参考的一些博客就和我的实际情况有些出入了。只能希望这篇总结能够有一定的参考价值。最后，感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180402-raspberrypi-aircon-ir-remote/"
    } ,
  
    {
      "title"    : "常见内网网段",
      "category" : "network",
      "content": " 内网 IP 段有哪些 常见的内网 IP 段有： 10.0.0.0/8 10.0.0.0 - 10.255.255.255 172.16.0.0/12 172.16.0.0 - 172.31.255.255 192.168.0.0/16 192.168.0.0 - 192.168.255.255 以上三个网段分别属于 A、B、C 三类 IP 地址，来自 《RFC 1918》。 但是根据 《Reserved IP addresses - Wikipedia, the free encyclopedia》 及《RFC 6890 - Special-Purpose IP Address Registries》的描述， 还有很多其它的内网 IP 段（包括 IPv6），以及其它用途的保留 IP 地址。 其它 IPv4 内网段罗列如下： 0.0.0.0/8 0.0.0.0 - 0.255.255.255 用于当前网络内的广播消息。 100.64.0.0/10 100.64.0.0 - 100.127.255.255 由运营商使用的私网 IP 段，随着 IPv4 地址池的耗光，会有更多用户被分配到这个网段。 127.0.0.0/8 127.0.0.0 - 127.255.255.255 本机回环地址。 169.254.0.0/16 169.254.0.0 - 169.254.255.255 获取不到 IP 地址时使用，通常因为从 DHCP 服务器获取不到 IP。 255.255.255.255/32 255.255.255.255 本网段的广播地址。 ",
      "url"      : "https://inforest.site/20180405-common-local-ip/"
    } ,
  
    {
      "title"    : "译 - 使用谷歌 Cloud Translation API 翻译文本",
      "category" : "google cloud",
      "content": " 原文：Translation API でテキストをほんやくする 概要 使用 Cloud Translation，可以将任意的字符串翻译为 API 支持的语言。由于语言检测功能的存在，即使在源语言未知的情况下，也能使用该 API。 将要学习的东西  创建 Cloud Translation API 请求，使用 curl 调用 API 翻译文本的方法 高级版（Premium Edition）的使用方法 检测语言 必要的准备  创建 Google Cloud Platform 项目 浏览器（Chrome、Firefox 等） 设置和一些说明 根据自己的情况进行设置 还未拥有 Google 账号（Gmail / Google Apps）的情况下，创建账号 是必须的。登录 Google Cloud Platform Console（console.cloud.google.com），创建一个新项目。 请记住项目名称。任意一个 Google Cloud 项目都拥有唯一的名称（上述的名称已经被使用了，所以实际上无法使用）。 Google Cloud Platform 的新用户将赠与 相当于 $300 的试用金。 用于教学的账号 教师将已有的项目进行设置，生成临时账号。若你得到了教师发放的临时账号，你将不必顾虑项目中产生的费用。但是，一旦该教学项目结束，所有的临时账号将被无效化。 当你从教师那收到了临时账号的用户名 / 密码，就能够登录 Google Cloud Console（https://console.cloud.google.com/）。 登录后，你将看到如下界面。 启用 Translation API 点击屏幕左上角的菜单图标。 在下拉菜单中选择 [API Manager] 点击 [启用 API] 。 然后，在搜索框中输入「translate」。点击 [Google Cloud Translation API]。 API 已经启用的情况下，只会显示 [停用] 按钮。请不要停用 API。 API 还未启用的情况下，点击 [启用]，启用 Cloud Translation API 。 等待数秒，API 成功启用后，将显示如下。 激活 Cloud Shell Google Cloud Shell 是在云端运行的命令行环境。这台基于 Debian 的虚拟机能够加载任何您需要的开发工具（gcloud、bq、git 等），并提供永久的 5 GB 主目录。这次教程将使用 Cloud Shell 创建对 Translation API 的请求。 点击标题栏右侧的 [激活 Google Cloud Shell] 按钮（&gt;_），启动 Cloud Shell。 Cloud Shell 将在控制台底部的新窗口中打开，并显示命令行提示符。请等待提示符 user@project:~$ 出现。 生成 API Key 你将通过使用 curl 发送一个请求来调用 Translation API 。在发送请求时，你需要在 URL 中插入一个生成的 API 密钥。为了创建 API 密钥，让我们点击侧边栏的 [API Manager] 。 然后，在 [凭据] 选项卡中点击 [创建凭据] 。 在下拉菜单中选择 [API 密钥] 。 最后，复制生成好的密钥。 将密钥复制到剪贴板后，使用下述命令将其保存到 Cloud Shell 的环境变量中。下述的YOUR_API_KEY请替换成剪贴板中的内容。 export API_KEY=YOUR_API_KEY 翻译文本 在此例中，将「My name is Steve」这个字符串翻译为西班牙语。使用下述的 curl 命令，将之前保存好的 API 密钥环境变量和将要翻译的文本一起，传递给 Translation API 。 TEXT=My%20name%20is%20Steve curl https://translation.googleapis.com/language/translate/v2?target=es&amp;key=${API_KEY}&amp;q=${TEXT} 你将得到形式如下的响应。 { data: {  translations: [  {  translatedText: Mi nombre es Steve,  detectedSourceLanguage: en  }  ] } } 响应中，你可以看到翻译出的文本和 API 检测到的源语言。  Premium 模式 Google Cloud Translation 在几乎所有翻译任务中都是用了 Standard Edition 模式。然而 Google 从最近开始，使用了更为强大的 Neural machine Translation System 来优化翻译服务。在这里，我们可以使用 Premium 模式。详情请参阅 此处的指南。 检测语言 除了文本翻译以外，Translation API 还能用来检测文本的语言。此例中，我们将检测两个字符串的语言。下面将使用 curl 命令，把之前保存的 API 密钥环境变量和待检测的文本一起传递给 Translation API 。 TEXT_ONE=Meu%20nome%20é%20Steven TEXT_TWO=日本のグーグルのオフィスは、東京の六本木ヒルズにあります curl https://translation.googleapis.com/language/translate/v2/detect?key=${API_KEY}&amp;q=${TEXT_ONE}&amp;q=${TEXT_TWO} 你将得到形式如下的响应。 { data: {  detections: [  [  {   confidence: 0.84644311666488647,   isReliable: false,   language: pt  }  ],  [  {   confidence: 1,   isReliable: false,   language: ja  }  ]  ] } } 本例中返回的语言是 「pt」和「ja」。它们是 ISO-639-1 的标识符，指葡萄牙语和日本语。关于可能的返回值，在 Translation API 支持的语言一览 中可以查询。 恭喜！ 在此次向导中，我们学习了如何使用 Cloud Translation API 进行文本的翻译。 学到的东西  创建 Cloud Translation API 请求，使用 curl 调用 API 翻译文本的方法 高级版（Premium Edition）的使用方法 检测语言 下一步  通过常用的编程语言，使用客户端库，学习 Translation API 的示例应用程序。 尝试使用 Vision API 、Speech API 。 ",
      "url"      : "https://inforest.site/20180405-google-translation-api/"
    } ,
  
    {
      "title"    : "使用 bypy 在命令行上传文件到百度云盘",
      "category" : "linux",
      "content": "repo: https://github.com/houtianze/bypy 安装 pip install bypy # 执行任意命令进行授权 bypy info #上传文件夹内的内容到 app/bypy/ bypy upload 文件夹 #定时执行上传 sudo nano /etc/crontab */1 * * * * Rin bypy upload 文件夹 sudo /etc/init.d/cron restart ",
      "url"      : "https://inforest.site/20180406-bypy-baiduyun/"
    } ,
  
    {
      "title"    : "インスタグラム爬图",
      "category" : "python",
      "content": "repo：https://github.com/rarcega/instagram-scraper # https://github.com/rarcega/instagram-scraper/blob/master/setup.py sudo python setup.py install pip install instagram-scraper instagram-scraper 用户名 -u 你的用户名 -p 你的密码 -d 存放文件夹 定时爬取 sudo nano /etc/crontab */1 * * * * Rin instagram-scraper 用户名 -d 存放文件夹 sudo /etc/init.d/cron restart ",
      "url"      : "https://inforest.site/20180406-ins-python-scraper/"
    } ,
  
    {
      "title"    : "译 - 使用 Natural Language API 分析文本的实体与情感",
      "category" : "google cloud",
      "content": " 原文：Natural Language API でエンティティと感情を分析する 概要 使用 Cloud Natural Language API ，可以从文本中提取实体、分析情感、解析文本构成。 此次向导中，我们将针对 Natural Language API 的 3 个方法： analyzeEntities 、 analyzeSentiment 和 annotateText 进行学习。 将要学习的东西  构造 Natural Language API 请求，并使用 curl 发送请求 使用 Natural Language API 提取文本中的实体，并进行情感分析 使用 Natural Language API 对文本进行语言分析（语法、词性等） 使用不同的语言构造 Natural Language API 请求 必要的准备  创建 Google Cloud Platform 项目 浏览器（Chrome、Firefox 等） 设置和一些说明 根据自己的情况进行设置 还未拥有 Google 账号（Gmail / Google Apps）的情况下，创建账号 是必须的。登录 Google Cloud Platform Console（console.cloud.google.com），创建一个新项目。 请记住项目名称。任意一个 Google Cloud 项目都拥有唯一的名称（上述的名称已经被使用了，所以实际上无法使用）。 Google Cloud Platform 的新用户将赠与 相当于 $300 的试用金。 启用 Cloud Natural Language API 点击屏幕左上角的菜单图标。 在下拉菜单中选择 [API Manager] 点击 [启用 API] 。 然后，在搜索框中输入「Language」。点击 [Google Cloud Natural Language API]。 点击 [启用]，启用 Cloud Natural Language API 。 等待数秒，API 成功启用后，将显示如下。 激活 Cloud Shell Google Cloud Shell 是在云端运行的命令行环境。这台基于 Debian 的虚拟机能够加载任何您需要的开发工具（gcloud、bq、git 等），并提供永久的 5 GB 主目录。这次教程将使用 Cloud Shell 创建对 Translation API 的请求。 点击标题栏右侧的 [激活 Google Cloud Shell] 按钮（&gt;_），启动 Cloud Shell。 Cloud Shell 将在控制台底部的新窗口中打开，并显示命令行提示符。请等待提示符 user@project:~$ 出现。 生成 API Key 你将通过使用 curl 发送一个请求来调用 Natural Language API 。在发送请求时，你需要在 URL 中插入一个生成的 API 密钥。为了创建 API 密钥，让我们点击侧边栏的 [API Manager] 。 然后，在 [凭据] 选项卡中点击 [创建凭据] 。 在下拉菜单中选择 [API 密钥] 。 最后，复制生成好的密钥。此密钥将在向导的后半部分中用到。 你已获得 API 密钥，我们将其保存在环境变量中，以便每次调用 API 时不需要重复插入 API 密钥值。你可以将密钥保存在 Cloud Shell 中，下述的 &lt;your_api_key&gt; 请替换成之前复制的内容。 export API_KEY=&lt;YOUR_API_KEY&gt; 构造分析文本中实体的请求 第一个介绍的 Natural Language API 方法是 analyzeEntities 。API 使用此方法从文本中提取出实体（人物、场所、事件等）。为了试用 API 的实体分析功能，我们将引用最近新闻中的以下句子。 LONDON — J. K. Rowling always said that the seventh Harry Potter book, “Harry Potter and the Deathly Hallows, “ would be the last in the series, and so far she has kept to her word. 对 Natural Language API 发出的请求可以事先保存在 request.json 文件中。首先，我们在 Cloud Shell 中生成这个文件。 touch request.json 然后，使用任意一个文本编辑器（ nano 、 vim 、 emacs ）打开生成的文件。在文件 request.json 中添加如下内容。 request.json { document:{  type:PLAIN_TEXT,  content:LONDON — J. K. Rowling always said that the seventh Harry Potter book, ‘Harry Potter and the Deathly Hallows,' would be the last in the series, and so far she has kept to her word. } } 在这个请求文件中，保存了即将发送给 Natural Language API 的文本的相关信息。type 属性的值可以是 PLAIN_TEXT 或 HTML 。content 中存放了将要发送给 Natural Language API 分析的文本。Natural Language API 还支持直接发送存储在 Google Cloud Storage 中的文件。直接从 Google Cloud Storage 发送文件时，请将 content 替换为 gcsContentUri ，并将其值设置为云端文件的 uri 地址。 调用 Natural Language API 现在，我们将使用 curl 命令，把请求文件和之前保存好的 API 密钥环境变量一起，发送给 Natural Language API （全放在一条命令里面）。 curl https://language.googleapis.com/v1/documents:analyzeEntities?key=${API_KEY} -s -X POST -H Content-Type: application/json --data-binary @request.json 你将得到形式如下的响应。 { entities: [  {  name: Harry Potter and the Deathly Hallows,  type: WORK_OF_ART,  metadata: {  mid: /m/03bkkv,  wikipedia_url: https://en.wikipedia.org/wiki/Harry_Potter_and_the_Deathly_Hallows  },  salience: 0.30040884,  mentions: [  {   text: {   content: book,   beginOffset: -1   },   type: COMMON  }  ]  } ], ... ... language: en } 在响应中，我们可以看到 API 从句子里检测到了 6 个实体（译者：原文是 4 个，但实际运行时得到 6 个，应该是 API 有所改善）。对于每个实体，你将得到实体的 type 、关联的维基百科 URL（如果存在）、 salience （显著性）以及实体在文本中出现的位置的索引。 salience （显著性）是一个 0~1 的数字，指的是该实体对于整个文本的突出性。对于上述文段，「Harry Potter and the Deathly Hallows」具有最高的显著性（译者：原文是「Rowling」，应该是 API 有所改善），这是因为这部作品是文段所表述内容的主题。Natural Language API 也可以识别用其他方式表述的相同的实体，比如说「Rowling」、「J. K. Rowling」和「Joanne Kathleen Rowling」都指向同一个维基百科页面。 使用 Natural Language API 进行情感分析 除了提取实体，Natural Language API 还可以分析文本块的情感。JSON 请求文件与之前的那个具有相同的参数，但这次我们更改一下文本，换成一段具有更强烈情感的内容。请修改 request.json 为如下内容，或者换成你喜欢的文段。 request.json { document:{  type:PLAIN_TEXT,  content:I love everything about Harry Potter. It's the greatest book ever written. } } 然后把请求发送到 API 的 analyzeSentiment 端点。 curl https://language.googleapis.com/v1/documents:analyzeSentiment?key=${API_KEY} -s -X POST -H Content-Type: application/json --data-binary @request.json 你将得到形式如下的响应。 { documentSentiment: {  polarity: 1,  magnitude: 1.5,  score: 0.7 }, language: en, sentences: [  {  text: {  content: I love everything about Harry Potter.,  beginOffset: -1  },  sentiment: {  polarity: 1,  magnitude: 0.6,  score: 0.6  }  },  {  text: {  content: It's the greatest book ever written.,  beginOffset: -1  },  sentiment: {  polarity: 1,  magnitude: 0.8,  score: 0.8  }  } ] } 该方法将返回 polarity （极性）和 magnitude （强度）两个值（译者：原文是这两个值，但很明显现在还能看到 score 这个值）。polarity 是介于 - 1.0 ~ 1.0 之间的数值，表示文本消极或积极的程度。magnitude 是介于 0 ~ ∞的数值，与 polarity 没有关系，它表示在文本中表达的感情的权重。权重较大的文本块单是增加长度，其 magnitude 也会变大。上文的 polarity 是 100% 积极。「love」、「greatest」、「ever」这样的单词会影响 magnitude 的值。 分析语法与词性 让我们看看 Natural Language API 的第三个方法：文本注释。让我们进入文本的语言细节。annotateText 方法提供了关于文本情感元素、语法元素的完整细节。使用该方法，可以知道文本中每个词语的词性（名词、动词、形容词等），以及各个单词如何与句子中的其他单词关联（是动词的原始形式，还是用来修饰语句）。 让我们通过简单的文段来使用这个方法。JSON 文件与之前的相似，但在这里我们需要添加一项 features 来告诉 API 你想要执行语法注释。请将 request.json 替换为如下内容。 request.json { document:{  type:PLAIN_TEXT,  content:Joanne Rowling is a British novelist, screenwriter and film producer. }, features:{  extractSyntax:true } } 然后把请求发送到 API 的 annotateText 端点。 curl https://language.googleapis.com/v1/documents:annotateText?key=${API_KEY} -s -X POST -H Content-Type: application/json --data-binary @request.json 响应中，对于句子中的每一个标记（token），会返回以下对象。 { text: {  tcontent: Joanne,  tbeginOffset: -1 }, partOfSpeech: {  ttag: NOUN,  taspect: ASPECT_UNKNOWN,  tcase: CASE_UNKNOWN,  tform: FORM_UNKNOWN,  tgender: GENDER_UNKNOWN,  tmood: MOOD_UNKNOWN,  tnumber: SINGULAR,  tperson: PERSON_UNKNOWN,  tproper: PROPER,  treciprocity: RECIPROCITY_UNKNOWN,  ttense: TENSE_UNKNOWN,  tvoice: VOICE_UNKNOWN }, dependencyEdge: {  theadTokenIndex: 1,  tlabel: NN }, lemma: Joanne }, 让我们详细看看返回值。从 partOfSpeech 可以看到「Joanne」是一个名词。 dependencyEdge 包含可用于创建 依存句法分析树（依存構文木 / Dependency-based parse trees）的数据。这个语法树是一个图表，用来显示句中各单词之间的关系。上述文段的依存句法分析树如下所示。  注：使用下面的 demo ，你可以在浏览器中创建自己的依存句法分析树。 https://cloud.google.com/natural-language/ 上述返回值中， headTokenIndex 是指具有指向「Joanne」的圆弧的标记（token）的索引。文段中的每一个标记（token）都可以看作是数组中的一个单词，「Joanne」的 headTokenIndex 值是 1，表示依存句法分析树中连接了「Rowling」这个单词。 NN （修饰语句 noun compound （名词复合词）的略称）这个标签表示该词在改句子中的作用。「Joanne」是这个句子的主语「Rowling」的修饰词。 lemma 是这个单词的规范化形式。比如，run、runs、ran、running 这些单词的 lemma 都是 run 。lemma 有助于你调查大量文本中某一单词的出现频率。 其他语言的自然语言处理 Natural Language API 还支持其他很多语言的实体分析和语法注释。现在我们以日语为例，尝试进行日语文段的实体分析。 request.json { document:{  type:PLAIN_TEXT,  content:日本のグーグルのオフィスは、東京の六本木ヒルズにあります } } （译者：句意是 “日本的谷歌办公大楼在东京的六本木新城。”） 我们不必告诉 API 这个文段是什么语言，API 能够自动检测出来。我们以相同的方式发送 API 请求。 curl https://language.googleapis.com/v1/documents:analyzeEntities?key=${API_KEY} -s -X POST -H Content-Type: application/json --data-binary @request.json 你将得到形式如下的响应。 { entities: [  {  name: 日本,  type: LOCATION,  metadata: {  wikipedia_url: https://en.wikipedia.org/wiki/Japan,  mid: /m/03_3d  },  salience: 0.23854347,  mentions: [  {   text: {   content: 日本,   beginOffset: -1   },   type: PROPER  }  ]  },  {  name: グーグル,  type: ORGANIZATION,  metadata: {  mid: /m/045c7b,  wikipedia_url: https://en.wikipedia.org/wiki/Google  },  salience: 0.21155767,  mentions: [  {   text: {   content: グーグル,   beginOffset: -1   },   type: PROPER  }  ]  },  ......  ...... ], language: ja } 恭喜！ 通过此次向导，我们尝试执行了实体提取、情感分析和语法注释，学会了如何使用 Natural Language API 进行文本分析。 学到的东西  构造 Natural Language API 请求，并使用 curl 发送请求 使用 Natural Language API 提取文本中的实体，并进行情感分析 使用 Natural Language API 对文本进行语言分析（语法、词性等） 使用不同的语言构造 Natural Language API 请求 下一步  浏览 Natural Language API 文档的 向导。 尝试使用 Vision API 、Speech API 。 ",
      "url"      : "https://inforest.site/20180407-google-natural-language-api/"
    } ,
  
    {
      "title"    : "在 Windows 命令行、Linux 终端使用代理",
      "category" : "shadowsocks",
      "content": "在之前的博文中分享了如何 使用 Google 云计算引擎搭建 SS 服务器，如何 使用 SS 客户端，已经满足了科学上网的基本需求。这次将要总结在 Windows 的 CMD 窗口和 Linux 的 LX 终端 中，让 wget curl 等命令使用代理需要进行的一些配置。 Windows 命令行代理 假设你已经使用了 SS 客户端，本地 socks5 代理为 127.0.0.1:1080 在 CMD 窗口输入如下指令设置代理： set http_proxy=socks5://127.0.0.1:1080 set https_proxy=socks5://127.0.0.1:1080 set ftp_proxy=socks5://127.0.0.1:1080 测试 curl https://www.facebook.com 能得到返回结果。 取消代理命令： set http_proxy= set https_proxy= set ftp_proxy= 设置代理后只对当前命令行窗口生效，重新打开 CDM 需要再次设置。 Linux LX 终端代理 由于 Linux 下 SS 客户端仅代理 socks5 协议的流量（如果不是这个原因恳请指正）。所以想在 LX 终端使用代理，需要在 SS 的 socks5 流量前再接一个代理，允许 http、https、ftp 协议流量通过。 我们也假定本地 socks5 代理为 127.0.0.1:1080 安装 polipo Debian 下直接使用 apt 命令安装： sudo apt update sudo apt install polipo 编辑配置文件： sudo nano /etc/polipo/config 配置内容如下 # This file only needs to list configuration variables that deviate # from the default values. See /usr/share/doc/polipo/examples/config.sample # and polipo -v for variables you can tweak and further information. logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = 0.0.0.0 socksParentProxy = 127.0.0.1:1080 socksProxyType = socks5 chunkHighMark = 50331648 objectHighMark = 16384 dnsQueryIPv6 = no 按 CTRL+X，Y 保存退出。 重启 polipo 服务： sudo service polipo restart 启用代理 通过 service polipo status 命令，我们可以看到新的监听端口为8123。 因此，LX 终端启用代理的命令为： export http_proxy=http://127.0.0.1:8123 export https_proxy=http://127.0.0.1:8123 export ftp_proxy=http://127.0.0.1:8123 同样，直接输入上述命令设置的代理也是临时的。一个比较实用的方法是在~/.bashrc 文件中设置环境，之后就不需要再手动设置了。 sudo nano ~/.bashrc 在文件最后插入上述三条指令，保存。 测试 wget 指令： 小结 我对 CMD/LX 终端设置代理的出发点，是为了使用 Google 的一个 API，设置后确实能够成功使用。另外似乎对 pip 等指令也有效果，安装 python 模块时的下载速度有比较明显的提升。不过说到底只是在总结如何使用别人做好的工具，很多原理还是没有明白，如果文中有何纰漏，恳请指正。 感谢你阅读文章！ ",
      "url"      : "https://inforest.site/20180919-proxy-set-in-windows-and-linux/"
    } ,
  
    {
      "title"    : "配置澎峰 Perf-V 开发板 RISC-V 开发环境",
      "category" : "risc-v",
      "content": "实验室买了一块 Perf-V 开发板，准备开始做 RISC-V 相关的工作。 虽然澎峰直接给了配置好的虚拟机开发环境，不过因为 Ubuntu16.03 用着不顺手就想要自己把环境配出来。 看澎峰给的 SDK 目录，就是直接用的开源蜂鸟（GitHub：e200_opensource）微调来的。所以最初尝试着 git e200_opensource 重新配置一遍，结果失败，报错找不到’cc1’。尝试添加 PATH 等操作无果。  riscv-none-embed-gcc: error trying to exec ‘cc1’: execvp: No such file or directory 后尝试直接把给的环境升级到 18.04，结果出现与上述相同的问题。 那行吧，既然 sirv-e-sdk 和 Perf-V-e-sdk 都是从 SIFIVE 的 freedom-e-sdk（GitHub：freedom-e-sdk）精简来的，那我就配置整个 freedom-e-sdk 吧。 总之这几天为了搞定 Perf-V 开发板的开发环境，前前后后踩了不少坑。现在把最后结果记录如下，备忘。 克隆 freedom-e-sdk 存储库 git clone --recursive https://github.com/sifive/freedom-e-sdk.git 文件大，耗时比较长。 从源代码构建 Tools Ubuntu 需要这些 packages： sudo apt-get install autoconf automake libmpc-dev libmpfr-dev libgmp-dev gawk bison flex texinfo libtool libusb-1.0-0-dev make g++ pkg-config libexpat1-dev zlib1g-dev build： cd freedom-e-sdk make tools [BOARD=freedom-e300-hifive1] build 过程耗时很长。 替换板级支持包 freedom-e-sdk 是 SIFIVE 的开发环境，里面的板级支持包只有 sifive 系列，要用来开发 Perf-V 需要先替换 bsp 文件夹。 mv ./bsp ./bsp_bak cp -r ~/fengniao/e200_opensource/Perf-V-e-sdk/bsp ./ 可以把 Perf-V 开发板自带的几个程序顺便复制过来，方便之后测试。 mv ./software ./software_bak cp -r ~/fengniao/e200_opensource/Perf-V-e-sdk/software ./ PC 和开发板的连接 如果手头上有胡振波大大《RISC-V 处理器》这本书的同学，请翻到 P318，18.3 节提到了他们的开发板是怎么配置和 PC 连接的。基本上照做就行了，可是别忘了，他们的开发板是 Arty，虽然澎峰用的也是 A7，但是板子 ID 可不一样，所以有 2 个参数要注意了。 我这就照着书上的步骤 2 到 6 简单写一下。 步骤二：通电；点 USB 图标连接至虚拟机 步骤三：使用如下命令查看 USB 状态 lsusb Bus 001 Device 002: ID 0403:6010 Future Technology Devices International, Ltd FT2232C Dual USB-UART/FIFO IC 记下 0403:6010 这两个数。 步骤四：设置 udev rules，使 USB 能够被 plugdev group 访问 sudo nano /etc/udev/rules.d/99-openocd.rules # 写入以下内容，注意 0403 和 6010，和书上不一样 SUBSYSTEM==usb, ATTR{idVendor}==0403, ATTR{idProduct}==6010, MODE=664, GROUP=plugdev SUBSYSTEM==tty, ATTRS{idVendor}==0403, ATTRS{idProduct}==6010, MODE=664, GROUP=plugdev 步骤五：看看 USB 设备所属组，略 步骤六：把自己的用户添加到组中 sudo usermod -a -G plugdev 你的用户名 编译上传裸机 RISC-V 程序 cd freedom-e-sdk make software PROGRAM=demo_gpio BOARD=Perf-V-creative-board make upload PROGRAM=demo_gpio BOARD=Perf-V-creative-board ",
      "url"      : "https://inforest.site/20181030-per-f-risc-v-dev-env/"
    } ,
  
    {
      "title"    : "记一篇日语短文",
      "category" : "日语",
      "content": "今年（2019）7 月的 JLPT 也快要开始了，我最重要的一个 emmm… 朋友，参加这次的 N2 考试，祝愿拿到好成绩。💪😊 两年前，大三的暑假，似乎比今年的夏天更加闷热一些，我第一次参加 JLPT，也是 N2。糊里糊涂刷了不到半本红蓝宝书，外加几套真题，就这样跑去另一个校区考试了。（考试前一天有点感冒，突然发烧头痛，好在睡了一下午就好了很多，想想自己当时也是心大😂） 那次的 N2 似乎比往年真题简单一些，接近 3 小时的答题时间过得还算舒适，本科 3 年各种突击应付式的考试都快让我忘记了这种——沉浸在试题里的紧张、兴奋和满足感。 那年的最后一篇长阅读（除去海报内容理解那篇）答得很开心，难度适中，文笔优美（按我的审美来说😂）。尽管是篇鸡汤文，但也强烈地让我想去拜读一下原作，可惜当时没能把出处记下来，也没办法 Google 到。最近不知为何又突然想起这篇文章，遂找出了当年的真题卷重温一遍，顺手在这做一下记录。 ​ t人生はいつも旅になぞらえられる。 ​ t人は人生という旅路を、地図もなく歩いている。誰しもそうだし、それが人間としては自然な姿である。人生に地図などあるわけがない。なのに人は、人生の地図を持とうとするのが常だ。暗闇の中を歩くのが不安で仕様がないのだ。迷ってしまった時の恐怖を想像したくないからだ。 ​ tそして自分の地図には、人生の設計図としてわがままな道程が記されている。三十歳までには結婚し、三十五歳頃には二人の子どもをもつ。四十歳には課長になり、五十歳までには何とか部長に昇進する。 ​ t（中略） ​ t人生の地図に描かれた道を、その通りに歩むことができるなら、そんなに楽なことはない。一度も脇道にそれずに、ただまっすぐに歩くことができるのなら、人は何も悩まなくても済むだろう。そんな人生を送る人間は、おそらくこの世に一人もいない。もしそういう人間がいるのだとしたら、それはその人間の人生ではない。その人生は他人から与えられたものに過ぎない。 ​ t五十歳の時には部長になっている。これは今という現在地から見た目標であろう。目標を持つことはもちろん大切なことだ。しかし、その目標へ辿り着く道は決して一本ではない。五十歳という現在地に立った時、もし部長になっていなければどうするのか。一枚の地図しか持っていない人、あるいは決して地図を書き変えようとしない人は、そこで人生の現在地を見失ってしまうだろう。｢今、自分はこの場所にいるはずなのに、全く違う所に来てしまった｣と、そんな思いに囚われてしまい、行くべき道も見失ってしまうのである。 ​ t地図を持たない人生が不安であるならば、地図を持てばいいだけのことだ。しかし、その一枚の地図にこだわってはならない。常に現在地を確認しながら、どんどん地図を変えていくことだ。 ​ t少し脇道に入ってしまったのなら、その脇道を歩いてみればいい。無理をして元の道に戻ろうとしても、余計に迷うだけだ。脇道を歩いているうちに、いつの間にか元の道に戻ることもあるだろうし、また別の大通りに出会うこともあるだろう。人生には数え切れないほどの道があることを知っておいたほうがいい。今いる場所さえしっかりと認識できていれば、人はどんな道だって歩いていくことができるものだ。 （立松平和『人生の現在地 — まだまだ迷っているぞ、私は。』による） ",
      "url"      : "https://inforest.site/20190625-2017-07-jlpt-n2/"
    } ,
  
    {
      "title"    : "译 - 使用 iStyle 格式化 Verilog 代码",
      "category" : "verilog",
      "content": " 原文：Verilog でコード整形 安装 iStyle 可以从 GitHub 上 clone、make 自行编译出可执行文件，也可以直接下载已编译好的可执行文件。这里都给出来。 Github https://github.com/thomasrussellmurphy/istyle-verilog-formatter 可执行文件 https://github.com/0qinghao/istyle-verilog-formatter/releases/tag/v1.21_x86_64 格式化选项 以下是一些格式化时常用的选项及效果示例。 待格式化代码 reg [3:0] cnt; always @(posedge clk or posedge rst) begin if(rst) begin cnt&lt;=4'h0; end else begin cnt&lt;=cnt+4'h1; end end --style ANSI style ./iStyle --style=ansi test.v reg [3:0] cnt; always @(posedge clk or posedge rst) begin  if(rst)  begin  cnt&lt;=4'h0;  end  else  begin  cnt&lt;=cnt+4'h1;  end end  Kernighan&amp;Ritchie style ./iStyle --style=kr test.v reg [3:0] cnt; always @(posedge clk or posedge rst) begin  if(rst) begin  cnt&lt;=4'h0;  end  else begin  cnt&lt;=cnt+4'h1;  end end  GNU style ./iStyle --style=gnu test.v reg [3:0] cnt; always @(posedge clk or posedge rst) begin  if(rst)  begin  cnt&lt;=4'h0;  end  else  begin  cnt&lt;=cnt+4'h1;  end end -s ./iStyle -s2 test.v 该选项指定缩进时的空格数量，-s2 表示每次缩进使用 2 个空格（如果是 - s4 则表示每次用 4 个空格缩进）。 reg [3:0] cnt; always @(posedge clk or posedge rst) begin if(rst) begin  cnt&lt;=4'h0; end else begin  cnt&lt;=cnt+4'h1; end end -p -p 选项指定在运算符两侧插入空格。 reg [3: 0] cnt; always @(posedge clk or posedge rst) begin  if (rst)  begin  cnt &lt;= 4'h0;  end else  begin  cnt &lt;= cnt + 4'h1;  end end -P -P 选项指定在运算符和括号周围插入空格。 reg [3: 0] cnt; always @(posedge clk or posedge rst) begin  if (rst)  begin  cnt &lt;= 4'h0;  end else  begin  cnt &lt;= cnt + 4'h1;  end end 小结 虽然文中没有写，module 声明的缩进感觉并不是很好。verilog 有各种各样的代码风格，因此有一个强大的格式化程序是很有用的。 ",
      "url"      : "https://inforest.site/20190809-translate-use-istyle-to-format-verilog-code/"
    } ,
  
    {
      "title"    : "vim 在 Verilog 中的应用——生成相似代码",
      "category" : "vim",
      "content": "vim 作为最出色的文本编辑器之一，有着丰富的内置命令和各色各样的开源插件，可以说是杀鸡屠龙无所不能。 但同时 vim 的入门门槛高、学习曲线陡峭，也使得许多人或是望而生畏，或是浅尝辄止。当然也包括我，我在本科阶段第一次接触 vim 的时候，多半是带着一些“装x”的中二情感在强行用，直到最近才开始系统地学习、使用。目前使用的模式是在 VSCode 中激活 vim 键映射，虽然有很多大牛选择从零将 vim 打造成完整的 IDE，但我始终认为 vim 的强处在于文本处理，IDE 部分还是交给 VSCode 吧。 回到正题，我的主要开发语言是 Verilog，在 Verilog 代码中经常会出现一整段十分相似的代码，一般是只有数字编号不同的内容。例如在对一整组信号做打拍时，这种时候可以应用 vim 的宏功能来快速生成代码。 // s0-s15 打一拍 always @(posedge clk) begin  s0_d1 &lt;= s0;  s1_d1 &lt;= s1;  s2_d1 &lt;= s2;  s3_d1 &lt;= s3;  s4_d1 &lt;= s4;  s5_d1 &lt;= s5;  s6_d1 &lt;= s6;  s7_d1 &lt;= s7;  s8_d1 &lt;= s8;  s9_d1 &lt;= s9;  s10_d1 &lt;= s10;  s11_d1 &lt;= s11;  s12_d1 &lt;= s12;  s13_d1 &lt;= s13;  s14_d1 &lt;= s14;  s15_d1 &lt;= s15; end 预备知识 vim 宏 vim 处于 normal 模式时，按 q 1 将进入宏录制模式，vim 会录制此后所有操作到宏 1 中。当然 1 键可以任意替换，相应的宏也会录制到对应的键中。录制过程中再次按 q 将结束录制，此后可通过 @ 1 的方式执行录制的内容。和 vim 中其他命令一样，可以在其前加上任意数字 n 表示重复执行 n 次。 vim 数字自增功能 这大概是个比较冷门的功能，很少看见有人提到，但却意外地挺有用。 normal 模式下，Ctrl+a 将从当前光标处往后查找第一个数字，并且将其 +1。类似地，Ctrl+x 实现查找、-1 的功能。 生成相似代码段 应用上述两个 vim 功能，即可很方便地生成前言中一组信号打拍的代码块。基本思路是写好第一行之后：复制当前行 → 粘贴 → 找到数字自增，重复这三个操作。因此录制并重复执行的内容就是上述 3 步，具体实现过程如下。 小结  vim 宏录制 vim 中的数字自增 / 自减 找到代码中的规律，使其自动生成 最后，感谢你阅读文章。 ",
      "url"      : "https://inforest.site/20200723-vim-app-in-verilog-generate-similar-code/"
    } ,
  
    {
      "title"    : "在基于 Jekyll 的博客中加入文字的注音",
      "category" : "日语",
      "content": "越来越多的人选择将博客托管在 GitHub page 或是国内的 Coding page，通过 Jekyll 将 markdown 排版的文章渲染为静态网页。 当一个 repo 被你设定为 GitHub page 时，GitHub 将检测 repo 的目录结构，如果符合 Jekyll 的特征，例如根目录下包含 _config.yml 配置时，GitHub 将在你 push 后自动进行在线构建。 查看 repo 的提交历史将能看到构建成功的消息，如果构建失败则会收到一封邮件报告。因此理论上我们在本地甚至不需要配置 Jekyll 环境，只需要保证 push 的内容具备让 GitHub 进行在线构建的条件即可。 在线构建的局限性 将构建的任务交给 GitHub 确实十分方便，也能满足绝大部分用户的需求。但我们注意到 GitHub 提供的在线构建服务并不支持所有 Jekyll 插件，支持列表可以在这里查询：https://pages.github.com/versions/ 而很不幸的是，有一个插件对我来说是必不可少的，而它却不在支持列表中。这个插件是 jekyll-furigana，用于给文本注音，主要应用场景有： ( 日本語:にほんご )の( 漢字:かんじ )に( 振:ふ )り( 仮名:がな )を( 編集:へんしゅう )する ( 中:zhōng )( 文:wén )拼音注音 ( 奇奇怪怪的用法:😀😁🤣😑🤨😮😶 ) 幸运的是 GitHub page 支持关闭在线构建，代价则是用户必须在本地配置好 Jekyll 环境，构建、推送构建完成的静态网页到 GitHub page repo。  GitHub Pages cannot build sites using unsupported plugins. If you want to use unsupported plugins, generate your site locally and then push your site’s static files to GitHub. 配置 jekyll-furigana 插件 配置 Jekyll 插件的前提当然是配置好本地 Jekyll 环境。这里默认大家已经配置好了，如果还没配置的可以跟着官方文档做，这里只描述插件的配置方法。  在 Gemfile 中配置 jekyll-furigana 插件 source 'https://rubygems.org' gem 'github-pages', group: :jekyll_plugins gem 'tzinfo-data' gem 'jekyll-furigana', group: :jekyll_plugins   安装 $ bundle   在 Jekyll 配置文件 _config.yml 中的 plugins: 部分配置插件 plugins: - jekyll-github-metadata - rouge - jekyll-paginate - jekyll-sitemap - jekyll-feed - jemoji - jekyll-furigana   在需要启用注音功能的 markdown 博客文件头中加入 furigana: true --- layout: post title: 在基于 Jekyll 的博客中加入文字的注音 categories: [日语] furigana: true ---   修改 _layouts/post.html 中的 content 过滤器，加入 furigana 过滤器   默认情况下是修改 post.html 文件，如果你的 markdown 文件头中的 layout 属性不是 post 那就要去修改对应的文件。   使用方法 jekyll-furigana 插件有多种使用格式，可选用下面任意一种。 他们在启用了插件的页面上，都将被渲染为： (日本語:にほんご) 编译静态网页推送到 GitHub page repo 在根目录下编译静态网页，输出到 ./docs jekyll build --destination ./docs 将 docs 文件夹内的内容推送到 GitHub page repo cd ./docs git init git add -A git commit -m test furigana git remote add origin https://your-repo-url.git git push origin master 大约 2 分钟之后，即可打开网页检查插件是否生效。 最后，感谢你阅读文章。 ",
      "url"      : "https://inforest.site/20200724-add-ruby-in-jekyll-based-blog/"
    } ,
  
    {
      "title"    : "【日更】今天的日语单词",
      "category" : "日语",
      "content": "本贴不再单独更新，今后以一个单词一个新帖的形式分享每天学习的日语单词，单独放置在日语专栏内。 每天( 雾 )一个日语单词 😂 2019 年 2 月 12 日 おとしだま【お年玉】 压岁钱；新年礼物. お( 年玉:としだま )をもらう。／得到压岁钱。 お( 年玉:としだま )をあげる。／给压岁钱。 お( 年:とし)(玉:だま)(付:つ )き(年:ねん)(賀:が)はがき。／带抽奖的贺年卡。 【(説明:せつめい)】(新年:しんねん)の( 祝:いわ )いに( 子供:こども )など( 目下:めした )のものに( 贈:おく )るお( 金:かね )やプレゼントのこと。(親:おや)や( 祖父母:そふぼ)、(親戚:しんせき )の(叔父:おじ)・( 叔母:おば )などからもらうお( 年玉:としだま )を、(子供:こども)たちは( 非常:ひじょう )に(楽:たの)しみにしている。 【(中訳:ちゅうやく)】为祝贺新年，由长辈给孩子、晚辈的钱或者礼物。临近新年时，孩子们都盼望着能从父母、祖父母和其他长辈亲戚那里得到压岁钱。 2019 年 2 月 13 日 かぜ【風邪】 感冒；伤风；流感. (風邪:かぜ)を( 引:ひ )く。／患感冒；伤风；着凉。 (風邪:かぜ)が( 治:なお )る。／感冒好了。 (風邪:かぜ)がなかなか( 抜:ぬ )けない。／感冒老也不好。 (風邪:かぜ)で( 会社:かいしゃ )を(休:やす)む。／因感冒不去公司上班。 (風邪:かぜ )がはやっている。／感冒很流行。 (弟:おとうと)の( 風邪:かぜ )がうつったようだ。／弟弟的感冒好像传染我了。 【(慣用句:かんようく)】 (風邪:かぜ)は( 万病:まんびょう )の(元:もと)。／伤风感冒是万病之源。 2019 年 2 月 14 日 じゃぐち【蛇口】 水龙头. (蛇口:じゃぐち)を( 締:し )める。／关上水龙头。 (蛇口:じゃぐち )をあける。／打开水龙头。 【大约 10 年前的 N1 真题，选择汉字的读法】 蛇口:ら( 直接水:ちょくせつみず )を(飲:の)む。 ①じゃぐち ②びぐち ③びこう ④じゃこう 2019 年 2 月 15 日 ナシ【梨】 梨；梨子；梨树. このナシは( 甘:あま )くて( 美味:おい )しい。／这种梨味道香甜。 (鳥取産:とっとりさん )の( ナシ:なし)。／鸟取县出产的梨子。 （(鳥取県:とっとりけん)：日本本州西部的一个县，是日本所有( 都道府県:とどうふけん )中人口最少的一个，盛产梨。） 【(慣用句:かんようく)】 ナシのつぶて。／杳无音信；石沉大海。 『(梨:なし)』和『(無:な )し』读音相同； (礫:つぶて)：小石子； 『ナシのつぶて』字面意思是 “扔出去的小石子（找不回来）”，玩了个同音的文字游戏，写成『(梨:なし )の(礫:つぶて)』。 【例】(何遍:なんべん)か( 催促:さいそく )したが、(梨:なし)の( 礫:つぶて )だ。／我一再催促，但都杳无音信。 2019 年 2 月 16 日 けんきゅうせい【研究生】 无中文释义，类似考研预科班. 【説明】 (留学生:りゅうがくせい)の( 場合:ばあい)、(最初:さいしょ )の(半年:はんとし)から( 一年程度:いちねんていど )を(研究生:けんきゅうせい)として( 指導教員:しどうきょういん )の(指導:しどう)の( 下:もと )で(研究:けんきゅう)を( 行:おこな )ったり、(日本語:にほんご)を( 勉強:べんきょう )をしたりして( 過:す )ごし、(大学院:だいがくいん)への( 入学:にゅうがく )の(準備:じゅんび)をするという( 事例:じれい )がよく( 見:み )られます。／留学生最初的半年到一年时间是在指导员的指导下作为(研究生:けんきゅうせい)，一边进行研究一边学习日语度过的，以准备研究生院的入学考试。 いんせい【院生】 研究生. (教授:きょうじゅ)の( 指導:しどう )の(下:もと)で( 院生:いんせい )が(論文:ろんぶん)を( 執筆:しっぴつ )している。／在教授的指导下研究生执笔写论文。 しゅうし【修士】 硕士. (大学院:だいがくいん)の( 修士課程:しゅうしかてい )を(終:お)えて( 博士:はかせ )へ(進:すす)む。／读完硕士继续读博士。  2019 年 2 月 17 日 ごい【語彙】 词汇. (語彙:ごい)が( 豊:ゆた )かだ〔(乏:とぼ)しい〕。／词汇很丰富〔贫乏〕。 ぶんぽう【文法】 语法. (英文法:えいぶんぽう)の( 授業:じゅぎょう )をサボった。／旷了英语语法课。 (彼:かれ)の( 書:か )く(英語:えいご)は( 文法:ぶんぽう )がでたらめだ。／他写的英语，语法乱七八糟。 どっかい【読解】 阅读理解. (多:おお)くの( 本:ほん )を(読:よ)み、(読解力:どっかいりょく)をつける。／多读书，从而提高阅读理解能力。 ちょうかい【聴解】 听力. 2019 年 2 月 18 日 なさけ【情け】 慈悲；同情；人情. (情:なさ )けのある( 人:ひと)。／有同情心的人；乐善好施的人。 (人:ひと)の( 情:なさ )けが( 身:み )にしみる。／感受到了人情温暖。 あいつに( 情:なさ )けをかけてはいけない。／对那个人可不能怜悯。 【(慣用句:かんようく)】 (悪女:あくじょ)の( 深情:ふかなさ )け。／丑女多情〔美女薄情〕；令人为难的好意。 (旅:たび)は( 道連:みちづ )れ､(世:よ)は( 情:なさ )け。／行要好伴，住要好邻；行旅要伴侣，处世要互助。  2019 年 2 月 19 日 うしなう【失う】 失去；错过；迷失. (自信:じしん)を( 失:うしな )う。／失去信心。 バランスを( 失:うしな )う。／失去平衡。 (最後:さいご)のチャンスを( 失:うしな )った。／错过了最后一次机会。 (山:やま)の( 中:なか )で(方角:ほうがく)を( 失:うしな )った。／在山里迷失了方向。 (毎:まい)(年:とし)(交:こう)(通:つう)(事:じ)(故:こ)で( 命:いのち )を(失:うしな)う( 人:ひと )は(一万人:いちまんにん)を( 超:こ )える。／每年因交通事故丧命的人超过一万人。 (色:いろ)を( 失:うしな )う。／〔受到惊吓而〕失色。 (客:きゃく)(車:しゃ)が( 暴:ぼう)(走:そう )し､(誰:だれ)もが( 色:いろ )を(失:うしな)った。／客车失控了，每个人都大惊失色。  2019 年 2 月 20 日 やくそく【約束】 约定；协定；说好. (約:やく)(束:そく)を( 守:まも )る。／守约。 (約:やく)(束:そく)を( 破:やぶ )る。／失约。 (口:くち)(約:やく)(束:そく)では( 危:あぶ )ない､(契:けい)(約:やく)(書:しょ)を( 交:か )わしたほうがいい。／口头承诺是靠不住的，还是签个合同比较好。 (約:やく)(束:そく)した( 以:い)(上:じょう)､(必:かなら )ず(来:く)るだろう。／既然约好了，肯定会来。 (無:む)(言:ごん)の( 約:やく)(束:そく )を(取:と)り( 交:か )わす。／（无形之中）达成了默契。 まどろみの約束 2019 年 2 月 21 日 凪【なぎ】 风平浪静〔体言（也就是名词）〕. (朝:あさ)(凪:なぎ)。／早晨海上风平浪静。 (凪:なぎ)になってから( 船:ふね )を(出:だ)す。／等到风平浪静后再出航。 凪ぐ【なぐ】 风平浪静；(风 )停〔用言（也就是动词）〕. (海:うみ)が( 凪:な )いできた。／大海平静了。 (昼:ひる)ごろになると( 風:かぜ )が(急:きゅう)にないだ。／到了午间风突然平息了。  2019 年 2 月 23 日 きのこ ･ キノコ 蘑菇（一般不写汉字，汉字写出来是( 木:き )の( 子:こ )･( 茸:きのこ )）. キノコ( 狩:が )りに( 行:い )こう。／去采蘑菇吧。 きのこが( 生:は )えた。／长蘑菇了。 きのこ( 雲:ぐも)。／蘑菇云。  2019 年 2 月 25 日 さくらぜんせん【桜前線】 樱花（由南向北）开放的前锋. 【(説明:せつめい)】(気象庁:きしょうちょう)による( 桜:さくら )の(開花予想図:かいかよそうず)に( 見:み )られるもの。ソメイヨシノを( 対象:たいしょう )としており、(同:おな)じ( 日:ひ )に(開花:かいか)する( 地点:ちてん )を(線:せん)で( 結:むす )ぶ。(日本:にほん)は( 南北:なんぼく )に(長:なが)いため、(三月末:さんがつすえ)から( 九州:きゅうしゅう )より( 北上:ほくじょう )を(始:はじ)め、(五月初:ごがつはじ)めに( 北海道:ほっかいどう )に(至:いた)る。(開花予想:かいかよそう)は( 花見:はなみ )や(旅行:りょこう)をする( 人:ひと )たちに( 特:とく )に(注目:ちゅうもく)される。 【(中:ちゅう)(訳:やく)】这个词出自气象厅绘制的樱花开花时间预报图。开花预报以 “染井吉野樱花” 为代表，在地图上把同时开花的地点用线条连接起来，从而形成由南向北推移的“樱花前锋”。日本国土南北跨度较大，每年三月底，樱花前锋从九州开始北上，一直要到五月初才能到达北海道。开花预报尤其受到赏花人和旅行者的关注。 ばいうぜんせん【梅雨前線】 梅雨前锋. おんだんぜんせん【温暖前線】 暖锋. かんれいぜんせん【寒冷前線】 冷锋. 2019 年 2 月 27 日 いなずま【稲妻】 闪电. （(古代:こだい)、(稲:いね)の( 結実時期:けつじつじき )に(雷:かみなり)が( 多:おお )いことから、(雷光:らいこう)が( 稲:いね )を(実:みの)らせるという( 信仰:しんこう )があった。／在古代，因为稻子结果的时期经常打雷，所以人们认为雷光与稻子交配使其结果，故称闪电为(稲:いな)(妻:ずま)。） (稲妻:いなずま)が( 走:はし )り、(雷鳴:らいめい)がとどろいた。／电光闪闪，雷声隆隆。 (稲妻:いなずま)のような( 速:はや )さで( 身:み )を(隠:かく)した。／飞快地躲了起来。 (稲妻形:いなずまかたち)。／闪电形；之字形。  2019 年 2 月 28 日 みのる【実る】 结果；有成果. (今:ことし)年はイネがよく( 実:みの )った。／今年稻子收成好。 ブドウがたわわに( 実:みの )っている。／串串葡萄压弯了树枝。 (長:なが)(年:ねん)の( 努:ど)(力:りょく )がやっと( 実:みの )った。／多年的努力终于有了成果。 (実:みの)るほど( 頭:あたま )の(下:さ)がる( 稲:いな)(穂:ほ )かな。／粒满穗垂，知博益谦；越是成熟越谦虚。  2019 年 3 月 2 日 きしべ【岸辺】 岸边. (岸:きし)(辺:べ)を( 散:さん)(策:さく )する。／在岸边散步。 (岸:きし)(辺:べ)にボートを( 着:つ )ける。／把小船靠在岸边。 (波:なみ)が( 次:つぎ )から( 次:つぎ )へと( 岸:きし)(辺:べ )に(打:う)ち( 返:かえ )す。／波浪一波接一波地冲向岸边。  2019 年 3 月 4 日 やきもち【焼き餅】 烤年糕；吃醋；嫉妒. つまらないことにもすぐやきもちを( 焼:や )く。／一点点小事也马上忌妒起来。 やたらにやきもちを( 焼:や )く。／爱吃醋。 (妻:つま)の( 男:おとこ)(友:とも)(達:だち )にやきもちを( 焼:や )く。／嫉妒妻子的男性朋友。 (母:はは)(親:おや)をとられた( 気:き )がして( 兄:あに )は(赤:あか)ん( 坊:ぼう )の(弟:おとうと)にやきもちを( 焼:や )いた。／哥哥觉得母亲被抢走了，嫉妒起还在襁褓中的弟弟来。  2019 年 3 月 4 日 とうとい【尊い】 宝贵；高贵. (尊:とうと )い( 経験:けいけん)。／宝贵的经验。 (地震:じしん)は( 多:おお )くの( 尊:とうと )い(人命:じんめい)を( 奪:うば )った。／地震夺去了许多宝贵的生命。 (病気:びょうき)になって( 健康:けんこう )の(尊:とうと)さを( 知:し )った。／得病以后才知道健康的宝贵。 (尊:とうと )い( 身分:みぶん)。／高贵的身份。  2019 年 3 月 8 日 しかる【叱る】 责备；训斥；忠告. (先生:せんせい)に( 叱:しか )られる。／被老师批评了。 (私:わたし)は( 子供:こども )の(時:とき)いたずらっ( 子:こ )だったので、よく( 叱:しか )られた。／我小时候因为是个小淘气，所以时常挨骂。 (彼:かれ)は( 部下:ぶか )を(叱:しか)るとき、(少:すこ)しも( 容赦:ようしゃ )しない。／他批评起部下来毫不留情。 (何:なん)べんも( 叱:しか )ったのに、(彼:かれ)はどうしても( 改:あらた )めようとしない。／说过他好几次，他就是不改。  2019 年 3 月 9 日 たどる【辿る】 沿着（道路）；探索；趋于. (家:いえ)(路:じ)を( 辿:たど )る。／走上回家的路。 (記:き)(憶:おく)を( 辿:たど )りながら( 思:おも )い(出:で)の( 場:ば)(所:しょ )を(探:さが)した。／凭着记忆寻找印象中的故地。 (中:ちゅう)(国:ごく)(文:ぶん)(明:めい)の( 源:げん)(流:りゅう )をたどる。／追溯中国文明的起源。 (売:う)り( 上:あ )げが( 下:か)(降:こう)(線:せん )を(辿:たど)る。／销售额下降。  2019 年 3 月 11 日 ちゅうこ【中古】 二手，半旧. (中:ちゅう)(古:こ)(品:ひん)。／二手货。 (中:ちゅう)(古:こ)のレコードを( 買:か )う。／买旧唱片。 あの( 中:ちゅう)(古:こ)(車:しゃ )はいい( 値:あたい )で(売:う)れた。／那辆二手车卖了个好价钱。 やっぱり( 中:ちゅう)(古:こ )ではなく( 新:しん)(品:ぴん )のギターが( 欲:ほ )しい。／我还是想要新的吉他，不想要旧的。  2019 年 3 月 12 日 おとなしい【大人しい】 老实；规规矩矩；温顺；雅致. おとなしい( 子供:こども)。／老实的孩子。 このイヌはおとなしい。／这只狗很温顺。 (敵:てき)はおとなしく( 銃:じゅう )を(捨:す)てて( 降:こう)(参:さん )した。／敌人乖乖地缴枪投降了。 この( 柄:がら )はおとなしい。／这种纹样很素雅。  2019 年 3 月 16 日 はれる【晴れる】 晴；（云雾）消散；（疑虑）消散；（心情）舒畅. (明:あ)(日:す)は( 晴:は )れでしょう。／明天该放晴了吧。 (空:そら)が( 晴:は )れて( 星:ほし )がよく( 見:み )える。／天空晴朗，星星清晰可见。 (晴:は)れた( 日:ひ )にはここから( 富:ふ)(士:じ )の(全:ぜん)(景:けい)が( 一:いち)(望:ぼう )できる。／天晴的时候从这儿可以望见富士山的全景。 (真:しん)(犯:はん)(人:にん)(逮:たい)(捕:ほ)で、やっと( 私:わたし )の(疑:ぎ)(惑:わく)が( 晴:は )れた。／真正的犯人被捕后，对我的嫌疑才消除了。 (心:こころ)のもやもやがまだ( 晴:は )れない。／心里的疙瘩还没解开。  2019 年 3 月 18 日 さび【錆】 铁锈；恶果. ナイフの( 錆:さび )を(落:お)とす。／把小刀上的绣去掉。 この( 包丁:ほうちょう )は(長:なが)い( 間使:あいだつか )ってなかったから( 錆:さび )だらけだ。／这把菜刀由于长期没有使用，刀上尽是锈。 (身:み)から( 出:で )た(錆:さび)。／自食其果；咎由自取。 (自慢:じまん)の( 腕:うで )もすっかり( 錆:さび )ついてしまった。／拿手的技艺也完全荒废了。  2019 年 3 月 19 日 はじける【弾ける】 裂开；爆开；迸发. クリのいがが( 弾:はじ )ける。／栗子的毛壳绷开了。 バブルが( 弾:はじ )ける。／泡沫经济崩溃。 (彼:かれ)はとても( 太:ふと )っていて、(洋:よう)(服:ふく)が( 弾:はじ )けそうだ。／他太胖了，西服都快要绽开了。 (笑:わら)いが( 弾:はじ )ける。／迸发出笑声。 (弾:はじ)けそうな( 若:わか )さ。／迸发的青春活力。  2019 年 4 月 8 日 ざわめく【騒めく】 人声嘈杂；（树叶等）沙沙作响 (町:まち)(中:なか)がその( 知:し)(らせ:せ )でざわめいていた。／全城因为这个消息轰动了起来。 (新婦:しんぷ)のお( 色直:いろなお )しに( 会場:かいじょう )がざわめいた。／新娘换了衣服走进来，会场立刻一片嘁嘁喳喳声。 (質問者:しつもんしゃ)の( 発言:はつげん )に(一瞬会場:いっしゅんかいじょう)がざわめいた。／提问者的发言使会场喧哗了一阵。  2019 年 4 月 16 日 あらそう【争う】 争夺；对抗；争辩； (一:いっ)(刻:こく)を( 争:あらそ )うときだ。／是分秒必争的时候。 (住:じゅう)(民:みん)たちは( 日:にっ)(照:しょう)(権:けん )のことで( 役:やく)(所:しょ )と(激:はげ)しく( 争:あらそ )った。／因日照权的问题，居民们同有关部门进行了激烈的争论。 (年:とし)は( 争:あらそ )えない。／岁月不饶人；要服老。 (血:ち)は( 争:あらそ )えない。／虎父无犬子；血浓于水。 (顔:かお)も( 声:こえ )もそっくりで、(流石:さすが)に( 血:ち )は(争:あらそ)えない。／长相、声音都如出一辙，到底是一家人。  2019 年 4 月 22 日 はかない【儚い・果敢ない・果敢無い】 短暂；虚幻无常； (人:ひと)の( 一生:いっしょう )ははかないものだ。／人的一生是短暂无常的；人生如梦。 はかない( 生:しょう)(涯:がい )を(閉:と)じる。／结束了短暂的一生。 (儚:はかな)い( 最:さい)(期:ご )を(遂:と)げる。／死得可怜。  2019 年 4 月 26 日 てどり【手取り】 （扣除税金保险等费用后的）净收入. (税:ぜい)(引:び)き( 後:ご )の(手:て)(取:ど)り(金:きん)(額:がく)。／扣除税款后的纯收入。 (私:わたし)の( 給:きゅう)(料:りょう )はいろいろな( 手:て)(当:あて )まで( 含:ふく )めて( 月:つき )に(手:て)(取:ど)り( 30:さんじゅう)(万:まん)(円:えん )です。／我的工资加上各种补贴最后到手的差不多每个月 30 万日元。 てとりあしとり【手取り足取り】 手把手；耳提面命. じっくりと( 手:て)(取:と )り(足:あし)(取:と)り( 指:し)(導:どう )する。／手把手地耐心指导。 (彼:かれ)の( 技:ぎ)(術:じゅつ )は(私:わたし)が( 手:て)(取:と )り(足:あし)(取:と)り( 教:おし )えてやったのだ。／他的技术是我手把手教的。  2019 年 4 月 27 日 すきとおる【透き通る】 透明；清澈. この( 池:いけ )の(水:みず)は( 透:す )き(通:とお)っている。／这个池子的水清澈见底。 この( 生:き)(地:じ )は(薄:うす)くて( 透:す )き(通:とお)って( 見:み )える。／这块布薄得透明。 (北:きた)(国:ぐに)の( 人:ひと )は(透:す)き( 通:とお )るような( 白:しろ )い(肌:はだ)をしている。／北方人皮肤白皙透明。 あの( 歌:か)(手:しゅ )は(透:す)き( 通:とお )った( 声:こえ )が(魅:み)(力:りょく)だ。／那个歌手清脆的歌声很有魅力。  2019 年 4 月 28 日 こよみ【暦】 日历；历法. (暦:こよみ)の( 上:うえ )では( 春:はる )だが、まだ( 随:ずい)(分:ぶん)(寒:さむ )い。／论节气已经到了春天，但还是很冷。 (掛:か )け( 暦:こよみ)／挂历 (卓:たく)(上:じょう)(暦:こよみ)／台历  2019 年 5 月 7 日 わく【湧く】 涌出；涌现；产生. (温泉:おんせん)が( 湧:わ )く。／温泉涌出。 あなたのお( 話:はなし )を(聞:き)いて( 希望:きぼう )が(湧:わ)いてきた。／听了你的话，我产生了希望。 いいアイデアが( 突:とつ)(然:ぜん)(湧:わ )いた。／突然想出个好主意。 (歴史:れきし)に( 興味:きょうみ )がわく。／对历史产生兴趣。 (東:ひがし)の( 空:そら )に(雷雲:らいうん)がわく。／东方的天空中涌现出雷云。  2019 年 5 月 8 日 カバー 外皮；罩子；弥补；填补. (本:ほん)にカバーを( 掛:か )ける。／给书包一个书皮。 (他部門:ほかぶもん)の( 収益:しゅうえき )で(赤字:あかじ)をカバーする。／拿其他部门的收益来抵消赤字。 お( 互:たが )いの( 欠点:けってん )をカバーしあう。／互相弥补短处。 (新人:しんじん)を( 選抜:せんばつ )して( 卒業:そつぎょう )したの( 欠員:けついん )をカバーする。／遴选新人填补毕业运动员的空缺。  2020 年 2 月 25 日 しゅっきん【出勤】 上班. 毎朝 9 時に出勤する。／每天早上 9 点上班。 わが社はフレックスタイム制で、出勤時間は決まっていない。／我们公司是弹性工作制，上班时间不固定。 (混雑解消:こんざつかいしょう)のため( 時差出勤:じさしゅっきん )をお願いします。／为解除拥挤，请错开时间上班。 今度の日曜は休日出勤だ。／这个星期天要加班。 彼の課は 10 時までに社に行けばいいんだから( 重役出勤:じゅうやくしゅっきん )だよ。／他们科只要 10 点以前能到公司就行，属于干部待遇。 重役出勤／像大人物一样姗姗来迟  2020 年 2 月 26 日 だそく【蛇足】 蛇足，多余. 蛇足を加える。／画蛇添足。 ちょっと蛇足を申し上げますと…／我稍微说句多余的… 蛇足とは思いますが一言つけ加えさせていただきます。／我知道我是画蛇添足，但是我还要说一句。  2020 年 2 月 27 日 つる【釣る】 钓（鱼），引诱. 大きな魚を釣った。／钓上了大鱼。 海老で( 鯛:たい )を釣る。／用小虾钓大鱼；一本万利。 子供を金で釣るな。／别用钱去引诱孩子。 (安値商品:やすねしょうひん )で客を釣る。／靠廉价商品招揽顾客。 トンボを釣る。／（用囮子）引蜻蜓。 うまく釣られた。／轻易上了当。 釣られて笑う。／跟着别人笑。 (甘言:かんげん )で人をつる。／用动听的话引诱人。  2020 年 3 月 19 日 かどまつ【門松】 门松（新年门前装饰的松枝）. 門松を立てる。／在门前装饰上门松。  2020 年 3 月 23 日 くちぐるま【口車】 花言巧语，甜言蜜语. 人の口車に乗る。／被别人的花言巧语所骗；上当。 人を口車に乗せる。／使人上当；用花言巧语骗人。 あの女の口車に乗るなよ。／别上她的当。 セールスマンの口車に乗せられてこんな高い( 品物:しなもの )を買ったしまった。／被那个推销员的花言巧语给骗了，买下了这么贵的东西。  2020 年 3 月 24 日 かこみ【囲み】 周围；用线圈起来的专栏（报道，读物），花边文字；包围. 囲み記事。／专栏；花边新闻。 敵の囲みを破る。／突破敌人的包围。 囲みを( 解:と )く。／解围。 囲みを破って逃げる。／冲破包围逃走。  2020 年 4 月 22 日 かげぼうし【影法師】 （照在地上、窗上的）人影. (夕日:ゆうひ)が長い影法師を( 映:うつ )す。／夕阳照出一个长长的人影。  2020 年 4 月 28 日 しよう【仕様】 方法；做法. なんともしようがない。／毫无办法。 他に何とか仕様がありそうなものなのに。／（本来）还会有其他什么办法来着。 (住所:じゅうしょ )がわからないので連絡のしようがない。／因为不知道住处，所以无法联系。 どうしようもないやつ。／不可救药的家伙。 (比較:ひかく )のしようがない。／没法比。 寒くてしようがない。／冻得受不了。 (今更:いまさら )助けてくれと言われても私にはどうしようもない。／事到如今要我帮忙，我也帮不上了。  2020 年 4 月 30 日 ありか【在り処】 所在；下落. 宝の在り処を探す。／寻找宝藏的所在。 犯人の在り処を突き止めた。／查明了犯人的下落。 金の在り処がわからない。／不知道钱在哪里。 病因の在り処を分析する。／分析病因所在。  2020 年 5 月 1 日 まねく【招く】 招待；招聘；招致；招呼. パーティーに客を招く。／邀请客人参加晚会。 (政治家:せいじか)や芸能人などが( 招:まね )かれて出席した。／政治家和演员等也应邀出席。 関係者を招いて( 懇親会:こんしんかい )を開く。／邀请相关人士召开联谊会。 退任した教授の( 後任:こうにん )として招かれた。／被聘为退休教授的后任。 その発言は誤解を招く。／那个发言会引起误解。 上海から一流のコックを招いて( 本場:ほんば )の味を再現する。／从上海聘请了超级厨师来，做出味道地道的菜肴。 雨やどりをしていたら、家の人が私に中に入るようにと手で招いてくれた。／正避雨时，屋里的人招手让我进去。  2020 年 5 月 5 日 しのぶ【忍ぶ】 躲开；忍受. (人目:ひとめ )を忍んで恋人に会う。／躲开别人的眼睛和男友〔女友〕幽会。 (世:よ)を忍ぶ( 仮:かり )の(姿:すがた)。／掩人耳目的假象。 生活上の様々な不便を忍ぶ。／忍受生活中的种种不便。 (木陰:こかげ )に忍。／躲在树后。 (夜:よ )ごとに忍んで来る。／每夜悄悄地来。 忍び難い。／难以忍受。 彼を( 正視:せいし )するに忍びなかった。／不忍正视他。 世を忍ぶ。／隐居。  2020 年 5 月 6 日 おもかげ【面影】 音容；模样；痕迹. 母には美人だった若いころの面影がまだ残っている。／妈妈还残留着几分年轻时的美丽。 (弟:おとうと )は今も別れた恋人の面影を追っている。／弟弟至今还在追寻着已分别的恋人的音容〔痕迹〕。 面影を( 偲:しの )ぶ。／缅怀故容。 彼の面影がまだ目に浮かぶようだ。／他的模样仿佛还在眼前。 城は昔の面影を全く( 留:とど )めていない。／城堡已面目全非。  2020 年 5 月 10 日 わずか【僅か】 一点点；稍微；好不容易才. あんなに働いたのにわずかな金にしかならなかった。／那么拼命工作居然才挣了这么一点钱。 可能性はごくわずかだが、全くないわけではない。／可能性虽然很小，但也不是完全没有。 彼女だけがわずかに( 難:なん )を(免:まぬが)れた。／只有她幸免遇难。 僅か 500 円で手に( 入:い )れる。／仅用五百日元就买到了手。 その橋の( 周辺:しゅうへん )だけがわずかに自然を( 残:のこ )している。／只有那个桥梁周围是唯一留下的一点自然。  2020 年 7 月 9 日 せんこう【選考】 (～する)选拔；评审；评选.  新入社員を選考する。／选拔新职员。 僕の作品は選考に( 漏:も )れた。／我的作品落选了。 選考( 委員会:いいんかい )／评审委员会 書類選考はパスした。／通过了书面材料评审。 この( 競技会:きょうぎかい )は代表選考会を( 兼:か )ねている。／这场比赛同时也是代表选拔赛。  2020 年 7 月 10日 かねる【兼ねる】 兼任；难以；很可能会.  その家の( 台所:だいどころ )は食堂を兼ねている。／那家的厨房兼做饭厅。 ( 趣味:しゅみ )と( 実益:じつえき )を兼ねる。／又合爱好又有实利。 今回の中国旅行は仕事も兼ねている。／这次去中国旅行还兼带着工作。 この問題は私にはわかりかねます。／我实在弄不明白这个问题。 お引き受けいたしかねます。／难以承担。 あいつならそういうことをしかねない。／他能做出这种事来。 誤解を( 招:まね )き兼ねない。／可能会引起误解。  2020 年 7 月 11 日 くじける【挫ける】 沮丧；挫伤.  手がくじける。／手挫伤了。 気がくじける。／灰心了。 ( 度重:たびかさ )なる失敗にもくじけない。／百折不挠。 夫は一度ぐらいの失敗でくじけるような人ではない。／我丈夫不是那种失败了一次就气馁的人。  2020 年 7 月 12 日 みぎり【砌】 时候；… 之际（書）；檐下铺的石头.  ( 三伏:さんぷく )のみぎり。／三伏之际。 ( 厳寒:げんかん )のみぎり。／严寒之际。 ( 酷暑:こくしょ )のみぎり。／酷暑之际。  2020 年 7 月 16 日 うきよ【浮世】 尘世；人生；流行的；好色的.  浮世の( 煩:わずら )わしさ。／尘世的苦恼。 浮世の儚さ。／人生的变幻无常。 浮世を離れた( 山里:やまさと )。／远离尘世的山村。 浮世を捨てる。／抛开尘世；死亡。 浮世離れ。／不通世俗。 浮世男。／时髦的人物；好色的男子。 浮世の絆。／尘世的羁绊。 浮世は夢。／浮生若梦。 ままにならぬが浮世の( 常:つね )。／难如心愿人世之常；不如意事十之八九。  2020 年 7 月 17 日 とほう【途方】 方法；道理；条理.  途方に( 暮:く )れる。／走投无路。 両親に( 死:し )なれて、彼女は途方に暮れてしまった。／失掉了双亲，他不知该如何好了。 この絵には途方もなく高い値段がついている。／这幅画价格高得令人咋舌。 途方もなく安い。／便宜得出奇。 あの人は時々途方もないことを言い出す。／他常常说出一些不着边际的话来。 途方もない時間にやってきた。／深更半夜〔大清早上〕跑来了；不合常情的时候来了。 途方も無い計画を立てる。／定异想天开的计划。  ",
      "url"      : "https://inforest.site/20190212-one-japanese-word-a-day/"
    } ,
  
    {
      "title"    : "【每日一词】お年玉",
      "category" : "日语",
      "content": "おとしだま【お年玉】 压岁钱；新年礼物. お( 年玉:としだま )をもらう。／得到压岁钱。 お( 年玉:としだま )をあげる。／给压岁钱。 お( 年:とし)(玉:だま)(付:つ )き(年:ねん)(賀:が)はがき。／带抽奖的贺年卡。 【(説明:せつめい)】(新年:しんねん)の( 祝:いわ )いに( 子供:こども )など( 目下:めした )のものに( 贈:おく )るお( 金:かね )やプレゼントのこと。(親:おや)や( 祖父母:そふぼ)、(親戚:しんせき )の(叔父:おじ)・( 叔母:おば )などからもらうお( 年玉:としだま )を、(子供:こども)たちは( 非常:ひじょう )に(楽:たの)しみにしている。 【(中訳:ちゅうやく)】为祝贺新年，由长辈给孩子、晚辈的钱或者礼物。临近新年时，孩子们都盼望着能从父母、祖父母和其他长辈亲戚那里得到压岁钱。 ",
      "url"      : "https://inforest.site/20190212-tango-otosidama/"
    } ,
  
    {
      "title"    : "【每日一词】風邪",
      "category" : "日语",
      "content": "かぜ【風邪】 感冒；伤风；流感. (風邪:かぜ)を( 引:ひ )く。／患感冒；伤风；着凉。 (風邪:かぜ)が( 治:なお )る。／感冒好了。 (風邪:かぜ)がなかなか( 抜:ぬ )けない。／感冒老也不好。 (風邪:かぜ)で( 会社:かいしゃ )を(休:やす)む。／因感冒不去公司上班。 (風邪:かぜ )がはやっている。／感冒很流行。 (弟:おとうと)の( 風邪:かぜ )がうつったようだ。／弟弟的感冒好像传染我了。 【(慣用句:かんようく)】 (風邪:かぜ)は( 万病:まんびょう )の(元:もと)。／伤风感冒是万病之源。 ",
      "url"      : "https://inforest.site/20190213-tango-kaze/"
    } ,
  
    {
      "title"    : "【每日一词】蛇口",
      "category" : "日语",
      "content": "じゃぐち【蛇口】 水龙头. (蛇口:じゃぐち)を( 締:し )める。／关上水龙头。 (蛇口:じゃぐち )をあける。／打开水龙头。 【大约 10 年前的 N1 真题，选择汉字的读法】 蛇口:ら( 直接水:ちょくせつみず )を(飲:の)む。 ①じゃぐち ②びぐち ③びこう ④じゃこう ",
      "url"      : "https://inforest.site/20190214-tango-jyaguti/"
    } ,
  
    {
      "title"    : "【每日一词】梨",
      "category" : "日语",
      "content": "ナシ【梨】 梨；梨子；梨树. このナシは( 甘:あま )くて( 美味:おい )しい。／这种梨味道香甜。 (鳥取産:とっとりさん )の( ナシ:なし)。／鸟取县出产的梨子。 （(鳥取県:とっとりけん)：日本本州西部的一个县，是日本所有( 都道府県:とどうふけん )中人口最少的一个，盛产梨。） 【(慣用句:かんようく)】 ナシのつぶて。／杳无音信；石沉大海。 『(梨:なし)』和『(無:な )し』读音相同； (礫:つぶて)：小石子； 『ナシのつぶて』字面意思是 “扔出去的小石子（找不回来）”，玩了个同音的文字游戏，写成『(梨:なし )の(礫:つぶて)』。 【例】(何遍:なんべん)か( 催促:さいそく )したが、(梨:なし)の( 礫:つぶて )だ。／我一再催促，但都杳无音信。 ",
      "url"      : "https://inforest.site/20190215-tango-nasi/"
    } ,
  
    {
      "title"    : "【每日一词】研究生",
      "category" : "日语",
      "content": "けんきゅうせい【研究生】 无中文释义，类似考研预科班. 【説明】 (留学生:りゅうがくせい)の( 場合:ばあい)、(最初:さいしょ )の(半年:はんとし)から( 一年程度:いちねんていど )を(研究生:けんきゅうせい)として( 指導教員:しどうきょういん )の(指導:しどう)の( 下:もと )で(研究:けんきゅう)を( 行:おこな )ったり、(日本語:にほんご)を( 勉強:べんきょう )をしたりして( 過:す )ごし、(大学院:だいがくいん)への( 入学:にゅうがく )の(準備:じゅんび)をするという( 事例:じれい )がよく( 見:み )られます。／留学生最初的半年到一年时间是在指导员的指导下作为(研究生:けんきゅうせい)，一边进行研究一边学习日语度过的，以准备研究生院的入学考试。 いんせい【院生】 研究生. (教授:きょうじゅ)の( 指導:しどう )の(下:もと)で( 院生:いんせい )が(論文:ろんぶん)を( 執筆:しっぴつ )している。／在教授的指导下研究生执笔写论文。 しゅうし【修士】 硕士. (大学院:だいがくいん)の( 修士課程:しゅうしかてい )を(終:お)えて( 博士:はかせ )へ(進:すす)む。／读完硕士继续读博士。 ",
      "url"      : "https://inforest.site/20190216-tango-kenkyuusei/"
    } ,
  
    {
      "title"    : "【每日一词】語彙",
      "category" : "日语",
      "content": "ごい【語彙】 词汇. (語彙:ごい)が( 豊:ゆた )かだ〔(乏:とぼ)しい〕。／词汇很丰富〔贫乏〕。 ぶんぽう【文法】 语法. (英文法:えいぶんぽう)の( 授業:じゅぎょう )をサボった。／旷了英语语法课。 (彼:かれ)の( 書:か )く(英語:えいご)は( 文法:ぶんぽう )がでたらめだ。／他写的英语，语法乱七八糟。 どっかい【読解】 阅读理解. (多:おお)くの( 本:ほん )を(読:よ)み、(読解力:どっかいりょく)をつける。／多读书，从而提高阅读理解能力。 ちょうかい【聴解】 听力. ",
      "url"      : "https://inforest.site/20190217-tango-goi/"
    } ,
  
    {
      "title"    : "【每日一词】情け",
      "category" : "日语",
      "content": "なさけ【情け】 慈悲；同情；人情. (情:なさ )けのある( 人:ひと)。／有同情心的人；乐善好施的人。 (人:ひと)の( 情:なさ )けが( 身:み )にしみる。／感受到了人情温暖。 あいつに( 情:なさ )けをかけてはいけない。／对那个人可不能怜悯。 【(慣用句:かんようく)】 (悪女:あくじょ)の( 深情:ふかなさ )け。／丑女多情〔美女薄情〕；令人为难的好意。 (旅:たび)は( 道連:みちづ )れ､(世:よ)は( 情:なさ )け。／行要好伴，住要好邻；行旅要伴侣，处世要互助。 ",
      "url"      : "https://inforest.site/20190218-tango-nasake/"
    } ,
  
    {
      "title"    : "【每日一词】失う",
      "category" : "日语",
      "content": "うしなう【失う】 失去；错过；迷失. (自信:じしん)を( 失:うしな )う。／失去信心。 バランスを( 失:うしな )う。／失去平衡。 (最後:さいご)のチャンスを( 失:うしな )った。／错过了最后一次机会。 (山:やま)の( 中:なか )で(方角:ほうがく)を( 失:うしな )った。／在山里迷失了方向。 (毎:まい)(年:とし)(交:こう)(通:つう)(事:じ)(故:こ)で( 命:いのち )を(失:うしな)う( 人:ひと )は(一万人:いちまんにん)を( 超:こ )える。／每年因交通事故丧命的人超过一万人。 (色:いろ)を( 失:うしな )う。／〔受到惊吓而〕失色。 (客:きゃく)(車:しゃ)が( 暴:ぼう)(走:そう )し､(誰:だれ)もが( 色:いろ )を(失:うしな)った。／客车失控了，每个人都大惊失色。 ",
      "url"      : "https://inforest.site/20190219-tango-usinau/"
    } ,
  
    {
      "title"    : "【每日一词】約束",
      "category" : "日语",
      "content": "やくそく【約束】 约定；协定；说好. (約:やく)(束:そく)を( 守:まも )る。／守约。 (約:やく)(束:そく)を( 破:やぶ )る。／失约。 (口:くち)(約:やく)(束:そく)では( 危:あぶ )ない､(契:けい)(約:やく)(書:しょ)を( 交:か )わしたほうがいい。／口头承诺是靠不住的，还是签个合同比较好。 (約:やく)(束:そく)した( 以:い)(上:じょう)､(必:かなら )ず(来:く)るだろう。／既然约好了，肯定会来。 (無:む)(言:ごん)の( 約:やく)(束:そく )を(取:と)り( 交:か )わす。／（无形之中）达成了默契。 まどろみの約束 ",
      "url"      : "https://inforest.site/20190220-tango-yakusoku/"
    } ,
  
    {
      "title"    : "【每日一词】桜前線",
      "category" : "日语",
      "content": "さくらぜんせん【桜前線】 樱花（由南向北）开放的前锋. 【(説明:せつめい)】(気象庁:きしょうちょう)による( 桜:さくら )の(開花予想図:かいかよそうず)に( 見:み )られるもの。ソメイヨシノを( 対象:たいしょう )としており、(同:おな)じ( 日:ひ )に(開花:かいか)する( 地点:ちてん )を(線:せん)で( 結:むす )ぶ。(日本:にほん)は( 南北:なんぼく )に(長:なが)いため、(三月末:さんがつすえ)から( 九州:きゅうしゅう )より( 北上:ほくじょう )を(始:はじ)め、(五月初:ごがつはじ)めに( 北海道:ほっかいどう )に(至:いた)る。(開花予想:かいかよそう)は( 花見:はなみ )や(旅行:りょこう)をする( 人:ひと )たちに( 特:とく )に(注目:ちゅうもく)される。 【(中:ちゅう)(訳:やく)】这个词出自气象厅绘制的樱花开花时间预报图。开花预报以 “染井吉野樱花” 为代表，在地图上把同时开花的地点用线条连接起来，从而形成由南向北推移的“樱花前锋”。日本国土南北跨度较大，每年三月底，樱花前锋从九州开始北上，一直要到五月初才能到达北海道。开花预报尤其受到赏花人和旅行者的关注。 ばいうぜんせん【梅雨前線】 梅雨前锋. おんだんぜんせん【温暖前線】 暖锋. かんれいぜんせん【寒冷前線】 冷锋. ",
      "url"      : "https://inforest.site/20190225-tango-sakurazensen/"
    } ,
  
    {
      "title"    : "【每日一词】稲妻",
      "category" : "日语",
      "content": "いなずま【稲妻】 闪电. （(古代:こだい)、(稲:いね)の( 結実時期:けつじつじき )に(雷:かみなり)が( 多:おお )いことから、(雷光:らいこう)が( 稲:いね )を(実:みの)らせるという( 信仰:しんこう )があった。／在古代，因为稻子结果的时期经常打雷，所以人们认为雷光与稻子交配使其结果，故称闪电为(稲:いな)(妻:ずま)。） (稲妻:いなずま)が( 走:はし )り、(雷鳴:らいめい)がとどろいた。／电光闪闪，雷声隆隆。 (稲妻:いなずま)のような( 速:はや )さで( 身:み )を(隠:かく)した。／飞快地躲了起来。 (稲妻形:いなずまかたち)。／闪电形；之字形。 ",
      "url"      : "https://inforest.site/20190227-tango-inazuma/"
    } ,
  
    {
      "title"    : "【每日一词】実る",
      "category" : "日语",
      "content": "みのる【実る】 结果；有成果. (今:ことし)年はイネがよく( 実:みの )った。／今年稻子收成好。 ブドウがたわわに( 実:みの )っている。／串串葡萄压弯了树枝。 (長:なが)(年:ねん)の( 努:ど)(力:りょく )がやっと( 実:みの )った。／多年的努力终于有了成果。 (実:みの)るほど( 頭:あたま )の(下:さ)がる( 稲:いな)(穂:ほ )かな。／粒满穗垂，知博益谦；越是成熟越谦虚。 ",
      "url"      : "https://inforest.site/20190228-tango-minoru/"
    } ,
  
    {
      "title"    : "【每日一词】岸辺",
      "category" : "日语",
      "content": "きしべ【岸辺】 岸边. (岸:きし)(辺:べ)を( 散:さん)(策:さく )する。／在岸边散步。 (岸:きし)(辺:べ)にボートを( 着:つ )ける。／把小船靠在岸边。 (波:なみ)が( 次:つぎ )から( 次:つぎ )へと( 岸:きし)(辺:べ )に(打:う)ち( 返:かえ )す。／波浪一波接一波地冲向岸边。 ",
      "url"      : "https://inforest.site/20190302-tango-kisibe/"
    } ,
  
    {
      "title"    : "【每日一词】尊い",
      "category" : "日语",
      "content": "とうとい【尊い】 宝贵；高贵. (尊:とうと )い( 経験:けいけん)。／宝贵的经验。 (地震:じしん)は( 多:おお )くの( 尊:とうと )い(人命:じんめい)を( 奪:うば )った。／地震夺去了许多宝贵的生命。 (病気:びょうき)になって( 健康:けんこう )の(尊:とうと)さを( 知:し )った。／得病以后才知道健康的宝贵。 (尊:とうと )い( 身分:みぶん)。／高贵的身份。 ",
      "url"      : "https://inforest.site/20190304-tango-toutoi/"
    } ,
  
    {
      "title"    : "【每日一词】焼き餅",
      "category" : "日语",
      "content": "やきもち【焼き餅】 烤年糕；吃醋；嫉妒. つまらないことにもすぐやきもちを( 焼:や )く。／一点点小事也马上忌妒起来。 やたらにやきもちを( 焼:や )く。／爱吃醋。 (妻:つま)の( 男:おとこ)(友:とも)(達:だち )にやきもちを( 焼:や )く。／嫉妒妻子的男性朋友。 (母:はは)(親:おや)をとられた( 気:き )がして( 兄:あに )は(赤:あか)ん( 坊:ぼう )の(弟:おとうと)にやきもちを( 焼:や )いた。／哥哥觉得母亲被抢走了，嫉妒起还在襁褓中的弟弟来。 ",
      "url"      : "https://inforest.site/20190304-tango-yakimoti/"
    } ,
  
    {
      "title"    : "【每日一词】叱る",
      "category" : "日语",
      "content": "しかる【叱る】 责备；训斥；忠告. (先生:せんせい)に( 叱:しか )られる。／被老师批评了。 (私:わたし)は( 子供:こども )の(時:とき)いたずらっ( 子:こ )だったので、よく( 叱:しか )られた。／我小时候因为是个小淘气，所以时常挨骂。 (彼:かれ)は( 部下:ぶか )を(叱:しか)るとき、(少:すこ)しも( 容赦:ようしゃ )しない。／他批评起部下来毫不留情。 (何:なん)べんも( 叱:しか )ったのに、(彼:かれ)はどうしても( 改:あらた )めようとしない。／说过他好几次，他就是不改。 ",
      "url"      : "https://inforest.site/20190308-tango-sikaru/"
    } ,
  
    {
      "title"    : "【每日一词】辿る",
      "category" : "日语",
      "content": "たどる【辿る】 沿着（道路）；探索；趋于. (家:いえ)(路:じ)を( 辿:たど )る。／走上回家的路。 (記:き)(憶:おく)を( 辿:たど )りながら( 思:おも )い(出:で)の( 場:ば)(所:しょ )を(探:さが)した。／凭着记忆寻找印象中的故地。 (中:ちゅう)(国:ごく)(文:ぶん)(明:めい)の( 源:げん)(流:りゅう )をたどる。／追溯中国文明的起源。 (売:う)り( 上:あ )げが( 下:か)(降:こう)(線:せん )を(辿:たど)る。／销售额下降。 ",
      "url"      : "https://inforest.site/20190309-tango-tadoru/"
    } ,
  
    {
      "title"    : "【每日一词】中古",
      "category" : "日语",
      "content": "ちゅうこ【中古】 二手，半旧. (中:ちゅう)(古:こ)(品:ひん)。／二手货。 (中:ちゅう)(古:こ)のレコードを( 買:か )う。／买旧唱片。 あの( 中:ちゅう)(古:こ)(車:しゃ )はいい( 値:あたい )で(売:う)れた。／那辆二手车卖了个好价钱。 やっぱり( 中:ちゅう)(古:こ )ではなく( 新:しん)(品:ぴん )のギターが( 欲:ほ )しい。／我还是想要新的吉他，不想要旧的。 ",
      "url"      : "https://inforest.site/20190311-tango-tyuuko/"
    } ,
  
    {
      "title"    : "【每日一词】大人しい",
      "category" : "日语",
      "content": "おとなしい【大人しい】 老实；规规矩矩；温顺；雅致. おとなしい( 子供:こども)。／老实的孩子。 このイヌはおとなしい。／这只狗很温顺。 (敵:てき)はおとなしく( 銃:じゅう )を(捨:す)てて( 降:こう)(参:さん )した。／敌人乖乖地缴枪投降了。 この( 柄:がら )はおとなしい。／这种纹样很素雅。 ",
      "url"      : "https://inforest.site/20190312-tango-otonasii/"
    } ,
  
    {
      "title"    : "【每日一词】晴れる",
      "category" : "日语",
      "content": "はれる【晴れる】 晴；（云雾）消散；（疑虑）消散；（心情）舒畅. (明:あ)(日:す)は( 晴:は )れでしょう。／明天该放晴了吧。 (空:そら)が( 晴:は )れて( 星:ほし )がよく( 見:み )える。／天空晴朗，星星清晰可见。 (晴:は)れた( 日:ひ )にはここから( 富:ふ)(士:じ )の(全:ぜん)(景:けい)が( 一:いち)(望:ぼう )できる。／天晴的时候从这儿可以望见富士山的全景。 (真:しん)(犯:はん)(人:にん)(逮:たい)(捕:ほ)で、やっと( 私:わたし )の(疑:ぎ)(惑:わく)が( 晴:は )れた。／真正的犯人被捕后，对我的嫌疑才消除了。 (心:こころ)のもやもやがまだ( 晴:は )れない。／心里的疙瘩还没解开。 ",
      "url"      : "https://inforest.site/20190316-tango-hareru/"
    } ,
  
    {
      "title"    : "【每日一词】錆",
      "category" : "日语",
      "content": "さび【錆】 铁锈；恶果. ナイフの( 錆:さび )を(落:お)とす。／把小刀上的绣去掉。 この( 包丁:ほうちょう )は(長:なが)い( 間使:あいだつか )ってなかったから( 錆:さび )だらけだ。／这把菜刀由于长期没有使用，刀上尽是锈。 (身:み)から( 出:で )た(錆:さび)。／自食其果；咎由自取。 (自慢:じまん)の( 腕:うで )もすっかり( 錆:さび )ついてしまった。／拿手的技艺也完全荒废了。 ",
      "url"      : "https://inforest.site/20190318-tango-sabi/"
    } ,
  
    {
      "title"    : "【每日一词】弾ける",
      "category" : "日语",
      "content": "はじける【弾ける】 裂开；爆开；迸发. クリのいがが( 弾:はじ )ける。／栗子的毛壳绷开了。 バブルが( 弾:はじ )ける。／泡沫经济崩溃。 (彼:かれ)はとても( 太:ふと )っていて、(洋:よう)(服:ふく)が( 弾:はじ )けそうだ。／他太胖了，西服都快要绽开了。 (笑:わら)いが( 弾:はじ )ける。／迸发出笑声。 (弾:はじ)けそうな( 若:わか )さ。／迸发的青春活力。 ",
      "url"      : "https://inforest.site/20190319-tango-hajikeru/"
    } ,
  
    {
      "title"    : "【每日一词】騒めく",
      "category" : "日语",
      "content": "ざわめく【騒めく】 人声嘈杂；（树叶等）沙沙作响 (町:まち)(中:なか)がその( 知:し)(らせ:せ )でざわめいていた。／全城因为这个消息轰动了起来。 (新婦:しんぷ)のお( 色直:いろなお )しに( 会場:かいじょう )がざわめいた。／新娘换了衣服走进来，会场立刻一片嘁嘁喳喳声。 (質問者:しつもんしゃ)の( 発言:はつげん )に(一瞬会場:いっしゅんかいじょう)がざわめいた。／提问者的发言使会场喧哗了一阵。 ",
      "url"      : "https://inforest.site/20190408-tango-zawameku/"
    } ,
  
    {
      "title"    : "【每日一词】争う",
      "category" : "日语",
      "content": "あらそう【争う】 争夺；对抗；争辩； (一:いっ)(刻:こく)を( 争:あらそ )うときだ。／是分秒必争的时候。 (住:じゅう)(民:みん)たちは( 日:にっ)(照:しょう)(権:けん )のことで( 役:やく)(所:しょ )と(激:はげ)しく( 争:あらそ )った。／因日照权的问题，居民们同有关部门进行了激烈的争论。 (年:とし)は( 争:あらそ )えない。／岁月不饶人；要服老。 (血:ち)は( 争:あらそ )えない。／虎父无犬子；血浓于水。 (顔:かお)も( 声:こえ )もそっくりで、(流石:さすが)に( 血:ち )は(争:あらそ)えない。／长相、声音都如出一辙，到底是一家人。 ",
      "url"      : "https://inforest.site/20190416-tango-arasou/"
    } ,
  
    {
      "title"    : "【每日一词】儚い・果敢ない・果敢無い",
      "category" : "日语",
      "content": "はかない【儚い・果敢ない・果敢無い】 短暂；虚幻无常； (人:ひと)の( 一生:いっしょう )ははかないものだ。／人的一生是短暂无常的；人生如梦。 はかない( 生:しょう)(涯:がい )を(閉:と)じる。／结束了短暂的一生。 (儚:はかな)い( 最:さい)(期:ご )を(遂:と)げる。／死得可怜。 ",
      "url"      : "https://inforest.site/20190422-tango-hakanai/"
    } ,
  
    {
      "title"    : "【每日一词】手取り",
      "category" : "日语",
      "content": "てどり【手取り】 （扣除税金保险等费用后的）净收入. (税:ぜい)(引:び)き( 後:ご )の(手:て)(取:ど)り(金:きん)(額:がく)。／扣除税款后的纯收入。 (私:わたし)の( 給:きゅう)(料:りょう )はいろいろな( 手:て)(当:あて )まで( 含:ふく )めて( 月:つき )に(手:て)(取:ど)り( 30:さんじゅう)(万:まん)(円:えん )です。／我的工资加上各种补贴最后到手的差不多每个月 30 万日元。 てとりあしとり【手取り足取り】 手把手；耳提面命. じっくりと( 手:て)(取:と )り(足:あし)(取:と)り( 指:し)(導:どう )する。／手把手地耐心指导。 (彼:かれ)の( 技:ぎ)(術:じゅつ )は(私:わたし)が( 手:て)(取:と )り(足:あし)(取:と)り( 教:おし )えてやったのだ。／他的技术是我手把手教的。 ",
      "url"      : "https://inforest.site/20190426-tango-tedori/"
    } ,
  
    {
      "title"    : "【每日一词】透き通る",
      "category" : "日语",
      "content": "すきとおる【透き通る】 透明；清澈. この( 池:いけ )の(水:みず)は( 透:す )き(通:とお)っている。／这个池子的水清澈见底。 この( 生:き)(地:じ )は(薄:うす)くて( 透:す )き(通:とお)って( 見:み )える。／这块布薄得透明。 (北:きた)(国:ぐに)の( 人:ひと )は(透:す)き( 通:とお )るような( 白:しろ )い(肌:はだ)をしている。／北方人皮肤白皙透明。 あの( 歌:か)(手:しゅ )は(透:す)き( 通:とお )った( 声:こえ )が(魅:み)(力:りょく)だ。／那个歌手清脆的歌声很有魅力。 ",
      "url"      : "https://inforest.site/20190427-tango-sukitooru/"
    } ,
  
    {
      "title"    : "【每日一词】暦",
      "category" : "日语",
      "content": "こよみ【暦】 日历；历法. (暦:こよみ)の( 上:うえ )では( 春:はる )だが、まだ( 随:ずい)(分:ぶん)(寒:さむ )い。／论节气已经到了春天，但还是很冷。 (掛:か )け( 暦:こよみ)／挂历 (卓:たく)(上:じょう)(暦:こよみ)／台历 ",
      "url"      : "https://inforest.site/20190428-tango-koyomi/"
    } ,
  
    {
      "title"    : "【每日一词】湧く",
      "category" : "日语",
      "content": "わく【湧く】 涌出；涌现；产生. (温泉:おんせん)が( 湧:わ )く。／温泉涌出。 あなたのお( 話:はなし )を(聞:き)いて( 希望:きぼう )が(湧:わ)いてきた。／听了你的话，我产生了希望。 いいアイデアが( 突:とつ)(然:ぜん)(湧:わ )いた。／突然想出个好主意。 (歴史:れきし)に( 興味:きょうみ )がわく。／对历史产生兴趣。 (東:ひがし)の( 空:そら )に(雷雲:らいうん)がわく。／东方的天空中涌现出雷云。 ",
      "url"      : "https://inforest.site/20190507-tango-waku/"
    } ,
  
    {
      "title"    : "【每日一词】カバー",
      "category" : "日语",
      "content": "カバー 外皮；罩子；弥补；填补. (本:ほん)にカバーを( 掛:か )ける。／给书包一个书皮。 (他部門:ほかぶもん)の( 収益:しゅうえき )で(赤字:あかじ)をカバーする。／拿其他部门的收益来抵消赤字。 お( 互:たが )いの( 欠点:けってん )をカバーしあう。／互相弥补短处。 (新人:しんじん)を( 選抜:せんばつ )して( 卒業:そつぎょう )したの( 欠員:けついん )をカバーする。／遴选新人填补毕业运动员的空缺。 ",
      "url"      : "https://inforest.site/20190508-tango-kaba/"
    } ,
  
    {
      "title"    : "【每日一词】出勤",
      "category" : "日语",
      "content": "しゅっきん【出勤】 上班. 毎朝 9 時に出勤する。／每天早上 9 点上班。 わが社はフレックスタイム制で、出勤時間は決まっていない。／我们公司是弹性工作制，上班时间不固定。 (混雑解消:こんざつかいしょう)のため( 時差出勤:じさしゅっきん )をお願いします。／为解除拥挤，请错开时间上班。 今度の日曜は休日出勤だ。／这个星期天要加班。 彼の課は 10 時までに社に行けばいいんだから( 重役出勤:じゅうやくしゅっきん )だよ。／他们科只要 10 点以前能到公司就行，属于干部待遇。 重役出勤／像大人物一样姗姗来迟 ",
      "url"      : "https://inforest.site/20200225-tango-syukkin/"
    } ,
  
    {
      "title"    : "【每日一词】蛇足",
      "category" : "日语",
      "content": "だそく【蛇足】 蛇足，多余. 蛇足を加える。／画蛇添足。 ちょっと蛇足を申し上げますと…／我稍微说句多余的… 蛇足とは思いますが一言つけ加えさせていただきます。／我知道我是画蛇添足，但是我还要说一句。 ",
      "url"      : "https://inforest.site/20200226-tango-dasoku/"
    } ,
  
    {
      "title"    : "【每日一词】釣る",
      "category" : "日语",
      "content": "つる【釣る】 钓（鱼），引诱. 大きな魚を釣った。／钓上了大鱼。 海老で( 鯛:たい )を釣る。／用小虾钓大鱼；一本万利。 子供を金で釣るな。／别用钱去引诱孩子。 (安値商品:やすねしょうひん )で客を釣る。／靠廉价商品招揽顾客。 トンボを釣る。／（用囮子）引蜻蜓。 うまく釣られた。／轻易上了当。 釣られて笑う。／跟着别人笑。 (甘言:かんげん )で人をつる。／用动听的话引诱人。 ",
      "url"      : "https://inforest.site/20200227-tango-turu/"
    } ,
  
    {
      "title"    : "【每日一词】門松",
      "category" : "日语",
      "content": "かどまつ【門松】 门松（新年门前装饰的松枝）. 門松を立てる。／在门前装饰上门松。 ",
      "url"      : "https://inforest.site/20200319-tango-kadomatu/"
    } ,
  
    {
      "title"    : "【每日一词】口車",
      "category" : "日语",
      "content": "くちぐるま【口車】 花言巧语，甜言蜜语. 人の口車に乗る。／被别人的花言巧语所骗；上当。 人を口車に乗せる。／使人上当；用花言巧语骗人。 あの女の口車に乗るなよ。／别上她的当。 セールスマンの口車に乗せられてこんな高い( 品物:しなもの )を買ったしまった。／被那个推销员的花言巧语给骗了，买下了这么贵的东西。 ",
      "url"      : "https://inforest.site/20200323-tango-kutiguruma/"
    } ,
  
    {
      "title"    : "【每日一词】囲み",
      "category" : "日语",
      "content": "かこみ【囲み】 周围；用线圈起来的专栏（报道，读物），花边文字；包围. 囲み記事。／专栏；花边新闻。 敵の囲みを破る。／突破敌人的包围。 囲みを( 解:と )く。／解围。 囲みを破って逃げる。／冲破包围逃走。 ",
      "url"      : "https://inforest.site/20200324-tango-kakomi/"
    } ,
  
    {
      "title"    : "【每日一词】影法師",
      "category" : "日语",
      "content": "かげぼうし【影法師】 （照在地上、窗上的）人影. (夕日:ゆうひ)が長い影法師を( 映:うつ )す。／夕阳照出一个长长的人影。 ",
      "url"      : "https://inforest.site/20200422-tango-kagebousi/"
    } ,
  
    {
      "title"    : "【每日一词】仕様",
      "category" : "日语",
      "content": "しよう【仕様】 方法；做法. なんともしようがない。／毫无办法。 他に何とか仕様がありそうなものなのに。／（本来）还会有其他什么办法来着。 (住所:じゅうしょ )がわからないので連絡のしようがない。／因为不知道住处，所以无法联系。 どうしようもないやつ。／不可救药的家伙。 (比較:ひかく )のしようがない。／没法比。 寒くてしようがない。／冻得受不了。 (今更:いまさら )助けてくれと言われても私にはどうしようもない。／事到如今要我帮忙，我也帮不上了。 ",
      "url"      : "https://inforest.site/20200428-tango-syou/"
    } ,
  
    {
      "title"    : "【每日一词】在り処",
      "category" : "日语",
      "content": "ありか【在り処】 所在；下落. 宝の在り処を探す。／寻找宝藏的所在。 犯人の在り処を突き止めた。／查明了犯人的下落。 金の在り処がわからない。／不知道钱在哪里。 病因の在り処を分析する。／分析病因所在。 ",
      "url"      : "https://inforest.site/20200430-tango-arika/"
    } ,
  
    {
      "title"    : "【每日一词】招く",
      "category" : "日语",
      "content": "まねく【招く】 招待；招聘；招致；招呼. パーティーに客を招く。／邀请客人参加晚会。 (政治家:せいじか)や芸能人などが( 招:まね )かれて出席した。／政治家和演员等也应邀出席。 関係者を招いて( 懇親会:こんしんかい )を開く。／邀请相关人士召开联谊会。 退任した教授の( 後任:こうにん )として招かれた。／被聘为退休教授的后任。 その発言は誤解を招く。／那个发言会引起误解。 上海から一流のコックを招いて( 本場:ほんば )の味を再現する。／从上海聘请了超级厨师来，做出味道地道的菜肴。 雨やどりをしていたら、家の人が私に中に入るようにと手で招いてくれた。／正避雨时，屋里的人招手让我进去。 ",
      "url"      : "https://inforest.site/20200501-tango-maneku/"
    } ,
  
    {
      "title"    : "【每日一词】忍ぶ",
      "category" : "日语",
      "content": "しのぶ【忍ぶ】 躲开；忍受. (人目:ひとめ )を忍んで恋人に会う。／躲开别人的眼睛和男友〔女友〕幽会。 (世:よ)を忍ぶ( 仮:かり )の(姿:すがた)。／掩人耳目的假象。 生活上の様々な不便を忍ぶ。／忍受生活中的种种不便。 (木陰:こかげ )に忍。／躲在树后。 (夜:よ )ごとに忍んで来る。／每夜悄悄地来。 忍び難い。／难以忍受。 彼を( 正視:せいし )するに忍びなかった。／不忍正视他。 世を忍ぶ。／隐居。 ",
      "url"      : "https://inforest.site/20200505-tango-sinobu/"
    } ,
  
    {
      "title"    : "【每日一词】面影",
      "category" : "日语",
      "content": "おもかげ【面影】 音容；模样；痕迹. 母には美人だった若いころの面影がまだ残っている。／妈妈还残留着几分年轻时的美丽。 (弟:おとうと )は今も別れた恋人の面影を追っている。／弟弟至今还在追寻着已分别的恋人的音容〔痕迹〕。 面影を( 偲:しの )ぶ。／缅怀故容。 彼の面影がまだ目に浮かぶようだ。／他的模样仿佛还在眼前。 城は昔の面影を全く( 留:とど )めていない。／城堡已面目全非。 ",
      "url"      : "https://inforest.site/20200506-tango-omokage/"
    } ,
  
    {
      "title"    : "【每日一词】僅か",
      "category" : "日语",
      "content": "わずか【僅か】 一点点；稍微；好不容易才. あんなに働いたのにわずかな金にしかならなかった。／那么拼命工作居然才挣了这么一点钱。 可能性はごくわずかだが、全くないわけではない。／可能性虽然很小，但也不是完全没有。 彼女だけがわずかに( 難:なん )を(免:まぬが)れた。／只有她幸免遇难。 僅か 500 円で手に( 入:い )れる。／仅用五百日元就买到了手。 その橋の( 周辺:しゅうへん )だけがわずかに自然を( 残:のこ )している。／只有那个桥梁周围是唯一留下的一点自然。 ",
      "url"      : "https://inforest.site/20200510-tango-wazuka/"
    } ,
  
    {
      "title"    : "【每日一词】選考",
      "category" : "日语",
      "content": "せんこう【選考】 (～する)选拔；评审；评选.  新入社員を選考する。／选拔新职员。 僕の作品は選考に( 漏:も )れた。／我的作品落选了。 選考( 委員会:いいんかい )／评审委员会 書類選考はパスした。／通过了书面材料评审。 この( 競技会:きょうぎかい )は代表選考会を( 兼:か )ねている。／这场比赛同时也是代表选拔赛。 ",
      "url"      : "https://inforest.site/20200709-tango-senkou/"
    } ,
  
    {
      "title"    : "【每日一词】兼ねる",
      "category" : "日语",
      "content": "かねる【兼ねる】 兼任；难以；很可能会.  その家の( 台所:だいどころ )は食堂を兼ねている。／那家的厨房兼做饭厅。 ( 趣味:しゅみ )と( 実益:じつえき )を兼ねる。／又合爱好又有实利。 今回の中国旅行は仕事も兼ねている。／这次去中国旅行还兼带着工作。 この問題は私にはわかりかねます。／我实在弄不明白这个问题。 お引き受けいたしかねます。／难以承担。 あいつならそういうことをしかねない。／他能做出这种事来。 誤解を( 招:まね )き兼ねない。／可能会引起误解。 ",
      "url"      : "https://inforest.site/20200710-tango-kaneru/"
    } ,
  
    {
      "title"    : "【每日一词】挫ける",
      "category" : "日语",
      "content": "くじける【挫ける】 沮丧；挫伤.  手がくじける。／手挫伤了。 気がくじける。／灰心了。 ( 度重:たびかさ )なる失敗にもくじけない。／百折不挠。 夫は一度ぐらいの失敗でくじけるような人ではない。／我丈夫不是那种失败了一次就气馁的人。 ",
      "url"      : "https://inforest.site/20200711-tango-kujikeru/"
    } ,
  
    {
      "title"    : "【每日一词】砌",
      "category" : "日语",
      "content": "みぎり【砌】 时候；… 之际（書）；檐下铺的石头.  ( 三伏:さんぷく )のみぎり。／三伏之际。 ( 厳寒:げんかん )のみぎり。／严寒之际。 ( 酷暑:こくしょ )のみぎり。／酷暑之际。 ",
      "url"      : "https://inforest.site/20200712-tango-migiri/"
    } ,
  
    {
      "title"    : "【每日一词】浮世",
      "category" : "日语",
      "content": "うきよ【浮世】 尘世；人生；流行的；好色的.  浮世の( 煩:わずら )わしさ。／尘世的苦恼。 浮世の儚さ。／人生的变幻无常。 浮世を離れた( 山里:やまさと )。／远离尘世的山村。 浮世を捨てる。／抛开尘世；死亡。 浮世離れ。／不通世俗。 浮世男。／时髦的人物；好色的男子。 浮世の絆。／尘世的羁绊。 浮世は夢。／浮生若梦。 ままにならぬが浮世の( 常:つね )。／难如心愿人世之常；不如意事十之八九。 ",
      "url"      : "https://inforest.site/20200716-tango-ukiyo/"
    } ,
  
    {
      "title"    : "【每日一词】途方",
      "category" : "日语",
      "content": "とほう【途方】 方法；道理；条理.  途方に( 暮:く )れる。／走投无路。 両親に( 死:し )なれて、彼女は途方に暮れてしまった。／失掉了双亲，他不知该如何好了。 この絵には途方もなく高い値段がついている。／这幅画价格高得令人咋舌。 途方もなく安い。／便宜得出奇。 あの人は時々途方もないことを言い出す。／他常常说出一些不着边际的话来。 途方もない時間にやってきた。／深更半夜〔大清早上〕跑来了；不合常情的时候来了。 途方も無い計画を立てる。／定异想天开的计划。 ",
      "url"      : "https://inforest.site/20200717-tango-tohou/"
    } ,
  
    {
      "title"    : "【每日一词】逸れる",
      "category" : "日语",
      "content": "はぐれる【逸れる】 走散；错过.  ( 一行:いっこう )に逸れる。／与同行者走散。 親にはぐれて迷子になる。／同父母走散，成了迷路的孩子。 食い逸れる。／没赶上吃饭。 10時の汽車に乗りはぐれた。／没看上十点钟的火车。 ( 群:む )れからはぐれた鳥。／离了群的鸟。 ",
      "url"      : "https://inforest.site/20200718-tango-hagureru/"
    } ,
  
    {
      "title"    : "【每日一词】淡い",
      "category" : "日语",
      "content": "あわい【淡い】 浅；些微.  淡い光。／微弱的光线。 淡い望みを( 抱:いだ )く。／抱着一线希望。 淡い( 期待:きたい )を抱く。／抱一线希望。 淡い恋心を抱く。／怀有淡淡的恋慕之心。 淡い色の服。／浅色衣服。 淡い水色の空。／浅蓝色的天空。 ",
      "url"      : "https://inforest.site/20200720-tango-awai/"
    } ,
  
    {
      "title"    : "【每日一词】揺り籠",
      "category" : "日语",
      "content": "ゆりかご【揺り籠】 摇篮；摇车.  揺りかごの中で静かに( 眠:ねむ )る赤ちゃん。／在摇篮里安睡的婴儿。 揺り籠で赤ちゃんが寝ている。／摇篮里睡着婴儿。 揺り籠から( 墓場:はかば )まで。／从生到死；一辈子；一生. ",
      "url"      : "https://inforest.site/20200721-tango-yurikago/"
    } ,
  
    {
      "title"    : "【每日一词】アンカー",
      "category" : "日语",
      "content": "アンカー （接力的）最后一棒；锚；锚栓.  アンカーを( 務:つと )める。／跑最后一棒。 アンカーマン。／新闻节目等主持人。 ",
      "url"      : "https://inforest.site/20200722-tango-anka/"
    } ,
  
    {
      "title"    : "【每日一词】蜃気楼",
      "category" : "日语",
      "content": "しんきろう【蜃気楼】 海市蜃楼；幻景.  蜃気楼が( 現:あらわ )れた。／出现蜃景。 ",
      "url"      : "https://inforest.site/20200723-tango-sinkirou/"
    } ,
  
    {
      "title"    : "【每日一词】身の丈",
      "category" : "日语",
      "content": "みのたけ【身の丈】 身高. 身の丈2メートルの( 大男:おおおとこ )。／身长两米的大汉。 ",
      "url"      : "https://inforest.site/20200724-tango-minotake/"
    } ,
  
    {
      "title"    : "【每日一词】称える",
      "category" : "日语",
      "content": "たたえる【称える】 称赞；歌颂；表彰.  努力を称える。／赞扬努力。 業績を称える。／称赞功绩。 ( 徳:とく )を称える。／颂德。 日本文化の発展に尽くした人を称えて文化( 勲章:くんしょう )が贈られる。／表彰为日本文化的发展做出贡献的人，授予文化勋章。 ",
      "url"      : "https://inforest.site/20200725-tango-tataeru/"
    } ,
  
    {
      "title"    : "【每日一词】あどけない",
      "category" : "日语",
      "content": "あどけない 天真无邪；孩子气.  あどけないことを言う。／说带孩子气的话。 ( 子供:こども )のあどけない( 寝顔:ねがお )。／孩子天真可爱的睡相。 ",
      "url"      : "https://inforest.site/20200726-tango-adokenai/"
    } ,
  
    {
      "title"    : "【每日一词】",
      "category" : "日语",
      "content": "ふりはらう【振り払う】 抖落；掸去；甩开.  ホコリを振り払う。／抖掉灰尘。 相手の手を振り払う。／甩开对方的胳膊。 コートーについた雪を振り払う。／掸掉大衣上的雪。 雑念を振り払って仕事に専念する。／排除杂念专心工作。 どうしても彼に対する( 疑念:ぎねん )を振り払うことができない。／难消对他的疑念。 ",
      "url"      : "https://inforest.site/20200727-tango-huriharau/"
    } 
  
]

