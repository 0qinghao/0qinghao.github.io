<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://0qinghao.github.io/inforest/feed.xml" rel="self" type="application/atom+xml" /><link href="https://0qinghao.github.io/inforest/" rel="alternate" type="text/html" /><updated>2020-07-02T13:17:39+08:00</updated><id>https://0qinghao.github.io/inforest/feed.xml</id><title type="html">林间</title><subtitle>林庆毫的个人空间</subtitle><author><name>Qinghao Lin</name></author><entry><title type="html">译 - 使用iStyle格式化Verilog代码</title><link href="https://0qinghao.github.io/inforest/2019/08/09/translate-use-istyle-to-format-verilog-code/" rel="alternate" type="text/html" title="译 - 使用iStyle格式化Verilog代码" /><published>2019-08-09T00:00:00+08:00</published><updated>2019-08-09T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2019/08/09/translate-use-istyle-to-format-verilog-code</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2019/08/09/translate-use-istyle-to-format-verilog-code/">&lt;blockquote&gt;
  &lt;p&gt;原文：&lt;a href=&quot;https://qiita.com/kkumt93/items/70766645c07c298d19c3&quot;&gt;Verilogでコード整形&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;安装&quot;&gt;安装&lt;/h1&gt;

&lt;p&gt;iStyle可以从GitHub上clone、make自行编译出可执行文件，也可以直接下载已编译好的可执行文件。这里都给出来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://github.com/thomasrussellmurphy/istyle-verilog-formatter&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可执行文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://github.com/HayasiKei/istyle-verilog-formatter/releases/tag/v1.21_x86_64&lt;/p&gt;

&lt;h1 id=&quot;格式化选项&quot;&gt;格式化选项&lt;/h1&gt;

&lt;p&gt;以下是一些格式化时常用的选项及效果示例。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;待格式化代码&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;style&quot;&gt;&lt;strong&gt;–style&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ANSI style&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iStyle --style=ansi test.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Kernighan&amp;amp;Ritchie style&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iStyle --style=kr test.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;GNU style&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iStyle --style=gnu test.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-s&quot;&gt;-s&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./iStyle -s2 test.v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该选项指定缩进时的空格数量，-s2表示每次缩进使用2个空格（如果是-s4则表示每次用4个空格缩进）。&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-p&quot;&gt;-p&lt;/h2&gt;

&lt;p&gt;-p选项指定在运算符两侧插入空格。&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-p-1&quot;&gt;-P&lt;/h2&gt;

&lt;p&gt;-P选项指定在运算符和括号周围插入空格。&lt;/p&gt;

&lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;posedge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;4'h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;

&lt;p&gt;虽然文中没有写，&lt;strong&gt;module&lt;/strong&gt;声明的缩进感觉并不是很好。verilog有各种各样的代码风格，因此有一个强大的格式化程序是很有用的。&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">原文：Verilogでコード整形</summary></entry><entry><title type="html">记一篇日语短文</title><link href="https://0qinghao.github.io/inforest/2019/06/25/2017-07-jlpt-n2/" rel="alternate" type="text/html" title="记一篇日语短文" /><published>2019-06-25T00:00:00+08:00</published><updated>2019-06-25T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2019/06/25/2017-07-jlpt-n2</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2019/06/25/2017-07-jlpt-n2/">&lt;p&gt;今年（2019）7月的JLPT也快要开始了，我最重要的一个…emmm… 朋友，参加这次的N2考试，祝愿拿到好成绩。💪😊&lt;/p&gt;

&lt;p&gt;两年前，大三的暑假，似乎比今年的夏天更加闷热一些，我第一次参加JLPT，也是N2。糊里糊涂刷了不到半本红蓝宝书，外加几套真题，就这样跑去另一个校区考试了。（考试前一天有点感冒，突然发烧头痛，好在睡了一下午就好了很多，想想自己当时也是心大😂）&lt;/p&gt;

&lt;p&gt;那次的N2似乎比往年真题简单一些，接近3小时的答题时间过得还算舒适，本科3年各种突击应付式的考试都快让我忘记了这种——沉浸在试题里的紧张、兴奋和满足感。&lt;/p&gt;

&lt;p&gt;那年的最后一篇长阅读（除去海报内容理解那篇）答得很开心，难度适中，文笔优美（按我的审美来说😂）。尽管是篇鸡汤文，但也强烈地让我想去拜读一下原作，可惜当时没能把出处记下来，也没办法Google到。最近不知为何又突然想起这篇文章，遂找出了当年的真题卷重温一遍，顺手在这做一下记录。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;​	人生はいつも旅になぞらえられる。&lt;/p&gt;

&lt;p&gt;​	人は人生という旅路を、地図もなく歩いている。誰しもそうだし、それが人間としては自然な姿である。人生に地図などあるわけがない。なのに人は、人生の地図を持とうとするのが常だ。暗闇の中を歩くのが不安で仕様がないのだ。迷ってしまった時の恐怖を想像したくないからだ。&lt;/p&gt;

&lt;p&gt;​	そして自分の地図には、人生の設計図としてわがままな道程が記されている。三十歳までには結婚し、三十五歳頃には二人の子どもをもつ。四十歳には課長になり、五十歳までには何とか部長に昇進する。&lt;/p&gt;

&lt;p&gt;​	（中略）&lt;/p&gt;

&lt;p&gt;​	人生の地図に描かれた道を、その通りに歩むことができるなら、そんなに楽なことはない。一度も脇道にそれずに、ただまっすぐに歩くことができるのなら、人は何も悩まなくても済むだろう。そんな人生を送る人間は、おそらくこの世に一人もいない。もしそういう人間がいるのだとしたら、それはその人間の人生ではない。その人生は他人から与えられたものに過ぎない。&lt;/p&gt;

&lt;p&gt;​	五十歳の時には部長になっている。これは今という現在地から見た目標であろう。目標を持つことはもちろん大切なことだ。しかし、その目標へ辿り着く道は決して一本ではない。五十歳という現在地に立った時、もし部長になっていなければどうするのか。一枚の地図しか持っていない人、あるいは決して地図を書き変えようとしない人は、そこで人生の現在地を見失ってしまうだろう。｢今、自分はこの場所にいるはずなのに、全く違う所に来てしまった｣と、そんな思いに囚われてしまい、行くべき道も見失ってしまうのである。&lt;/p&gt;

&lt;p&gt;​	地図を持たない人生が不安であるならば、地図を持てばいいだけのことだ。しかし、その一枚の地図にこだわってはならない。常に現在地を確認しながら、どんどん地図を変えていくことだ。&lt;/p&gt;

&lt;p&gt;​	少し脇道に入ってしまったのなら、その脇道を歩いてみればいい。無理をして元の道に戻ろうとしても、余計に迷うだけだ。脇道を歩いているうちに、いつの間にか元の道に戻ることもあるだろうし、また別の大通りに出会うこともあるだろう。人生には数え切れないほどの道があることを知っておいたほうがいい。今いる場所さえしっかりと認識できていれば、人はどんな道だって歩いていくことができるものだ。&lt;/p&gt;

&lt;p&gt;（立松平和『人生の現在地—まだまだ迷っているぞ、私は。』による）&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">今年（2019）7月的JLPT也快要开始了，我最重要的一个…emmm… 朋友，参加这次的N2考试，祝愿拿到好成绩。💪😊</summary></entry><entry><title type="html">配置澎峰Perf-V开发板RISC-V开发环境</title><link href="https://0qinghao.github.io/inforest/2018/10/30/per-f-risc-v-dev-env/" rel="alternate" type="text/html" title="配置澎峰Perf-V开发板RISC-V开发环境" /><published>2018-10-30T00:00:00+08:00</published><updated>2018-10-30T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/10/30/per-f-risc-v-dev-env</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/10/30/per-f-risc-v-dev-env/">&lt;p&gt;实验室买了一块Perf-V开发板，准备开始做RISC-V相关的工作。&lt;/p&gt;

&lt;p&gt;虽然澎峰直接给了配置好的虚拟机开发环境，不过因为Ubuntu16.03用着不顺手就想要自己把环境配出来。&lt;/p&gt;

&lt;p&gt;看澎峰给的SDK目录，就是直接用的开源蜂鸟（GitHub：e200_opensource）微调来的。所以最初尝试着git e200_opensource重新配置一遍，结果失败，报错找不到’cc1’。尝试添加PATH等操作无果。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;riscv-none-embed-gcc: error trying to exec ‘cc1’: execvp: No such file or directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;后尝试直接把给的环境升级到18.04，结果出现与上述相同的问题。&lt;/p&gt;

&lt;p&gt;那行吧，既然sirv-e-sdk和Perf-V-e-sdk都是从SIFIVE的freedom-e-sdk（GitHub：freedom-e-sdk）精简来的，那我就配置整个freedom-e-sdk吧。&lt;/p&gt;

&lt;p&gt;总之这几天为了搞定Perf-V开发板的开发环境，前前后后踩了不少坑。现在把最后结果记录如下，备忘。&lt;/p&gt;

&lt;h1 id=&quot;克隆freedom-e-sdk存储库&quot;&gt;克隆freedom-e-sdk存储库&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; https://github.com/sifive/freedom-e-sdk.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文件大，耗时比较长。&lt;/p&gt;

&lt;h1 id=&quot;从源代码构建tools&quot;&gt;从源代码构建Tools&lt;/h1&gt;

&lt;p&gt;Ubuntu需要这些packages：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;autoconf automake libmpc-dev libmpfr-dev libgmp-dev gawk bison flex texinfo libtool libusb-1.0-0-dev make g++ pkg-config libexpat1-dev zlib1g-dev  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd freedom-e-sdk
make tools [BOARD=freedom-e300-hifive1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;build过程耗时很长。&lt;/p&gt;

&lt;h1 id=&quot;替换板级支持包&quot;&gt;替换板级支持包&lt;/h1&gt;

&lt;p&gt;freedom-e-sdk是SIFIVE的开发环境，里面的板级支持包只有sifive系列，要用来开发Perf-V需要先替换bsp文件夹。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv ./bsp ./bsp_bak
cp -r ~/fengniao/e200_opensource/Perf-V-e-sdk/bsp ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以把Perf-V开发板自带的几个程序顺便复制过来，方便之后测试。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv ./software ./software_bak
cp -r ~/fengniao/e200_opensource/Perf-V-e-sdk/software ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;pc和开发板的连接&quot;&gt;PC和开发板的连接&lt;/h1&gt;

&lt;p&gt;如果手头上有胡振波大大《RISC-V处理器》这本书的同学，请翻到P318，18.3节提到了他们的开发板是怎么配置和PC连接的。基本上照做就行了，可是别忘了，他们的开发板是Arty，虽然澎峰用的也是A7，但是板子ID可不一样，所以有2个参数要注意了。&lt;/p&gt;

&lt;p&gt;我这就照着书上的步骤2到6简单写一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤二：通电；点USB图标连接至虚拟机&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤三：使用如下命令查看USB状态&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsusb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bus 001 Device 002: ID 0403:6010 Future Technology Devices International, Ltd FT2232C Dual USB-UART/FIFO IC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;记下 0403:6010 这两个数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤四：设置udev rules，使USB能够被plugdev group访问&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/udev/rules.d/99-openocd.rules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 写入以下内容，注意0403和6010，和书上不一样
SUBSYSTEM==&quot;usb&quot;, ATTR{idVendor}==&quot;0403&quot;,
ATTR{idProduct}==&quot;6010&quot;, MODE=&quot;664&quot;, GROUP=&quot;plugdev&quot;
SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0403&quot;,
ATTRS{idProduct}==&quot;6010&quot;, MODE=&quot;664&quot;, GROUP=&quot;plugdev&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;步骤五：看看USB设备所属组，略&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤六：把自己的用户添加到组中&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo usermod -a -G plugdev 你的用户名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;编译上传裸机risc-v程序&quot;&gt;编译上传裸机RISC-V程序&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd freedom-e-sdk
make software PROGRAM=demo_gpio BOARD=Perf-V-creative-board
make upload PROGRAM=demo_gpio BOARD=Perf-V-creative-board
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">实验室买了一块Perf-V开发板，准备开始做RISC-V相关的工作。</summary></entry><entry><title type="html">在Windows命令行、Linux终端使用代理</title><link href="https://0qinghao.github.io/inforest/2018/09/19/proxy-set-in-windows-and-linux/" rel="alternate" type="text/html" title="在Windows命令行、Linux终端使用代理" /><published>2018-09-19T00:00:00+08:00</published><updated>2018-09-19T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/09/19/proxy-set-in-windows-and-linux</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/09/19/proxy-set-in-windows-and-linux/">&lt;p&gt;在之前的博文中分享了如何&lt;a href=&quot;https://segmentfault.com/a/1190000013399064&quot;&gt;使用Google云计算引擎搭建SS服务器&lt;/a&gt;，如何&lt;a href=&quot;https://segmentfault.com/a/1190000013539547&quot;&gt;使用SS客户端&lt;/a&gt;，已经满足了科学上网的基本需求。这次将要总结在Windows的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; 窗口和Linux的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LX终端&lt;/code&gt; 中，让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; 等命令使用代理需要进行的一些配置。&lt;/p&gt;

&lt;h1 id=&quot;windows命令行代理&quot;&gt;Windows命令行代理&lt;/h1&gt;

&lt;p&gt;假设你已经使用了SS客户端，本地socks5代理为127.0.0.1:1080&lt;/p&gt;

&lt;p&gt;在CMD窗口输入如下指令设置代理：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;set http_proxy=socks5://127.0.0.1:1080
set https_proxy=socks5://127.0.0.1:1080
set ftp_proxy=socks5://127.0.0.1:1080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl https://www.facebook.com&lt;/code&gt; 能得到返回结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/005MY9Xigy1fp4azce62uj30hd075t9e.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;取消代理命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set http_proxy=
set https_proxy=
set ftp_proxy=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;设置代理后只对当前命令行窗口生效，重新打开CDM需要再次设置。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;linux-lx终端代理&quot;&gt;Linux LX终端代理&lt;/h1&gt;

&lt;p&gt;由于Linux下SS客户端仅代理socks5协议的流量（如果不是这个原因恳请指正）。所以想在LX终端使用代理，需要在SS的socks5流量前再接一个代理，允许http、https、ftp协议流量通过。&lt;/p&gt;

&lt;p&gt;我们也假定本地socks5代理为127.0.0.1:1080&lt;/p&gt;

&lt;h2 id=&quot;安装polipo&quot;&gt;安装polipo&lt;/h2&gt;

&lt;p&gt;Debian下直接使用apt命令安装：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;polipo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编辑配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;sudo nano /etc/polipo/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置内容如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;# This file only needs to list configuration variables that deviate
# from the default values.  See /usr/share/doc/polipo/examples/config.sample
# and &quot;polipo -v&quot; for variables you can tweak and further information.

logSyslog = true
logFile = /var/log/polipo/polipo.log

proxyAddress = &quot;0.0.0.0&quot;

socksParentProxy = &quot;127.0.0.1:1080&quot;
socksProxyType = socks5

chunkHighMark = 50331648
objectHighMark = 16384

dnsQueryIPv6 = no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt;，&lt;kbd&gt;Y&lt;/kbd&gt;保存退出。&lt;/p&gt;

&lt;p&gt;重启polipo服务：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service polipo restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;启用代理&quot;&gt;启用代理&lt;/h2&gt;

&lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service polipo status&lt;/code&gt; 命令，我们可以看到新的监听端口为&lt;strong&gt;8123&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fp4g22nbr8j30f905ddhd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此，LX终端启用代理的命令为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;export http_proxy=http://127.0.0.1:8123
export https_proxy=http://127.0.0.1:8123
export ftp_proxy=http://127.0.0.1:8123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样，直接输入上述命令设置的代理也是临时的。一个比较实用的方法是在~/.bashrc文件中设置环境，之后就不需要再手动设置了。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nano ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在文件最后插入上述三条指令，保存。&lt;/p&gt;

&lt;p&gt;测试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; 指令：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fp4gl2vchsj30er05a3z3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;

&lt;p&gt;我对CMD/LX终端设置代理的出发点，是为了使用Google的一个API，设置后确实能够成功使用。另外似乎对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; 等指令也有效果，安装python模块时的下载速度有比较明显的提升。不过说到底只是在总结如何使用别人做好的工具，很多原理还是没有明白，如果文中有何纰漏，恳请指正。&lt;/p&gt;

&lt;p&gt;感谢你阅读文章！&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">在之前的博文中分享了如何使用Google云计算引擎搭建SS服务器，如何使用SS客户端，已经满足了科学上网的基本需求。这次将要总结在Windows的 CMD 窗口和Linux的 LX终端 中，让 wget curl 等命令使用代理需要进行的一些配置。</summary></entry><entry><title type="html">译 - 使用Natural Language API分析文本的实体与情感</title><link href="https://0qinghao.github.io/inforest/2018/04/07/google-natural-language-api/" rel="alternate" type="text/html" title="译 - 使用Natural Language API分析文本的实体与情感" /><published>2018-04-07T00:00:00+08:00</published><updated>2018-04-07T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/04/07/google-natural-language-api</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/04/07/google-natural-language-api/">&lt;blockquote&gt;
  &lt;p&gt;原文：&lt;a href=&quot;https://codelabs.developers.google.com/codelabs/cloud-nl-intro-ja/index.html?index=..%2F..%2Fspringone#0&quot;&gt;Natural Language APIでエンティティと感情を分析する&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;概要&quot;&gt;概要&lt;/h1&gt;

&lt;p&gt;使用 Cloud Natural Language API ，可以从文本中提取实体、分析情感、解析文本构成。&lt;/p&gt;

&lt;p&gt;此次向导中，我们将针对 Natural Language API 的3个方法： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analyzeEntities&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analyzeSentiment&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;annotateText&lt;/code&gt; 进行学习。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将要学习的东西&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;构造 Natural Language API 请求，并使用 curl 发送请求&lt;/li&gt;
  &lt;li&gt;使用 Natural Language API 提取文本中的实体，并进行情感分析&lt;/li&gt;
  &lt;li&gt;使用 Natural Language API 对文本进行语言分析（语法、词性等）&lt;/li&gt;
  &lt;li&gt;使用不同的语言构造 Natural Language API 请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;必要的准备&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建Google Cloud Platform项目&lt;/li&gt;
  &lt;li&gt;浏览器（&lt;a href=&quot;https://www.google.com/chrome/browser/desktop/&quot;&gt;Chrome&lt;/a&gt;、&lt;a href=&quot;https://www.mozilla.org/firefox/&quot;&gt;Firefox&lt;/a&gt; 等）&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;设置和一些说明&quot;&gt;设置和一些说明&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;根据自己的情况进行设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还未拥有Google账号（Gmail / Google Apps）的情况下，&lt;a href=&quot;https://accounts.google.com/SignUp&quot;&gt;创建账号&lt;/a&gt;是必须的。登录Google Cloud Platform Console（&lt;a href=&quot;http://console.cloud.google.com/&quot;&gt;console.cloud.google.com&lt;/a&gt;），创建一个新项目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1is4jamij307q04rq2v.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1isb2igbj30dg05waa3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;请记住项目名称。任意一个Google Cloud项目都拥有唯一的名称（上述的名称已经被使用了，所以实际上无法使用）。&lt;/p&gt;

&lt;p&gt;Google Cloud Platform的新用户将赠与&lt;a href=&quot;https://console.developers.google.com/billing/freetrial&quot;&gt;相当于$ 300的试用金&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;启用cloud-natural-language-api&quot;&gt;启用Cloud Natural Language API&lt;/h1&gt;

&lt;p&gt;点击屏幕左上角的菜单图标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jddf3k3j307n01dglk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下拉菜单中选择 [&lt;strong&gt;API Manager&lt;/strong&gt;]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1je8vadpj308k09gq36.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 [&lt;strong&gt;启用API&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jfksxryj30l503kgls.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，在搜索框中输入「Language」。点击 [&lt;strong&gt;Google Cloud Natural Language API&lt;/strong&gt;]。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq3e7yyteej30y007uq3l.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击[&lt;strong&gt;启用&lt;/strong&gt;]，启用 Cloud Natural Language API 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq3e87nxmij30wn07pgmg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等待数秒，API成功启用后，将显示如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq3e9gcof8j30gi02c748.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;激活cloud-shell&quot;&gt;激活Cloud Shell&lt;/h1&gt;

&lt;p&gt;Google Cloud Shell 是在云端运行的命令行环境。这台基于 Debian 的虚拟机能够加载任何您需要的开发工具（gcloud、bq、git等），并提供永久的5 GB主目录。这次教程将使用 Cloud Shell 创建对 Translation API 的请求。&lt;/p&gt;

&lt;p&gt;点击标题栏右侧的 [激活 Google Cloud Shell] 按钮（&lt;strong&gt;&amp;gt;_&lt;/strong&gt;），启动Cloud Shell。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1k54ijd6j318g01y3yw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloud Shell 将在控制台底部的新窗口中打开，并显示命令行提示符。请等待提示符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user@project:~$&lt;/code&gt; 出现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1k6p9s1uj318g0a8dg7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;生成api-key&quot;&gt;生成API Key&lt;/h1&gt;

&lt;p&gt;你将通过使用curl发送一个请求来调用 Natural Language API 。在发送请求时，你需要在 URL 中插入一个生成的 API 密钥。为了创建 API 密钥，让我们点击侧边栏的 [API Manager] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1vzcg8gfj308f09edg0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，在 [&lt;strong&gt;凭据&lt;/strong&gt;] 选项卡中点击 [&lt;strong&gt;创建凭据&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1w1xzz3vj30t80fdt9v.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下拉菜单中选择  [&lt;strong&gt;API 密钥&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1w36by92j30ds08m74w.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，复制生成好的密钥。此密钥将在向导的后半部分中用到。&lt;/p&gt;

&lt;p&gt;你已获得API密钥，我们将其保存在环境变量中，以便每次调用API时不需要重复插入API密钥值。你可以将密钥保存在 Cloud Shell 中，下述的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your_api_key&amp;gt;&lt;/code&gt; 请替换成之前复制的内容。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export API_KEY=&amp;lt;YOUR_API_KEY&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;构造分析文本中实体的请求&quot;&gt;构造分析文本中实体的请求&lt;/h1&gt;

&lt;p&gt;第一个介绍的 Natural Language API 方法是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analyzeEntities&lt;/code&gt; 。API 使用此方法从文本中提取出实体（人物、场所、事件等）。为了试用 API 的实体分析功能，我们将引用最近新闻中的以下句子。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LONDON — J. K. Rowling always said that the seventh Harry Potter book, “Harry Potter and the Deathly Hallows, “ would be the last in the series, and so far she has kept to her word.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;对  Natural Language API 发出的请求可以事先保存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.json&lt;/code&gt; 文件中。首先，我们在 Cloud Shell 中生成这个文件。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，使用任意一个文本编辑器（ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nano&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emacs&lt;/code&gt; ）打开生成的文件。在文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.json&lt;/code&gt; 中添加如下内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;document&quot;:{
    &quot;type&quot;:&quot;PLAIN_TEXT&quot;,
    &quot;content&quot;:&quot;LONDON — J. K. Rowling always said that the seventh Harry Potter book, ‘Harry Potter and the Deathly Hallows,' would be the last in the series, and so far she has kept to her word.&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这个请求文件中，保存了即将发送给 Natural Language API 的文本的相关信息。type 属性的值可以是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLAIN_TEXT&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 。content 中存放了将要发送给  Natural Language API 分析的文本。Natural Language API 还支持直接发送存储在 Google Cloud Storage 中的文件。直接从 Google Cloud Storage 发送文件时，请将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt; 替换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcsContentUri&lt;/code&gt; ，并将其值设置为云端文件的 uri 地址。&lt;/p&gt;

&lt;h1 id=&quot;调用-natural-language-api&quot;&gt;调用 Natural Language API&lt;/h1&gt;

&lt;p&gt;现在，我们将使用 curl 命令，把请求文件和之前保存好的 API 密钥环境变量一起，发送给  Natural Language API （全放在一条命令里面）。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://language.googleapis.com/v1/documents:analyzeEntities?key=${API_KEY}&quot; -s -X POST -H &quot;Content-Type: application/json&quot; --data-binary @request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将得到形式如下的响应。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;entities&quot;: [
    {
      &quot;name&quot;: &quot;Harry Potter and the Deathly Hallows&quot;,
      &quot;type&quot;: &quot;WORK_OF_ART&quot;,
      &quot;metadata&quot;: {
        &quot;mid&quot;: &quot;/m/03bkkv&quot;,
        &quot;wikipedia_url&quot;: &quot;https://en.wikipedia.org/wiki/Harry_Potter_and_the_Deathly_Hallows&quot;
      },
      &quot;salience&quot;: 0.30040884,
      &quot;mentions&quot;: [
        {
          &quot;text&quot;: {
            &quot;content&quot;: &quot;book&quot;,
            &quot;beginOffset&quot;: -1
          },
          &quot;type&quot;: &quot;COMMON&quot;
        }
      ]
    }
  ],
  ...
  ...
  &quot;language&quot;: &quot;en&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在响应中，我们可以看到 API 从句子里检测到了6个实体（译者：原文是4个，但实际运行时得到6个，应该是API有所改善）。对于每个实体，你将得到实体的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; 、关联的维基百科URL（如果存在）、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;salience&lt;/code&gt; （显著性）以及实体在文本中出现的位置的索引。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;salience&lt;/code&gt; （显著性）是一个0~1的数字，指的是该实体对于整个文本的突出性。对于上述文段，「Harry Potter and the Deathly Hallows」具有最高的显著性（译者：原文是「Rowling」，应该是API有所改善），这是因为这部作品是文段所表述内容的主题。Natural Language API 也可以识别用其他方式表述的相同的实体，比如说「Rowling」、「J. K. Rowling」和「Joanne Kathleen Rowling」都指向同一个维基百科页面。&lt;/p&gt;

&lt;h1 id=&quot;使用-natural-language-api-进行情感分析&quot;&gt;使用 Natural Language API 进行情感分析&lt;/h1&gt;

&lt;p&gt;除了提取实体，Natural Language API 还可以分析文本块的情感。JSON 请求文件与之前的那个具有相同的参数，但这次我们更改一下文本，换成一段具有更强烈情感的内容。请修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request.json&lt;/code&gt; 为如下内容，或者换成你喜欢的文段。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;document&quot;:{
    &quot;type&quot;:&quot;PLAIN_TEXT&quot;,
    &quot;content&quot;:&quot;I love everything about Harry Potter. It's the greatest book ever written.&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后把请求发送到 API 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analyzeSentiment&lt;/code&gt; 端点。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://language.googleapis.com/v1/documents:analyzeSentiment?key=${API_KEY}&quot; -s -X POST -H &quot;Content-Type: application/json&quot; --data-binary @request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将得到形式如下的响应。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;documentSentiment&quot;: {
    &quot;polarity&quot;: 1,
    &quot;magnitude&quot;: 1.5,
    &quot;score&quot;: 0.7
  },
  &quot;language&quot;: &quot;en&quot;,
  &quot;sentences&quot;: [
    {
      &quot;text&quot;: {
        &quot;content&quot;: &quot;I love everything about Harry Potter.&quot;,
        &quot;beginOffset&quot;: -1
      },
      &quot;sentiment&quot;: {
        &quot;polarity&quot;: 1,
        &quot;magnitude&quot;: 0.6,
        &quot;score&quot;: 0.6
      }
    },
    {
      &quot;text&quot;: {
        &quot;content&quot;: &quot;It's the greatest book ever written.&quot;,
        &quot;beginOffset&quot;: -1
      },
      &quot;sentiment&quot;: {
        &quot;polarity&quot;: 1,
        &quot;magnitude&quot;: 0.8,
        &quot;score&quot;: 0.8
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该方法将返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polarity&lt;/code&gt; （极性）和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magnitude&lt;/code&gt; （强度）两个值（译者：原文是这两个值，但很明显现在还能看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;score&lt;/code&gt; 这个值）。polarity是介于-1.0 ~ 1.0之间的数值，表示文本消极或积极的程度。magnitude是介于0 ~ ∞的数值，与polarity没有关系，它表示在文本中表达的感情的权重。权重较大的文本块单是增加长度，其magnitude也会变大。上文的polarity是100%积极。「love」、「greatest」、「ever」这样的单词会影响magnitude的值。&lt;/p&gt;

&lt;h1 id=&quot;分析语法与词性&quot;&gt;分析语法与词性&lt;/h1&gt;

&lt;p&gt;让我们看看 Natural Language API 的第三个方法：文本注释。让我们进入文本的语言细节。annotateText方法提供了关于文本情感元素、语法元素的完整细节。使用该方法，可以知道文本中每个词语的词性（名词、动词、形容词等），以及各个单词如何与句子中的其他单词关联（是动词的原始形式，还是用来修饰语句）。&lt;/p&gt;

&lt;p&gt;让我们通过简单的文段来使用这个方法。JSON 文件与之前的相似，但在这里我们需要添加一项 features 来告诉API你想要执行语法注释。请将request.json替换为如下内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;document&quot;:{
    &quot;type&quot;:&quot;PLAIN_TEXT&quot;,
    &quot;content&quot;:&quot;Joanne Rowling is a British novelist, screenwriter and film producer.&quot;
  },
  &quot;features&quot;:{
    &quot;extractSyntax&quot;:true
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后把请求发送到 API 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;annotateText&lt;/code&gt; 端点。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://language.googleapis.com/v1/documents:annotateText?key=${API_KEY}&quot; -s -X POST -H &quot;Content-Type: application/json&quot; --data-binary @request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;响应中，对于句子中的每一个标记（token），会返回以下对象。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;text&quot;: {
	&quot;content&quot;: &quot;Joanne&quot;,
	&quot;beginOffset&quot;: -1
  },
  &quot;partOfSpeech&quot;: {
	&quot;tag&quot;: &quot;NOUN&quot;,
	&quot;aspect&quot;: &quot;ASPECT_UNKNOWN&quot;,
	&quot;case&quot;: &quot;CASE_UNKNOWN&quot;,
	&quot;form&quot;: &quot;FORM_UNKNOWN&quot;,
	&quot;gender&quot;: &quot;GENDER_UNKNOWN&quot;,
	&quot;mood&quot;: &quot;MOOD_UNKNOWN&quot;,
	&quot;number&quot;: &quot;SINGULAR&quot;,
	&quot;person&quot;: &quot;PERSON_UNKNOWN&quot;,
	&quot;proper&quot;: &quot;PROPER&quot;,
	&quot;reciprocity&quot;: &quot;RECIPROCITY_UNKNOWN&quot;,
	&quot;tense&quot;: &quot;TENSE_UNKNOWN&quot;,
	&quot;voice&quot;: &quot;VOICE_UNKNOWN&quot;
  },
  &quot;dependencyEdge&quot;: {
	&quot;headTokenIndex&quot;: 1,
	&quot;label&quot;: &quot;NN&quot;
  },
  &quot;lemma&quot;: &quot;Joanne&quot;
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们详细看看返回值。从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partOfSpeech&lt;/code&gt; 可以看到「Joanne」是一个名词。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependencyEdge&lt;/code&gt; 包含可用于创建&lt;a href=&quot;https://en.wikipedia.org/wiki/Parse_tree#Dependency-based_parse_trees&quot;&gt;依存句法分析树&lt;/a&gt;（依存構文木/Dependency-based parse trees）的数据。这个语法树是一个图表，用来显示句中各单词之间的关系。上述文段的依存句法分析树如下所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq3h4ul57oj30l605ndgg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;使用下面的 demo ，你可以在浏览器中创建自己的依存句法分析树。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/natural-language/&quot;&gt;https://cloud.google.com/natural-language/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上述返回值中， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headTokenIndex&lt;/code&gt; 是指具有指向「Joanne」的圆弧的标记（token）的索引。文段中的每一个标记（token）都可以看作是数组中的一个单词，「Joanne」的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headTokenIndex&lt;/code&gt; 值是1，表示依存句法分析树中连接了「Rowling」这个单词。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NN&lt;/code&gt; （修饰语句 noun compound （名词复合词）的略称）这个标签表示该词在改句子中的作用。「Joanne」是这个句子的主语「Rowling」的修饰词。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lemma&lt;/code&gt; 是这个单词的规范化形式。比如，&lt;em&gt;run&lt;/em&gt;、&lt;em&gt;runs&lt;/em&gt;、&lt;em&gt;ran&lt;/em&gt;、&lt;em&gt;running&lt;/em&gt; 这些单词的 lemma 都是 run 。lemma 有助于你调查大量文本中某一单词的出现频率。&lt;/p&gt;

&lt;h1 id=&quot;其他语言的自然语言处理&quot;&gt;其他语言的自然语言处理&lt;/h1&gt;

&lt;p&gt;Natural Language API 还支持其他很多语言的实体分析和语法注释。现在我们以日语为例，尝试进行日语文段的实体分析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;document&quot;:{
    &quot;type&quot;:&quot;PLAIN_TEXT&quot;,
    &quot;content&quot;:&quot;日本のグーグルのオフィスは、東京の六本木ヒルズにあります&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（译者：句意是“日本的谷歌办公大楼在东京的六本木新城。”）&lt;/p&gt;

&lt;p&gt;我们不必告诉 API 这个文段是什么语言，API 能够自动检测出来。我们以相同的方式发送 API 请求。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &quot;https://language.googleapis.com/v1/documents:analyzeEntities?key=${API_KEY}&quot; -s -X POST -H &quot;Content-Type: application/json&quot; --data-binary @request.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将得到形式如下的响应。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;entities&quot;: [
    {
      &quot;name&quot;: &quot;日本&quot;,
      &quot;type&quot;: &quot;LOCATION&quot;,
      &quot;metadata&quot;: {
        &quot;wikipedia_url&quot;: &quot;https://en.wikipedia.org/wiki/Japan&quot;,
        &quot;mid&quot;: &quot;/m/03_3d&quot;
      },
      &quot;salience&quot;: 0.23854347,
      &quot;mentions&quot;: [
        {
          &quot;text&quot;: {
            &quot;content&quot;: &quot;日本&quot;,
            &quot;beginOffset&quot;: -1
          },
          &quot;type&quot;: &quot;PROPER&quot;
        }
      ]
    },
    {
      &quot;name&quot;: &quot;グーグル&quot;,
      &quot;type&quot;: &quot;ORGANIZATION&quot;,
      &quot;metadata&quot;: {
        &quot;mid&quot;: &quot;/m/045c7b&quot;,
        &quot;wikipedia_url&quot;: &quot;https://en.wikipedia.org/wiki/Google&quot;
      },
      &quot;salience&quot;: 0.21155767,
      &quot;mentions&quot;: [
        {
          &quot;text&quot;: {
            &quot;content&quot;: &quot;グーグル&quot;,
            &quot;beginOffset&quot;: -1
          },
          &quot;type&quot;: &quot;PROPER&quot;
        }
      ]
    },
    ......
    ......
  ],
  &quot;language&quot;: &quot;ja&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;恭喜&quot;&gt;恭喜！&lt;/h1&gt;

&lt;p&gt;通过此次向导，我们尝试执行了实体提取、情感分析和语法注释，学会了如何使用 Natural Language API 进行文本分析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;学到的东西&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;构造 Natural Language API 请求，并使用 curl 发送请求&lt;/li&gt;
  &lt;li&gt;使用 Natural Language API 提取文本中的实体，并进行情感分析&lt;/li&gt;
  &lt;li&gt;使用 Natural Language API 对文本进行语言分析（语法、词性等）&lt;/li&gt;
  &lt;li&gt;使用不同的语言构造 Natural Language API 请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;下一步&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;浏览 Natural Language API 文档的&lt;a href=&quot;https://cloud.google.com/natural-language/docs/tutorials&quot;&gt;向导&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;尝试使用 &lt;a href=&quot;https://cloud.google.com/vision/&quot;&gt;Vision API&lt;/a&gt; 、&lt;a href=&quot;https://cloud.google.com/speech/&quot;&gt;Speech API&lt;/a&gt; 。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">原文：Natural Language APIでエンティティと感情を分析する</summary></entry><entry><title type="html">使用bypy在命令行上传文件到百度云盘</title><link href="https://0qinghao.github.io/inforest/2018/04/06/bypy-baiduyun/" rel="alternate" type="text/html" title="使用bypy在命令行上传文件到百度云盘" /><published>2018-04-06T00:00:00+08:00</published><updated>2018-04-06T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/04/06/bypy-baiduyun</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/04/06/bypy-baiduyun/">&lt;p&gt;repo: &lt;a href=&quot;https://github.com/houtianze/bypy&quot;&gt;https://github.com/houtianze/bypy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install bypy 

# 执行任意命令进行授权
bypy info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#上传文件夹内的内容到app/bypy/
bypy upload 文件夹
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#定时执行上传
sudo nano /etc/crontab

*/1 * * * * Rin bypy upload 文件夹

sudo /etc/init.d/cron restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">repo: https://github.com/houtianze/bypy</summary></entry><entry><title type="html">インスタグラム爬图</title><link href="https://0qinghao.github.io/inforest/2018/04/06/ins-python-scraper/" rel="alternate" type="text/html" title="インスタグラム爬图" /><published>2018-04-06T00:00:00+08:00</published><updated>2018-04-06T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/04/06/ins-python-scraper</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/04/06/ins-python-scraper/">&lt;p&gt;repo：&lt;a href=&quot;https://github.com/rarcega/instagram-scraper&quot;&gt;https://github.com/rarcega/instagram-scraper&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# https://github.com/rarcega/instagram-scraper/blob/master/setup.py
sudo python setup.py install

pip install instagram-scraper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;instagram-scraper 用户名 -u 你的用户名 -p 你的密码 -d 存放文件夹
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定时爬取&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/crontab

*/1 * * * * Rin instagram-scraper 用户名 -d 存放文件夹

sudo /etc/init.d/cron restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">repo：https://github.com/rarcega/instagram-scraper</summary></entry><entry><title type="html">常见内网网段</title><link href="https://0qinghao.github.io/inforest/2018/04/05/common-local-ip/" rel="alternate" type="text/html" title="常见内网网段" /><published>2018-04-05T00:00:00+08:00</published><updated>2018-04-05T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/04/05/common-local-ip</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/04/05/common-local-ip/">&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://blog.kankanan.com/article/51857f51-ip-6bb5670954ea4e9b.html&quot;&gt;内网IP段有哪些&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;常见的内网IP段有：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;10.0.0.0/8
10.0.0.0 - 10.255.255.255

172.16.0.0/12
172.16.0.0 - 172.31.255.255

192.168.0.0/16
192.168.0.0 - 192.168.255.255
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上三个网段分别属于A、B、C三类IP地址，来自 《RFC 1918》。&lt;/p&gt;

&lt;p&gt;但是根据 《Reserved IP addresses - Wikipedia, the free encyclopedia》 及《RFC 6890 - Special-Purpose IP Address Registries》的描述， 还有很多其它的内网IP段（包括IPv6），以及其它用途的保留IP地址。&lt;/p&gt;

&lt;p&gt;其它IPv4内网段罗列如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.0.0.0/8
0.0.0.0 - 0.255.255.255
用于当前网络内的广播消息。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;100.64.0.0/10
100.64.0.0 - 100.127.255.255
由运营商使用的私网IP段，随着IPv4地址池的耗光，会有更多用户被分配到这个网段。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.0/8
127.0.0.0 - 127.255.255.255
本机回环地址。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;169.254.0.0/16
169.254.0.0 - 169.254.255.255
获取不到IP地址时使用，通常因为从DHCP服务器获取不到IP。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;255.255.255.255/32
255.255.255.255
本网段的广播地址。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">内网IP段有哪些</summary></entry><entry><title type="html">译 - 使用谷歌Cloud Translation API翻译文本</title><link href="https://0qinghao.github.io/inforest/2018/04/05/google-translation-api/" rel="alternate" type="text/html" title="译 - 使用谷歌Cloud Translation API翻译文本" /><published>2018-04-05T00:00:00+08:00</published><updated>2018-04-05T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/04/05/google-translation-api</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/04/05/google-translation-api/">&lt;blockquote&gt;
  &lt;p&gt;原文：&lt;a href=&quot;https://codelabs.developers.google.com/codelabs/cloud-translation-intro-ja/index.html#0&quot;&gt;Translation APIでテキストをほんやくする&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;概要&quot;&gt;概要&lt;/h1&gt;

&lt;p&gt;使用Cloud Translation，可以将任意的字符串翻译为API支持的语言。由于语言检测功能的存在，即使在源语言未知的情况下，也能使用该API。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将要学习的东西&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建Cloud Translation API请求，使用curl调用API&lt;/li&gt;
  &lt;li&gt;翻译文本的方法&lt;/li&gt;
  &lt;li&gt;高级版（Premium Edition）的使用方法&lt;/li&gt;
  &lt;li&gt;检测语言&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;必要的准备&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建Google Cloud Platform项目&lt;/li&gt;
  &lt;li&gt;浏览器（&lt;a href=&quot;https://www.google.com/chrome/browser/desktop/&quot;&gt;Chrome&lt;/a&gt;、&lt;a href=&quot;https://www.mozilla.org/firefox/&quot;&gt;Firefox&lt;/a&gt; 等）&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;设置和一些说明&quot;&gt;设置和一些说明&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;根据自己的情况进行设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还未拥有Google账号（Gmail / Google Apps）的情况下，&lt;a href=&quot;https://accounts.google.com/SignUp&quot;&gt;创建账号&lt;/a&gt;是必须的。登录Google Cloud Platform Console（&lt;a href=&quot;http://console.cloud.google.com/&quot;&gt;console.cloud.google.com&lt;/a&gt;），创建一个新项目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1is4jamij307q04rq2v.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1isb2igbj30dg05waa3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;请记住项目名称。任意一个Google Cloud项目都拥有唯一的名称（上述的名称已经被使用了，所以实际上无法使用）。&lt;/p&gt;

&lt;p&gt;Google Cloud Platform的新用户将赠与&lt;a href=&quot;https://console.developers.google.com/billing/freetrial&quot;&gt;相当于$ 300的试用金&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用于教学的账号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;教师将已有的项目进行设置，生成临时账号。若你得到了教师发放的临时账号，你将不必顾虑项目中产生的费用。但是，一旦该教学项目结束，所有的临时账号将被无效化。&lt;/p&gt;

&lt;p&gt;当你从教师那收到了临时账号的用户名/密码，就能够登录Google Cloud Console（&lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;https://console.cloud.google.com/&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;登录后，你将看到如下界面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jc2vxn7j30wt0h4taz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;启用translation-api&quot;&gt;启用Translation API&lt;/h1&gt;

&lt;p&gt;点击屏幕左上角的菜单图标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jddf3k3j307n01dglk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下拉菜单中选择 [&lt;strong&gt;API Manager&lt;/strong&gt;]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1je8vadpj308k09gq36.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击 [&lt;strong&gt;启用API&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jfksxryj30l503kgls.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，在搜索框中输入「translate」。点击 [&lt;strong&gt;Google Cloud Translation API&lt;/strong&gt;]。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jge0vz8j30sj07rwey.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;API已经启用的情况下，只会显示 [停用] 按钮。请不要停用API。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jj62ajkj30dx01xwed.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;API还未启用的情况下，点击[&lt;strong&gt;启用&lt;/strong&gt;]，启用 Cloud Translation API 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jkjrp5kj30ku04zglv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等待数秒，API成功启用后，将显示如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1jlh7mqoj30dx01xwed.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;激活cloud-shell&quot;&gt;激活Cloud Shell&lt;/h1&gt;

&lt;p&gt;Google Cloud Shell 是在云端运行的命令行环境。这台基于 Debian 的虚拟机能够加载任何您需要的开发工具（gcloud、bq、git等），并提供永久的5 GB主目录。这次教程将使用 Cloud Shell 创建对 Translation API 的请求。&lt;/p&gt;

&lt;p&gt;点击标题栏右侧的 [激活 Google Cloud Shell] 按钮（&lt;strong&gt;&amp;gt;_&lt;/strong&gt;），启动Cloud Shell。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1k54ijd6j318g01y3yw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloud Shell 将在控制台底部的新窗口中打开，并显示命令行提示符。请等待提示符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user@project:~$&lt;/code&gt; 出现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1k6p9s1uj318g0a8dg7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;生成api-key&quot;&gt;生成API Key&lt;/h1&gt;

&lt;p&gt;你将通过使用curl发送一个请求来调用 Translation API 。在发送请求时，你需要在 URL 中插入一个生成的 API 密钥。为了创建 API 密钥，让我们点击侧边栏的 [API Manager] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1vzcg8gfj308f09edg0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，在 [&lt;strong&gt;凭据&lt;/strong&gt;] 选项卡中点击 [&lt;strong&gt;创建凭据&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1w1xzz3vj30t80fdt9v.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下拉菜单中选择  [&lt;strong&gt;API 密钥&lt;/strong&gt;] 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fq1w36by92j30ds08m74w.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，复制生成好的密钥。&lt;/p&gt;

&lt;p&gt;将密钥复制到剪贴板后，使用下述命令将其保存到 Cloud Shell 的环境变量中。下述的 &lt;strong&gt;YOUR_API_KEY&lt;/strong&gt; 请替换成剪贴板中的内容。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export API_KEY=YOUR_API_KEY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;翻译文本&quot;&gt;翻译文本&lt;/h1&gt;

&lt;p&gt;在此例中，将「My name is Steve」这个字符串翻译为西班牙语。使用下述的curl命令，将之前保存好的 API 密钥环境变量和将要翻译的文本一起，传递给 Translation API 。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TEXT=&quot;My%20name%20is%20Steve&quot;
curl &quot;https://translation.googleapis.com/language/translate/v2?target=es&amp;amp;key=${API_KEY}&amp;amp;q=${TEXT}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将得到形式如下的响应。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;data&quot;: {
    &quot;translations&quot;: [
      {
        &quot;translatedText&quot;: &quot;Mi nombre es Steve&quot;,
        &quot;detectedSourceLanguage&quot;: &quot;en&quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;响应中，你可以看到翻译出的文本和 API 检测到的源语言。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Premium 模式&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Google Cloud Translation 在几乎所有翻译任务中都是用了 Standard Edition 模式。然而 Google 从最近开始，使用了更为强大的 &lt;a href=&quot;https://research.googleblog.com/2016/09/a-neural-network-for-machine.html&quot;&gt;Neural machine Translation System&lt;/a&gt; 来优化翻译服务。在这里，我们可以使用 Premium 模式。详情请参阅&lt;a href=&quot;https://cloud.google.com/translate/docs/premium&quot;&gt;此处的指南&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;检测语言&quot;&gt;检测语言&lt;/h1&gt;

&lt;p&gt;除了文本翻译以外，Translation API 还能用来检测文本的语言。此例中，我们将检测两个字符串的语言。下面将使用 curl 命令，把之前保存的 API 密钥环境变量和待检测的文本一起传递给 Translation API 。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TEXT_ONE=&quot;Meu%20nome%20é%20Steven&quot;
TEXT_TWO=&quot;日本のグーグルのオフィスは、東京の六本木ヒルズにあります&quot;
curl &quot;https://translation.googleapis.com/language/translate/v2/detect?key=${API_KEY}&amp;amp;q=${TEXT_ONE}&amp;amp;q=${TEXT_TWO}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你将得到形式如下的响应。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;data&quot;: {
    &quot;detections&quot;: [
      [
        {
          &quot;confidence&quot;: 0.84644311666488647,
          &quot;isReliable&quot;: false,
          &quot;language&quot;: &quot;pt&quot;
        }
      ],
      [
        {
          &quot;confidence&quot;: 1,
          &quot;isReliable&quot;: false,
          &quot;language&quot;: &quot;ja&quot;
        }
      ]
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本例中返回的语言是 「pt」和「ja」。它们是 &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_639-1&quot;&gt;ISO-639-1&lt;/a&gt; 的标识符，指葡萄牙语和日本语。关于可能的返回值，在&lt;a href=&quot;https://cloud.google.com/translate/docs/languages&quot;&gt;Translation API 支持的语言一览&lt;/a&gt;中可以查询。&lt;/p&gt;

&lt;h1 id=&quot;恭喜&quot;&gt;恭喜！&lt;/h1&gt;

&lt;p&gt;在此次向导中，我们学习了如何使用 Cloud Translation API 进行文本的翻译。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;学到的东西&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建Cloud Translation API请求，使用curl调用API&lt;/li&gt;
  &lt;li&gt;翻译文本的方法&lt;/li&gt;
  &lt;li&gt;高级版（Premium Edition）的使用方法&lt;/li&gt;
  &lt;li&gt;检测语言&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;下一步&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过常用的编程语言，使用客户端库，学习 &lt;a href=&quot;https://cloud.google.com/translate/docs/samples&quot;&gt;Translation API 的示例应用程序&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;尝试使用 &lt;a href=&quot;https://cloud.google.com/vision/&quot;&gt;Vision API&lt;/a&gt; 、&lt;a href=&quot;https://cloud.google.com/speech/&quot;&gt;Speech API&lt;/a&gt; 。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">原文：Translation APIでテキストをほんやくする</summary></entry><entry><title type="html">树莓派学习手记——制作一个空调遥控器（红外接收、发射的实现）</title><link href="https://0qinghao.github.io/inforest/2018/04/02/raspberrypi-aircon-ir-remote/" rel="alternate" type="text/html" title="树莓派学习手记——制作一个空调遥控器（红外接收、发射的实现）" /><published>2018-04-02T00:00:00+08:00</published><updated>2018-04-02T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/04/02/raspberrypi-aircon-ir-remote</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/04/02/raspberrypi-aircon-ir-remote/">&lt;p&gt;使用树莓派搭配红外管，进行接收、发射红外信号是很方便的，同时红外信号也有很广泛的用途。这次我们将总结使用树莓派制作一个空调红外遥控器的过程。&lt;/p&gt;

&lt;h1 id=&quot;准备工具&quot;&gt;准备工具&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;红外接收管（参考型号HS0038B）&lt;/li&gt;
  &lt;li&gt;红外发射管（参考型号TSAL6200）&lt;/li&gt;
  &lt;li&gt;遥控器（或能使用万能遥控器的手机）&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;用作开关的三极管、限流电阻（非必须、参考型号S9013）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005MY9Xigy1fpx7jt8je6j30a406ldgf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用开关三极管可以有效增强红外发射管的性能，但不是必须的。不使用三极管也能在三五米范围内成功遥控空调。这些材料总共费用不超过1块钱，反而是快递费比较贵了。&lt;/p&gt;

&lt;p&gt;看到遥控器、接收管、发射管，相信已经有人明白了制作遥控器的原理。是的，我们只需要事先把遥控器发射出的红外信号记录下来，然后通过树莓派依样画葫芦地把这个信号发射出去，一个“克隆”版的遥控器就做好了。&lt;/p&gt;

&lt;h1 id=&quot;硬件连接&quot;&gt;硬件连接&lt;/h1&gt;

&lt;p&gt;*注意：两个GPIO引脚是固定的，与后续安装的软件有关。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;接收管信号输出脚 OUT → GPIO18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;发射管正极（不使用开关三极管的情况下） → GPIO17&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你手头上没有开关三极管，直接将红外发射管正极接在GPIO17，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/005MY9Xigy1fpx8l1i0yrj31cr11xdy7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果接入三极管，用GPIO17连接基极，控制发射极和集电极的通断：&lt;/p&gt;

&lt;p&gt;（偷懒了没有接入限流电阻，在意的同学自行接入）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/005MY9Xigy1fpxbofopfpj31cr11xasl.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;安装lirc&quot;&gt;安装lirc&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;解决方案来自：&lt;a href=&quot;https://github.com/josemotta/IoT.Starter.Api/tree/master/gpio-base#lirc-linux-infrared-remote-control-for-raspberry-pi&quot;&gt;LIRC: Linux Infrared Remote Control for Raspberry Pi&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;sudo apt update
sudo apt install lirc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;修改config-txt&quot;&gt;修改CONFIG. TXT&lt;/h2&gt;

&lt;p&gt;修改文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot/config.txt&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;sudo nano /boot/config.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;找到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lirc-rpi module&lt;/code&gt; 的部分，修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;# Uncomment this to enable the lirc-rpi module
dtoverlay=lirc-rpi,gpio_out_pin=17,gpio_in_pin=18,gpio_in_pull=up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;！！！注意：config.txt的配置内容，似乎根据不同Linux内核版本有微妙的变化，手头上暂时没有其他平台可以测试。如果后续测试时出问题，请Google关键词“lirc lirc-rpi gpio-ir”查阅相关资料。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;修改驱动配置&quot;&gt;修改驱动配置&lt;/h2&gt;

&lt;p&gt;修改文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/lirc/lirc_options.conf&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;sudo nano /etc/lirc/lirc_options.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 把：
driver = devinput
device = auto

# 修改为：
driver = default
device = /dev/lirc0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，重启树莓派。&lt;/p&gt;

&lt;h2 id=&quot;简单测试是否正常&quot;&gt;简单测试是否正常&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 必须停止lircd服务才能进入接收红外信号模式
sudo service lircd stop
mode2 -d /dev/lirc0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行上述命令后，用遥控器对着接收管随便按一些按钮，如果出现形式如下的输出就表示正常：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;space 16777215
pulse 8999
space 4457
pulse 680
space 1627
......
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;录入红外信号&quot;&gt;录入红外信号&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;解决方案来自：&lt;a href=&quot;https://www.cnx-software.com/2017/03/12/how-to-control-your-air-conditioner-with-raspberry-pi-board-and-anavi-infrared-phat/&quot;&gt;How to Control Your Air Conditioner with Raspberry Pi Board and ANAVI Infrared pHAT&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;lirc有一个自动录入红外信号、生成遥控器文件的功能。但此方法只适用于简单设备，比如风扇，这里就不记录过程了。有需要的直接运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irrecord -d /dev/lirc0 --disable-namespace&lt;/code&gt; ，按提示做完后把生成的文件放到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/lirc/lircd.conf.d/&lt;/code&gt; 目录就行了。&lt;/p&gt;

&lt;p&gt;这边就主要针对空调这种复杂设备，记录录入红外信号的过程。&lt;/p&gt;

&lt;p&gt;另外，简单了解一下&lt;a href=&quot;http://www.geek-workshop.com/thread-3564-1-1.html&quot;&gt;红外NEC协议&lt;/a&gt;可以帮助你理解配置的过程。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;为什么无法直接录制复杂设备的红外控制信号？&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;因为空调遥控器每次发送的信号不是单纯的一个”byte”，与其说它是“控制信号”，不如说是一个“状态”、“情景”。后文还会有实例帮助你理解。&lt;/p&gt;

&lt;h2 id=&quot;生成遥控器配置文件的样板&quot;&gt;生成遥控器配置文件的样板&lt;/h2&gt;

&lt;p&gt;空调这类复杂设备的遥控器配置文件，是需要自己手动输入的。但不可能整个文件都自己写——我们连格式都不知道。&lt;/p&gt;

&lt;p&gt;所以我们需要用刚才提到的自动录入功能生成一个样板，但请记住，这个样板中记录的信号极可能是&lt;strong&gt;不正确&lt;/strong&gt;的！我们只是通过它来了解配置内容的格式。&lt;/p&gt;

&lt;p&gt;开始自动录制：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-nohighlight&quot;&gt;# 请cd到有读写权限的目录下，因为需要创建一个遥控器配置文件
# 参数-f --force 表示 Force raw mode
irrecord -f -d /dev/lirc0 --disable-namespace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;认真阅读提示信息，根据提示按&lt;kbd&gt;Enter&lt;/kbd&gt;、输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;遥控器名称&lt;/code&gt; 、按&lt;kbd&gt;Enter&lt;/kbd&gt;、按照要求随机按遥控器、输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;按钮名称&lt;/code&gt; 、按对应的遥控器按钮。由于只是为了生成样板，所以录制一个按钮就够了。完成录制后，当前目录下会生成一个遥控器配置文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;遥控器名称.lircd.conf&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;如果发现录制过程十分缓慢，最后提示“未发现gap”之类的信息，请尝试跳过自动生成这一步，复制下面的配置文件当做生成的配置，直接进入下一步。（我在录制一些老式空调的命令时遇到了这种问题，只能这样解决，如果你有什么想法恳请提出）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我在录制时输入的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;遥控器名称&lt;/code&gt; 是aircon，录制的一个按钮是on，所以配置文件的内容形式如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin remote

  name  aircon
  flags RAW_CODES
  eps            30
  aeps          100

  gap          19991

      begin raw_codes

          name on
             9042    4438     700    1602     705     526
              678     528     681     531     674     527
              679     528     679     528     677     527
              677     528     679     528     678     528
              677    1632     676     529     676     531
              676     531     649     556     672     532
              650     558     654     552     652     553
              649     558     648    1661     650     558
              648     558     648    1661     649     562
              644     558     647     558     648    1657
              651     558     647    1659     650     557
              653     553     648    1660     648     557
              649

      end raw_codes

end remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你阅读了&lt;a href=&quot;http://www.geek-workshop.com/thread-3564-1-1.html&quot;&gt;红外NEC协议&lt;/a&gt;，就能马上意识到，这一串数字其实就是红外信号脉冲(pulse)、空白(space)的持续时间。&lt;/p&gt;

&lt;h2 id=&quot;手动编辑遥控器配置文件&quot;&gt;手动编辑遥控器配置文件&lt;/h2&gt;

&lt;p&gt;打开刚才生成的样板文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;遥控器名称.lircd.conf&lt;/code&gt; ，很容易发现 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin raw_codes&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end raw_codes&lt;/code&gt; 之间的内容就是需要我们手动修改的内容。刚才也提到过，样板中记录的信号极可能是&lt;strong&gt;不正确&lt;/strong&gt;的，所以我们先把自动生成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt; 按钮下方的信号数据删除掉。&lt;/p&gt;

&lt;p&gt;还记得刚才测试时使用的mode2命令吗。我们现在需要做的就是使用mode2命令接收遥控器发出的信号，然后将其加入到文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;遥控器名称.lircd.conf&lt;/code&gt; 中。首先，我们来录入&lt;strong&gt;正确&lt;/strong&gt;的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt; 按钮的信号数据：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -m --mode 使用行列显示模式，不显示pulse、space
mode2 -m -d /dev/lirc0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按下遥控器上的“开”按钮，得到形式如下的输出：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 16777215

     9059     4432      706     1604      706      528
      679      524      681     1603      703      526
      680     1602      715     1596      704      526
      679      527      679      527      680      527
      679     1604      705      530      673      530
      674      529      682      529      675      530
      674      532      674      532      650      557
      648      556      654     1653      676      533
      649      559      647     1667      639      559
      648      558      656      553      647     1658
      648      558      650     1659      649      559
      647      559      648     1659      648      558
      646    19991

      648      558      648      558      650      567
      638      557      648     1668      640      557
      649      558      650      558      646     1660
      650      556      649      557      649      559
      654      552      648     1657      651      558
      647      554      660      549      649      559
      647      557      649      559      648      559
      647      557      644      561      648      559
      648      556      647      560      648      556
      652      563      642     1658      648     1661
      649     1660      646     1658      650
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除去第一行很大的那个数，把其他数据全部复制，粘贴到配置文件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name on&lt;/code&gt; 下方。例如现在我必须删除“16777215”这个数，剩下的内容粘贴到配置文件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name on&lt;/code&gt; 下方。&lt;/p&gt;

&lt;p&gt;重复上述操作，增加更多的按钮，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name off&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name 26C&lt;/code&gt; 等。最后我录制了3个按钮，配置文件编辑成了这样：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin remote

  name  aircon
  flags RAW_CODES
  eps            30
  aeps          100

  gap          19991

      begin raw_codes

          name on
			 9059     4432      706     1604      706      528
			  679      524      681     1603      703      526
			  680     1602      715     1596      704      526
			  679      527      679      527      680      527
			  679     1604      705      530      673      530
			  674      529      682      529      675      530
			  674      532      674      532      650      557
			  648      556      654     1653      676      533
			  649      559      647     1667      639      559
			  648      558      656      553      647     1658
			  648      558      650     1659      649      559
			  647      559      648     1659      648      558
			  646    19991

			  648      558      648      558      650      567
			  638      557      648     1668      640      557
			  649      558      650      558      646     1660
			  650      556      649      557      649      559
			  654      552      648     1657      651      558
			  647      554      660      549      649      559
			  647      557      649      559      648      559
			  647      557      644      561      648      559
			  648      556      647      560      648      556
			  652      563      642     1658      648     1661
			  649     1660      646     1658      650
		  
		  name off
			 9029     4432      715     1594      706      526
			  682      523      681      525      680      526
			  681     1601      708     1607      699      524
			  688      519      682      526      678      527
			  681     1601      708      524      687      520
			  682      525      677      527      677      529
			  675      531      676      531      674      532
			  651      558      646     1659      650      557
			  648      557      650     1659      653      554
			  650      559      647      558      649     1657
			  649      558      648     1661      648      557
			  646      562      645     1666      643      558
			  649    19992

			  651      555      650      558      648      562
			  645      557      648     1661      653      552
			  646      560      650      557      648     1657
			  649      561      647      557      647      558
			  650      556      650     1659      649      559
			  647      557      649      558      648      559
			  647      557      651      564      642      559
			  646      557      649      557      657      552
			  647      557      648      558      650      557
			  645      560      653     1653      646     1661
			  650     1659      648      558      647

		  name 26C
			 9026     4430      705     1604      706      528
			  679      535      670     1604      705      527
			  675      532      679     1607      702      530
			  673      531      683     1625      672      535
			  672     1633      676      530      673      534
			  649      558      648      563      642      556
			  651      556      650      558      672      532
			  649      556      652     1659      648      558
			  656      551      646     1659      650      558
			  648      558      648      558      649     1658
			  649      561      648     1659      647      559
			  650      556      648     1660      646      559
			  647    19990

			  648     1659      649      558      648      558
			  647      558      650     1658      650      557
			  650      555      650      558      648      558
			  649      555      652      561      667      534
			  648      559      648     1658      656      550
			  650      557      672      533      649      555
			  650      559      649      558      647      559
			  648      558      648      566      641      558
			  647      558      648      558      650      558
			  648      558      648     1660      646      558
			  648      558      646      562      647

      end raw_codes

end remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;是的，如果你想要实现完整的控制，你就需要把所有按钮都录制一遍。如果你对配置文件中开头的eps、aeps等参数感兴趣，或者最后遥控不太正常，阅读&lt;a href=&quot;http://www.lirc.org/html/lircd.conf.html&quot;&gt;lircd.conf manual&lt;/a&gt;或许能帮到你。我使用的是默认的数值，一切工作正常。&lt;/p&gt;

&lt;p&gt;最后，把配置文件复制到指定目录 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/lirc/lircd.conf/&lt;/code&gt; 并重启lircd服务：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp aircon.lircd.conf /etc/lirc/lircd.conf.d/
sudo service lircd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*后续步骤出现问题的同学可以使用service lircd status查看服务启动的log，帮助定位bug。&lt;/p&gt;

&lt;h1 id=&quot;发射信号&quot;&gt;发射信号&lt;/h1&gt;

&lt;p&gt;终于，我们可以尝试着使用树莓派控制空调了。如果你没有使用开关三极管，你可能需要把树莓派拿到靠近空调的地方，并且把红外发射管对准空调。如果你使用了三极管，那么注意树莓派和空调之间不要有明显的物体阻隔即可。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 发射命令：irsend SEND_ONCE 遥控器名称 按钮名称
irsend SEND_ONCE aircon on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;如果前面的步骤一切正常，但在发射信号时报错“transmission failed”。请检查生成的遥控器配置文件，查看flags项，若是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags RAW_CODES|CONST_LENGTH&lt;/code&gt; ，请尝试将其修改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags RAW_CODES&lt;/code&gt; 并重启lircd服务。再测试能否发射信号。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;按钮不如说是情景&quot;&gt;按钮？不如说是情景&lt;/h2&gt;

&lt;p&gt;最后，我们来讨论一个比较有意思的东西。&lt;/p&gt;

&lt;p&gt;考虑一下这种情况：我为了录入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; 按钮，运行mode2命令开始录制。在遥控器显示温度23℃时按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; ，然后按照前面的方法编辑配置文件，写入了按钮 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name add&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;此时空调屏幕上显示温度是24℃。提问：如果我运行&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irsend SEND_ONCE aircon add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;空调会：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;温度提升到25℃&lt;/li&gt;
  &lt;li&gt;“滴”地响一声，然后什么都没发生，保持在24℃&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;很遗憾，后者发生了。&lt;/p&gt;

&lt;p&gt;实际上遥控器每按下一次按钮发送的信息是一个“情景”，我刚才录制的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; 按钮实际上是表示&lt;strong&gt;“温度设为24℃、进入制冷模式、风速设为自动…”&lt;/strong&gt;这样的一个“情景”。如果你在空调温度20℃时运行add命令，那么它就会一次性提升到24℃！&lt;/p&gt;

&lt;p&gt;这意味着，如果你想要设置任意温度，你需要把每一度都录制一遍，因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; 命令根本就不存在。&lt;/p&gt;

&lt;p&gt;当然，这也不全是坏事。&lt;/p&gt;

&lt;p&gt;我录制了一个按钮 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;26C&lt;/code&gt; ，功能是将温度调到26℃。然后我意识到， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;26C&lt;/code&gt; 这个按钮同时包含了开关状态的信息。是的！在空调关闭的情况下，如果我直接发送命令：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irsend SEND_ONCE aircon 26C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么空调会打开，并且调整到26℃！&lt;/p&gt;

&lt;p&gt;于是，我录制了一个按钮 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleep&lt;/code&gt; ，它将空调设置为“26℃、风速设为低、开启扫风、开启静音睡眠模式”。睡前运行一次 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irsend SEND_ONCE aircon Sleep&lt;/code&gt; ，感觉离智能家居又近了一步 23333 (•̀ω•́)✧。&lt;/p&gt;

&lt;h1 id=&quot;小结&quot;&gt;小结&lt;/h1&gt;

&lt;p&gt;其实写完这篇总结还是有点慌的，因为不管是树莓派版本、软件版本、红外管型号还是空调的型号，大家都是不一样的，说不准哪一步我这么做放别人那就是错的呢。事实上，我自己在做的过程中参考的一些博客就和我的实际情况有些出入了。只能希望这篇总结能够有一定的参考价值。最后，感谢你阅读文章！&lt;/p&gt;</content><author><name>Qinghao Lin</name></author><summary type="html">使用树莓派搭配红外管，进行接收、发射红外信号是很方便的，同时红外信号也有很广泛的用途。这次我们将总结使用树莓派制作一个空调红外遥控器的过程。</summary></entry></feed>