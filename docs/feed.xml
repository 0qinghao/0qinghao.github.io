<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://0qinghao.github.io/inforest/feed.xml" rel="self" type="application/atom+xml" /><link href="https://0qinghao.github.io/inforest/" rel="alternate" type="text/html" /><updated>2020-06-28T21:53:34+08:00</updated><id>https://0qinghao.github.io/inforest/feed.xml</id><title type="html">林间</title><subtitle>林庆毫的个人空间</subtitle><author><name>Qinghao Lin</name></author><entry><title type="html">译 - 使用iStyle格式化Verilog代码</title><link href="https://0qinghao.github.io/inforest/2019/08/09/translate-use-istyle-to-format-verilog-code/" rel="alternate" type="text/html" title="译 - 使用iStyle格式化Verilog代码" /><published>2019-08-09T00:00:00+08:00</published><updated>2019-08-09T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2019/08/09/translate-use-istyle-to-format-verilog-code</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2019/08/09/translate-use-istyle-to-format-verilog-code/">&gt; 原文：[Verilogでコード整形](https://qiita.com/kkumt93/items/70766645c07c298d19c3)

# 安装

iStyle可以从GitHub上clone、make自行编译出可执行文件，也可以直接下载已编译好的可执行文件。这里都给出来。

**Github**

https://github.com/thomasrussellmurphy/istyle-verilog-formatter

**可执行文件**

https://github.com/HayasiKei/istyle-verilog-formatter/releases/tag/v1.21_x86_64

# 格式化选项

以下是一些格式化时常用的选项及效果示例。

**待格式化代码**

``` verilog
reg [3:0] cnt;
always @(posedge clk or posedge rst) begin
if(rst) begin
cnt&lt;=4'h0;
end else begin
cnt&lt;=cnt+4'h1;
end
end
```

## **--style**

**ANSI style**

``` 
./iStyle --style=ansi test.v
```

``` verilog
reg [3:0] cnt;
always @(posedge clk or posedge rst)
begin
    if(rst)
    begin
        cnt&lt;=4'h0;
    end
    else
    begin
        cnt&lt;=cnt+4'h1;
    end
end
```

---

**Kernighan&amp;Ritchie style**

``` 
./iStyle --style=kr test.v
```

``` verilog
reg [3:0] cnt;
always @(posedge clk or posedge rst) begin
    if(rst) begin
        cnt&lt;=4'h0;
    end
    else begin
        cnt&lt;=cnt+4'h1;
    end
end
```

---

**GNU style**

``` 
./iStyle --style=gnu test.v
```

``` verilog
reg [3:0] cnt;
always @(posedge clk or posedge rst)
  begin
    if(rst)
      begin
        cnt&lt;=4'h0;
      end
    else
      begin
        cnt&lt;=cnt+4'h1;
      end
  end
```

## -s

``` 
./iStyle -s2 test.v
```

该选项指定缩进时的空格数量，-s2表示每次缩进使用2个空格（如果是-s4则表示每次用4个空格缩进）。

``` verilog
reg [3:0] cnt;
always @(posedge clk or posedge rst) begin
  if(rst) begin
    cnt&lt;=4'h0;
  end else begin
    cnt&lt;=cnt+4'h1;
  end
end
```

## -p

-p选项指定在运算符两侧插入空格。

``` verilog
reg [3: 0] cnt;
always @(posedge clk or posedge rst) begin
    if (rst)
    begin
        cnt &lt;= 4'h0;
    end else
    begin
        cnt &lt;= cnt + 4'h1;
    end
end
```

## -P

-P选项指定在运算符和括号周围插入空格。

``` verilog
reg [ 3: 0 ] cnt;
always @( posedge clk or posedge rst ) begin
    if ( rst )
    begin
        cnt &lt;= 4'h0;
    end else
    begin
        cnt &lt;= cnt + 4'h1;
    end
end
```

# 小结

虽然文中没有写，**module**声明的缩进感觉并不是很好。verilog有各种各样的代码风格，因此有一个强大的格式化程序是很有用的。</content><author><name>Qinghao Lin</name></author><summary type="html">原文：Verilogでコード整形</summary></entry><entry><title type="html">在Windows命令行、Linux终端使用代理</title><link href="https://0qinghao.github.io/inforest/2018/09/19/proxy-set-in-windows-and-linux/" rel="alternate" type="text/html" title="在Windows命令行、Linux终端使用代理" /><published>2018-09-19T00:00:00+08:00</published><updated>2018-09-19T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/09/19/proxy-set-in-windows-and-linux</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/09/19/proxy-set-in-windows-and-linux/">在之前的博文中分享了如何[使用Google云计算引擎搭建SS服务器](https://segmentfault.com/a/1190000013399064)，如何[使用SS客户端](https://segmentfault.com/a/1190000013539547)，已经满足了科学上网的基本需求。这次将要总结在Windows的 `CMD` 窗口和Linux的 `LX终端` 中，让 `wget`  `curl` 等命令使用代理需要进行的一些配置。

# Windows命令行代理

假设你已经使用了SS客户端，本地socks5代理为127.0.0.1:1080

在CMD窗口输入如下指令设置代理：

``` nohighlight
set http_proxy=socks5://127.0.0.1:1080
set https_proxy=socks5://127.0.0.1:1080
set ftp_proxy=socks5://127.0.0.1:1080
```

测试 `curl https://www.facebook.com` 能得到返回结果。

![](http://ww1.sinaimg.cn/mw690/005MY9Xigy1fp4azce62uj30hd075t9e.jpg)

取消代理命令：

``` 
set http_proxy=
set https_proxy=
set ftp_proxy=
```

*****设置代理后只对当前命令行窗口生效，重新打开CDM需要再次设置。

# Linux LX终端代理

由于Linux下SS客户端仅代理socks5协议的流量（如果不是这个原因恳请指正）。所以想在LX终端使用代理，需要在SS的socks5流量前再接一个代理，允许http、https、ftp协议流量通过。

我们也假定本地socks5代理为127.0.0.1:1080

## 安装polipo

Debian下直接使用apt命令安装：

``` shell
sudo apt update
sudo apt install polipo
```

编辑配置文件：

``` nohighlight
sudo nano /etc/polipo/config
```

配置内容如下

``` nohighlight
# This file only needs to list configuration variables that deviate
# from the default values.  See /usr/share/doc/polipo/examples/config.sample
# and &quot;polipo -v&quot; for variables you can tweak and further information.

logSyslog = true
logFile = /var/log/polipo/polipo.log

proxyAddress = &quot;0.0.0.0&quot;

socksParentProxy = &quot;127.0.0.1:1080&quot;
socksProxyType = socks5

chunkHighMark = 50331648
objectHighMark = 16384

dnsQueryIPv6 = no
```

按&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt;，&lt;kbd&gt;Y&lt;/kbd&gt;保存退出。

重启polipo服务：

``` shell
sudo service polipo restart
```

## 启用代理

通过 `service polipo status` 命令，我们可以看到新的监听端口为**8123**。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fp4g22nbr8j30f905ddhd.jpg)

因此，LX终端启用代理的命令为：

``` nohighlight
export http_proxy=http://127.0.0.1:8123
export https_proxy=http://127.0.0.1:8123
export ftp_proxy=http://127.0.0.1:8123
```

同样，直接输入上述命令设置的代理也是临时的。一个比较实用的方法是在~/.bashrc文件中设置环境，之后就不需要再手动设置了。

``` shell
sudo nano ~/.bashrc
```

在文件最后插入上述三条指令，保存。

测试 `wget` 指令：

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fp4gl2vchsj30er05a3z3.jpg)

# 小结

我对CMD/LX终端设置代理的出发点，是为了使用Google的一个API，设置后确实能够成功使用。另外似乎对 `pip` 等指令也有效果，安装python模块时的下载速度有比较明显的提升。不过说到底只是在总结如何使用别人做好的工具，很多原理还是没有明白，如果文中有何纰漏，恳请指正。

感谢你阅读文章！</content><author><name>Qinghao Lin</name></author><summary type="html">在之前的博文中分享了如何使用Google云计算引擎搭建SS服务器，如何使用SS客户端，已经满足了科学上网的基本需求。这次将要总结在Windows的 CMD 窗口和Linux的 LX终端 中，让 wget curl 等命令使用代理需要进行的一些配置。</summary></entry><entry><title type="html">Shadowsocks客户端在不同系统下的使用方法</title><link href="https://0qinghao.github.io/inforest/2018/03/06/shadowsocks-clients/" rel="alternate" type="text/html" title="Shadowsocks客户端在不同系统下的使用方法" /><published>2018-03-06T00:00:00+08:00</published><updated>2018-03-06T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/03/06/shadowsocks-clients</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/03/06/shadowsocks-clients/">当我们配置好Shadowsocks服务器端，或是购买了SS账号后，就可以使用客户端开始科学上网了。下面分别介绍在Windows、安卓、Linux(Debian)系统下SS客户端的使用方法。

# Windows系统下SS客户端的使用方法

Windows系统下的SS客户端使用起来最为方便。客户端自带了系统全局代理的功能，甚至可以省去配置浏览器插件的操作。

## 下载客户端

* [点击这里，跳转到GitHub下载](https://github.com/shadowsocks/shadowsocks-windows/releases)
* [如果你无法打开GitHub，可以点击这里，前往微云下载，但不保证是最新版本](https://share.weiyun.com/edaa2c5f08aa5169c2be5c6a9f59662d)

将压缩包内的可执行程序解压，放置在合适的文件夹内，运行后会在程序同一目录下产生配置文件，如果随便放置容易显得杂乱。

## 配置客户端

第一次打开SS客户端会主动要求编辑服务器。填入你的 **`服务器地址`** **`密码`** **`服务器端口号`** **`加密方式`** ，其他设置可以保持默认。
![](http://ww1.sinaimg.cn/large/005MY9Xigy1fou6bi1tebj309z09l3zf.jpg)

最后，右击任务栏的小图标，勾选 **`启用系统代理`** 。系统代理模式选择 **`PAC模式`** ，这样SS会自动使用代理访问墙外站点，不需要另外安装浏览器的代理插件。
![](http://ww1.sinaimg.cn/mw690/005MY9Xigy1fou6nucjagj3059065t8t.jpg)

# 安卓系统下SS客户端的使用方法

安卓系统下的SS客户端也很完善，配置方便，甚至还可以指定仅部分APP使用代理。

## 下载客户端

* 如果你能使用Google Play商店，直接搜索安装[Shadowsocks](https://play.google.com/store/apps/details?id=com.github.shadowsocks)
* [你也可以点击这里，前往微云下载，但不保证是最新版本](https://share.weiyun.com/f9250253dab9ec9ba9b12e124733adcd)

## 配置客户端

点击右上角的 `+` 选择 `手动设置` ，填入你的 **`服务器地址`** **`密码`** **`服务器端口号`** **`加密方式`** ，其他设置可以保持默认。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fp2brcto8aj307y0e3wf1.jpg)

还可以在配置中开启 `分应用VPN` 功能，来指定仅部分APP的流量进行代理；或者再打开 `绕行模式` 来指定部分APP的流量绕过代理。

# Debian下SS客户端的使用方法

Linux下使用SS客户端要麻烦一些，一方面Linux下SS不带全局代理，需要搭配浏览器插件使用；另一方面笔者在使用中有遇到bug，不知在你阅读这篇文章时是否已经修复，总之还是会记录在下文中以供参考。

另外，这部分介绍的是配合Chrome插件实现浏览器翻墙的方法。关于如何在LX终端让 `wget`  `curl` 等命令使用代理，将在另一篇文章中再做总结。

## 安装客户端

``` shell
sudo apt update
sudo apt install shadowsocks
```

## 运行sslocal

不带任何参数运行 `sslocal` 可以查看帮助。

运行SS客户端一般有两种方法。你可以参考帮助，将必要的参数填入，用一条较长的指令来运行：

``` shell
sudo sslocal -s 服务器地址 -p 服务器端口 -k 密码 -m 加密方式 -d start
```

显然上面这种方式效率太低。另一种方式就是将各项参数保存为json文件，运行时指定配置文件即可。

假设我们的配置文件是 `/etc/ss.json` ，其内容为：

``` nohighlight
{
  &quot;server&quot;:&quot;服务器地址&quot;,
  &quot;server_port&quot;:服务器端口,
  &quot;local_address&quot;:&quot;127.0.0.1&quot;,
  &quot;local_port&quot;:1080,
  &quot;password&quot;:&quot;密码&quot;,
  &quot;timeout&quot;:600,
  &quot;method&quot;:&quot;加密方式&quot;,
  &quot;fast_open&quot;:false
}
```

将你的 **`服务器地址`** **`密码`** **`服务器端口号`** **`加密方式`** 替换到上述文件。（有双引号的请保留双引号，不要删除）

接下来，每次需要运行SS客户端时，我们只需要输入一条简短的指令：

``` shell
sudo sslocal -c /etc/ss.json -d start
```

### *运行sslocal时遇到的bug

&gt; 解决方案来自[Kali2.0 update到最新版本后安装shadowsocks服务报错问题](http://blog.csdn.net/blackfrog_unique/article/details/60320737)

笔者在运行sslocal命令时遇到了形如 *INFO loading libcrypto from libcrypto.so.1.1* 的报错。后在上述文章中找到解决方案。

打开文件openssl.py，请参照错误提示确定是否与下述文件路径相同：

``` nohighlight
sudo nano /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py
```

使用快捷键&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;_&lt;/kbd&gt;选择跳转到第52行

将 *libcrypto. EVP_CIPHER_CTX_ `cleanup` .argtypes = (c_void_p, )* 修改为 *libcrypto. EVP_CIPHER_CTX_ `reset` .argtypes = (c_void_p, )* 

同样地，跳转到第111行

将 *libcrypto. EVP_CIPHER_CTX_ `cleanup` (self.ctx)* 修改为 *libcrypto. EVP_CIPHER_CTX_ `reset` (self._ctx)*

按&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt;，&lt;kbd&gt;Y&lt;/kbd&gt;保存退出。重新执行sslocal指令运行正常。

## 安装Chrome插件

由于Linux下的SS客户端不带全局代理功能，需要配合浏览器插件使用。这里只介绍Chrome插件的安装方法，火狐大体上类似。

如果你能够使用Chrome应用商店，搜索[SwitchyOmega](https://chrome.google.com/webstore/search/switchyomega?hl=zh-CN)安装即可。你也可以点击[这里](https://share.weiyun.com/28d769f6e52b68b894736b54b29cf9e4)通过微云下载crx文件，将其拖动到[Chrome扩展程序页面](chrome://extensions/)完成安装。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fp2f11yv4kj30d207y0t4.jpg)

点击选项，如下图配置SwitchyOmega。 `代理协议` 选择 `SOCKS5` ；如果你在ss.json配置文件中修改过 `local_port` 参数，则这里 `代理端口` 必须与其一致，否则保持默认值1080即可。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fp2f9hgejzj30gl06ct9h.jpg)

最后，保存配置，点击SwitchyOmega图标切换到刚才配置好的情景模式。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fp2f89rsqgj30hw09u404.jpg)

# 结语

由于手上设备有限，没办法总结所有系统下的SS客户端使用方法。例如iOS系统下似乎是使用[Big Boss源](http://apt.thebigboss.org/onepackage.php?bundleid=com.linusyang.shadowsocks)搜索ShadowSocks应用，但没法亲自尝试。有兴趣的朋友建议前往官网https://shadowsocks.org/（.com那个是出售SS服务的）进一步了解。

感谢你阅读文章！</content><author><name>Qinghao Lin</name></author><summary type="html">当我们配置好Shadowsocks服务器端，或是购买了SS账号后，就可以使用客户端开始科学上网了。下面分别介绍在Windows、安卓、Linux(Debian)系统下SS客户端的使用方法。</summary></entry><entry><title type="html">申请和使用Google云计算引擎配置SS Server</title><link href="https://0qinghao.github.io/inforest/2018/02/27/google-cloud-engine-ss-server/" rel="alternate" type="text/html" title="申请和使用Google云计算引擎配置SS Server" /><published>2018-02-27T00:00:00+08:00</published><updated>2018-02-27T00:00:00+08:00</updated><id>https://0qinghao.github.io/inforest/2018/02/27/google-cloud-engine-ss-server</id><content type="html" xml:base="https://0qinghao.github.io/inforest/2018/02/27/google-cloud-engine-ss-server/">[Google Cloud Platform](https://cloud.google.com/)的新用户可以获得$300赠金的一年使用权，使用这笔不菲的赠金，我们可以构建应用程序、搭建网站、存储数据、体验各种强大的API。这次，我总结了使用Google云计算引擎搭建SS服务器，实现科学上网的过程，也算作为墙内使用谷歌云平台的第一步。

# 科学上网的基本原理

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fotxvw10lnj30b908lt9s.jpg)

我们只需要一个能够访问墙外目标地址的代理服务器。本地设备向服务器发送访问目标地址的请求，服务器收到请求后访问目标并将结果回传给本地设备。

我们是使用Shadowsocks（简称SS，中文名影梭）来配置服务器的，所以一般把这个服务器称为SS服务器。谷歌云平台提供的位于国外的云计算引擎可以用来搭建SS服务器。

# 申请试用谷歌云平台

***重要：你需要一张外币信用卡（VISA/MasterCard/JCB）**

首先，翻墙。突然有种鸡生蛋，蛋生鸡的矛盾，不过我相信你能找到一个免费试用的VPN。

登录[谷歌云平台](https://cloud.google.com)，点击右上角的申请试用后进入申请界面。地区可以选择中国，不影响后续的申请。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fotyf40bi9j30b00aymy2.jpg)

账号类型选择“个人”，填写名称地址电话。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fotyl3w3anj30dk09ujsp.jpg)

付款方式填写你的外币信用卡（单币银联卡无效）。提交后信用卡会扣除1美金进行验证，验证完成即退回。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fotynitahxj30dt07ft9n.jpg)

# 创建计算引擎

进入控制台，首先要求创建一个项目，尽量使用简单易记的项目名。

项目创建完成后，点击控制台左上角的 `☰` 打开导航栏，找到 `Compute Engine` → `VM实例` ，点击 `创建` 开始创建一个计算引擎。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fotz3od46zj30j309eabi.jpg)

`区域` 有3个比较好的选择：

``` nohighlight
asia-east1：位于台湾

asia-southeast1：位于新加坡

asia-northeast1：位于东京
```

从国内ping延迟都在100ms左右，它们的流量费用和硬件费用有细微的差别，在意的朋友可以在[这里](https://cloud.google.com/compute/pricing)查询。

`机器类型` 可以选择最小的微型（1个共享vCPU，0.6GB内存）以节省硬件费用，单作为SS服务器该配置已经足够。

其他设置可以保持默认。点击 `创建` 。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fotzuwl2gej30ep0acwgb.jpg)

# 配置SS服务器

创建完成后可以看到分配给实例的 **`外部IP`** ，请牢记。

点击云引擎后面的 `SSH` ，远程连接该主机，进行配置。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fou05u93clj30cw04yweq.jpg)

这里使用[秋水逸冰](https://teddysun.com/358.html)大大的SS服务器配置脚本。

依次输入下面三条指令：

``` nohighlight
wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/wjk199511140034/ss-onekeyinstall/master/shadowsocks.sh

sudo chmod +x shadowsocks.sh

sudo ./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log
```

第三条指令运行后即进入配置过程，需要根据提示输入几项信息。

Please input password for shadowsocks-libev：输入 **`密码`** ，请牢记

Please enter a port for shadowsocks-libev：输入SS **`服务器端口号`** ，请牢记

Which cipher you'd select：选择一种 **`加密方式`** ，请牢记

按任意键开始执行脚本，等待脚本运行完毕。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fou5nkwqofj30gs07d768.jpg)

# 创建防火墙规则

点击控制台左上角的 `☰` 打开导航栏，找到 `VPC网络` → `防火墙规则` ，点击 `创建防火墙规则` 创建如下2个规则。

1. 入站规则

`流量方向` ：入站

`目标` ：网络中的所有实例

`来源 IP 地址范围` ：0.0.0.0/0

`协议和端口` ：全部允许

   其他部分可以保持默认，这条规则表示允许所有ip/端口的所有协议入站。

2. 出站规则

`流量方向` ：出站

`目标` ：网络中的所有实例

`来源 IP 地址范围` ：0.0.0.0/0

`协议和端口` ：全部允许

   其他部分可以保持默认，这条规则表示允许所有协议出站到所有ip/端口。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fou5nhwhkuj30hx07eq4a.jpg)

至此，SS服务器部署完毕。你可以关闭你不稳定的试用版VPN，准备开始正确地科学上网了。

# 使用SS客户端

这里仅以Windows客户端为例，Android端很相似。Debian平台使用SS客户端则需要进行一些配置，将另外做一次总结。

可以在GitHub下载到Windows平台的[SS客户端](https://github.com/shadowsocks/shadowsocks-windows/releases)。

如果你无法打开GitHub，可以点击[这里](https://share.weiyun.com/edaa2c5f08aa5169c2be5c6a9f59662d)，前往微云下载，但不保证是最新版本。

请将可执行程序放置在合适的文件夹内，运行后会在程序同一目录下产生配置文件，如果随便放置容易显得杂乱。

第一次打开SS客户端会主动要求编辑服务器。填入你的 **`外部IP`** **`密码`** **`服务器端口号`** **`加密方式`** ，其他设置可以保持默认。

![](http://ww1.sinaimg.cn/large/005MY9Xigy1fou6bi1tebj309z09l3zf.jpg)

最后，右击任务栏的小图标，勾选 **`启用系统代理`** 。系统代理模式选择 **`PAC模式`** ，这样SS会自动使用代理访问墙外站点，不需要另外安装浏览器的代理插件。

![](http://ww1.sinaimg.cn/mw690/005MY9Xigy1fou6nucjagj3059065t8t.jpg)

# 参考资料

[Debian下shadowsocks-libev一键安装脚本](https://teddysun.com/358.html)

[Shadowsocks Troubleshooting](https://teddysun.com/399.html)

[Shadowsocks原理和搭建](http://blog.021xt.cc/archives/98)

[Google Cloud服务免费申请试用以及使用教程](https://51.ruyo.net/2144.html)

感谢你阅读文章！</content><author><name>Qinghao Lin</name></author><summary type="html">Google Cloud Platform的新用户可以获得$300赠金的一年使用权，使用这笔不菲的赠金，我们可以构建应用程序、搭建网站、存储数据、体验各种强大的API。这次，我总结了使用Google云计算引擎搭建SS服务器，实现科学上网的过程，也算作为墙内使用谷歌云平台的第一步。</summary></entry></feed>